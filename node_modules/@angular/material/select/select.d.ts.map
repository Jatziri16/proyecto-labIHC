{"version":3,"file":"select.d.ts","sources":["select.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { BooleanInput, NumberInput } from '@angular/cdk/coercion';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { CdkConnectedOverlay, ConnectedPosition, Overlay, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\nimport { AfterContentInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, InjectionToken, NgZone, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { CanDisable, CanDisableCtor, CanDisableRipple, CanDisableRippleCtor, CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher, HasTabIndex, HasTabIndexCtor, MatOptgroup, MatOption, MatOptionSelectionChange, _MatOptionBase } from '@angular/material/core';\r\nimport { MatFormField, MatFormFieldControl } from '@angular/material/form-field';\r\nimport { Observable, Subject } from 'rxjs';\r\n/**\r\n * The following style constants are necessary to save here in order\r\n * to properly calculate the alignment of the selected option over\r\n * the trigger element.\r\n */\r\n/**\r\n * The max height of the select's overlay panel.\r\n * @deprecated To be turned into a private variable.\r\n * @breaking-change 12.0.0\r\n */\r\nexport declare const SELECT_PANEL_MAX_HEIGHT = 256;\r\n/**\r\n * The panel's padding on the x-axis.\r\n * @deprecated To be turned into a private variable.\r\n * @breaking-change 12.0.0\r\n */\r\nexport declare const SELECT_PANEL_PADDING_X = 16;\r\n/**\r\n * The panel's x axis padding if it is indented (e.g. there is an option group).\r\n * @deprecated To be turned into a private variable.\r\n * @breaking-change 12.0.0\r\n */\r\nexport declare const SELECT_PANEL_INDENT_PADDING_X: number;\r\n/**\r\n * The height of the select items in `em` units.\r\n * @deprecated To be turned into a private variable.\r\n * @breaking-change 12.0.0\r\n */\r\nexport declare const SELECT_ITEM_HEIGHT_EM = 3;\r\n/**\r\n * Distance between the panel edge and the option text in\r\n * multi-selection mode.\r\n *\r\n * Calculated as:\r\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\r\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\r\n * The checkbox width is 16px.\r\n *\r\n * @deprecated To be turned into a private variable.\r\n * @breaking-change 12.0.0\r\n */\r\nexport declare const SELECT_MULTIPLE_PANEL_PADDING_X: number;\r\n/**\r\n * The select panel will only \"fit\" inside the viewport if it is positioned at\r\n * this value or more away from the viewport boundary.\r\n *\r\n * @deprecated To be turned into a private variable.\r\n * @breaking-change 12.0.0\r\n */\r\nexport declare const SELECT_PANEL_VIEWPORT_PADDING = 8;\r\n/** Injection token that determines the scroll handling while a select is open. */\r\nexport declare const MAT_SELECT_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\r\n/** @docs-private */\r\nexport declare function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;\r\n/** Object that can be used to configure the default options for the select module. */\r\nexport interface MatSelectConfig {\r\n    /** Whether option centering should be disabled. */\r\n    disableOptionCentering?: boolean;\r\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\r\n    typeaheadDebounceInterval?: number;\r\n    /** Class or list of classes to be applied to the menu's overlay panel. */\r\n    overlayPanelClass?: string | string[];\r\n}\r\n/** Injection token that can be used to provide the default options the select module. */\r\nexport declare const MAT_SELECT_CONFIG: InjectionToken<MatSelectConfig>;\r\n/** @docs-private */\r\nexport declare const MAT_SELECT_SCROLL_STRATEGY_PROVIDER: {\r\n    provide: InjectionToken<() => ScrollStrategy>;\r\n    deps: (typeof Overlay)[];\r\n    useFactory: typeof MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY;\r\n};\r\n/** Change event object that is emitted when the select value has changed. */\r\nexport declare class MatSelectChange {\r\n    /** Reference to the select that emitted the change event. */\r\n    source: MatSelect;\r\n    /** Current value of the select that emitted the event. */\r\n    value: any;\r\n    constructor(\r\n    /** Reference to the select that emitted the change event. */\r\n    source: MatSelect, \r\n    /** Current value of the select that emitted the event. */\r\n    value: any);\r\n}\r\n/** @docs-private */\r\ndeclare class MatSelectBase {\r\n    _elementRef: ElementRef;\r\n    _defaultErrorStateMatcher: ErrorStateMatcher;\r\n    _parentForm: NgForm;\r\n    _parentFormGroup: FormGroupDirective;\r\n    ngControl: NgControl;\r\n    constructor(_elementRef: ElementRef, _defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl);\r\n}\r\ndeclare const _MatSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanDisableRippleCtor & CanUpdateErrorStateCtor & typeof MatSelectBase;\r\n/**\r\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\r\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nexport declare const MAT_SELECT_TRIGGER: InjectionToken<MatSelectTrigger>;\r\n/**\r\n * Allows the user to customize the trigger that is displayed when the select has a value.\r\n */\r\nexport declare class MatSelectTrigger {\r\n}\r\n/** Base class with all of the `MatSelect` functionality. */\r\nexport declare abstract class _MatSelectBase<C> extends _MatSelectMixinBase implements AfterContentInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex, MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\r\n    protected _viewportRuler: ViewportRuler;\r\n    protected _changeDetectorRef: ChangeDetectorRef;\r\n    protected _ngZone: NgZone;\r\n    private _dir;\r\n    protected _parentFormField: MatFormField;\r\n    ngControl: NgControl;\r\n    private _liveAnnouncer;\r\n    private _defaultOptions?;\r\n    /** All of the defined select options. */\r\n    abstract options: QueryList<_MatOptionBase>;\r\n    /** All of the defined groups of options. */\r\n    abstract optionGroups: QueryList<MatOptgroup>;\r\n    /** User-supplied override of the trigger element. */\r\n    abstract customTrigger: {};\r\n    /**\r\n     * This position config ensures that the top \"start\" corner of the overlay\r\n     * is aligned with with the top \"start\" of the origin by default (overlapping\r\n     * the trigger completely). If the panel cannot fit below the trigger, it\r\n     * will fall back to a position above the trigger.\r\n     */\r\n    abstract _positions: ConnectedPosition[];\r\n    /** Scrolls a particular option into the view. */\r\n    protected abstract _scrollOptionIntoView(index: number): void;\r\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\r\n    protected abstract _positioningSettled(): void;\r\n    /** Creates a change event object that should be emitted by the select. */\r\n    protected abstract _getChangeEvent(value: any): C;\r\n    /** Factory function used to create a scroll strategy for this select. */\r\n    private _scrollStrategyFactory;\r\n    /** Whether or not the overlay panel is open. */\r\n    private _panelOpen;\r\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\r\n    private _compareWith;\r\n    /** Unique id for this input. */\r\n    private _uid;\r\n    /** Current `ariar-labelledby` value for the select trigger. */\r\n    private _triggerAriaLabelledBy;\r\n    /** Emits whenever the component is destroyed. */\r\n    protected readonly _destroy: Subject<void>;\r\n    /** The aria-describedby attribute on the select for improved a11y. */\r\n    _ariaDescribedby: string;\r\n    /** Deals with the selection logic. */\r\n    _selectionModel: SelectionModel<MatOption>;\r\n    /** Manages keyboard events for options in the panel. */\r\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\r\n    /** `View -> model callback called when value changes` */\r\n    _onChange: (value: any) => void;\r\n    /** `View -> model callback called when select has been touched` */\r\n    _onTouched: () => void;\r\n    /** ID for the DOM node containing the select's value. */\r\n    _valueId: string;\r\n    /** Emits when the panel element is finished transforming in. */\r\n    _panelDoneAnimatingStream: Subject<string>;\r\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\r\n    _scrollStrategy: ScrollStrategy;\r\n    _overlayPanelClass: string | string[];\r\n    /** Whether the select is focused. */\r\n    get focused(): boolean;\r\n    private _focused;\r\n    /** A name for this control that can be used by `mat-form-field`. */\r\n    controlType: string;\r\n    /** Trigger that opens the select. */\r\n    trigger: ElementRef;\r\n    /** Panel containing the select options. */\r\n    panel: ElementRef;\r\n    /**\r\n     * Overlay pane containing the options.\r\n     * @deprecated To be turned into a private API.\r\n     * @breaking-change 10.0.0\r\n     * @docs-private\r\n     */\r\n    overlayDir: CdkConnectedOverlay;\r\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\r\n    panelClass: string | string[] | Set<string> | {\r\n        [key: string]: any;\r\n    };\r\n    /** Placeholder to be shown if no value has been selected. */\r\n    get placeholder(): string;\r\n    set placeholder(value: string);\r\n    private _placeholder;\r\n    /** Whether the component is required. */\r\n    get required(): boolean;\r\n    set required(value: boolean);\r\n    private _required;\r\n    /** Whether the user should be allowed to select multiple options. */\r\n    get multiple(): boolean;\r\n    set multiple(value: boolean);\r\n    private _multiple;\r\n    /** Whether to center the active option over the trigger. */\r\n    get disableOptionCentering(): boolean;\r\n    set disableOptionCentering(value: boolean);\r\n    private _disableOptionCentering;\r\n    /**\r\n     * Function to compare the option values with the selected values. The first argument\r\n     * is a value from an option. The second is a value from the selection. A boolean\r\n     * should be returned.\r\n     */\r\n    get compareWith(): (o1: any, o2: any) => boolean;\r\n    set compareWith(fn: (o1: any, o2: any) => boolean);\r\n    /** Value of the select control. */\r\n    get value(): any;\r\n    set value(newValue: any);\r\n    private _value;\r\n    /** Aria label of the select. */\r\n    ariaLabel: string;\r\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\r\n    ariaLabelledby: string;\r\n    /** Object used to control when error messages are shown. */\r\n    errorStateMatcher: ErrorStateMatcher;\r\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\r\n    get typeaheadDebounceInterval(): number;\r\n    set typeaheadDebounceInterval(value: number);\r\n    private _typeaheadDebounceInterval;\r\n    /**\r\n     * Function used to sort the values in a select in multiple mode.\r\n     * Follows the same logic as `Array.prototype.sort`.\r\n     */\r\n    sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\r\n    /** Unique id of the element. */\r\n    get id(): string;\r\n    set id(value: string);\r\n    private _id;\r\n    /** Combined stream of all of the child options' change events. */\r\n    readonly optionSelectionChanges: Observable<MatOptionSelectionChange>;\r\n    /** Event emitted when the select panel has been toggled. */\r\n    readonly openedChange: EventEmitter<boolean>;\r\n    /** Event emitted when the select has been opened. */\r\n    readonly _openedStream: Observable<void>;\r\n    /** Event emitted when the select has been closed. */\r\n    readonly _closedStream: Observable<void>;\r\n    /** Event emitted when the selected value has been changed by the user. */\r\n    readonly selectionChange: EventEmitter<C>;\r\n    /**\r\n     * Event that emits whenever the raw value of the select changes. This is here primarily\r\n     * to facilitate the two-way binding for the `value` input.\r\n     * @docs-private\r\n     */\r\n    readonly valueChange: EventEmitter<any>;\r\n    constructor(_viewportRuler: ViewportRuler, _changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, _defaultErrorStateMatcher: ErrorStateMatcher, elementRef: ElementRef, _dir: Directionality, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _parentFormField: MatFormField, ngControl: NgControl, tabIndex: string, scrollStrategyFactory: any, _liveAnnouncer: LiveAnnouncer, _defaultOptions?: MatSelectConfig | undefined);\r\n    ngOnInit(): void;\r\n    ngAfterContentInit(): void;\r\n    ngDoCheck(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /** Toggles the overlay panel open or closed. */\r\n    toggle(): void;\r\n    /** Opens the overlay panel. */\r\n    open(): void;\r\n    /** Closes the overlay panel and focuses the host element. */\r\n    close(): void;\r\n    /**\r\n     * Sets the select's value. Part of the ControlValueAccessor interface\r\n     * required to integrate with Angular's core forms API.\r\n     *\r\n     * @param value New value to be written to the model.\r\n     */\r\n    writeValue(value: any): void;\r\n    /**\r\n     * Saves a callback function to be invoked when the select's value\r\n     * changes from user input. Part of the ControlValueAccessor interface\r\n     * required to integrate with Angular's core forms API.\r\n     *\r\n     * @param fn Callback to be triggered when the value changes.\r\n     */\r\n    registerOnChange(fn: (value: any) => void): void;\r\n    /**\r\n     * Saves a callback function to be invoked when the select is blurred\r\n     * by the user. Part of the ControlValueAccessor interface required\r\n     * to integrate with Angular's core forms API.\r\n     *\r\n     * @param fn Callback to be triggered when the component has been touched.\r\n     */\r\n    registerOnTouched(fn: () => {}): void;\r\n    /**\r\n     * Disables the select. Part of the ControlValueAccessor interface required\r\n     * to integrate with Angular's core forms API.\r\n     *\r\n     * @param isDisabled Sets whether the component is disabled.\r\n     */\r\n    setDisabledState(isDisabled: boolean): void;\r\n    /** Whether or not the overlay panel is open. */\r\n    get panelOpen(): boolean;\r\n    /** The currently selected option. */\r\n    get selected(): MatOption | MatOption[];\r\n    /** The value displayed in the trigger. */\r\n    get triggerValue(): string;\r\n    /** Whether the element is in RTL mode. */\r\n    _isRtl(): boolean;\r\n    /** Handles all keydown events on the select. */\r\n    _handleKeydown(event: KeyboardEvent): void;\r\n    /** Handles keyboard events while the select is closed. */\r\n    private _handleClosedKeydown;\r\n    /** Handles keyboard events when the selected is open. */\r\n    private _handleOpenKeydown;\r\n    _onFocus(): void;\r\n    /**\r\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\r\n     * \"blur\" to the panel when it opens, causing a false positive.\r\n     */\r\n    _onBlur(): void;\r\n    /**\r\n     * Callback that is invoked when the overlay panel has been attached.\r\n     */\r\n    _onAttached(): void;\r\n    /** Returns the theme to be used on the panel. */\r\n    _getPanelTheme(): string;\r\n    /** Whether the select has a value. */\r\n    get empty(): boolean;\r\n    private _initializeSelection;\r\n    /**\r\n     * Sets the selected option based on a value. If no option can be\r\n     * found with the designated value, the select trigger is cleared.\r\n     */\r\n    private _setSelectionByValue;\r\n    /**\r\n     * Finds and selects and option based on its value.\r\n     * @returns Option that has the corresponding value.\r\n     */\r\n    private _selectValue;\r\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\r\n    private _initKeyManager;\r\n    /** Drops current option subscriptions and IDs and resets from scratch. */\r\n    private _resetOptions;\r\n    /** Invoked when an option is clicked. */\r\n    private _onSelect;\r\n    /** Sorts the selected values in the selected based on their order in the panel. */\r\n    private _sortValues;\r\n    /** Emits change event to set the model value. */\r\n    private _propagateChanges;\r\n    /**\r\n     * Highlights the selected item. If no option is selected, it will highlight\r\n     * the first item instead.\r\n     */\r\n    private _highlightCorrectOption;\r\n    /** Whether the panel is allowed to open. */\r\n    protected _canOpen(): boolean;\r\n    /** Focuses the select element. */\r\n    focus(options?: FocusOptions): void;\r\n    /** Gets the aria-labelledby for the select panel. */\r\n    _getPanelAriaLabelledby(): string | null;\r\n    /** Determines the `aria-activedescendant` to be set on the host. */\r\n    _getAriaActiveDescendant(): string | null;\r\n    /** Gets the aria-labelledby of the select component trigger. */\r\n    private _getTriggerAriaLabelledby;\r\n    /** Called when the overlay panel is done animating. */\r\n    protected _panelDoneAnimating(isOpen: boolean): void;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    setDescribedByIds(ids: string[]): void;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    onContainerClick(): void;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    get shouldLabelFloat(): boolean;\r\n    static ngAcceptInputType_required: BooleanInput;\r\n    static ngAcceptInputType_multiple: BooleanInput;\r\n    static ngAcceptInputType_disableOptionCentering: BooleanInput;\r\n    static ngAcceptInputType_typeaheadDebounceInterval: NumberInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n    static ngAcceptInputType_tabIndex: NumberInput;\r\n}\r\nexport declare class MatSelect extends _MatSelectBase<MatSelectChange> implements OnInit {\r\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\r\n    private _scrollTop;\r\n    /** The last measured value for the trigger's client bounding rect. */\r\n    _triggerRect: ClientRect;\r\n    /** The cached font-size of the trigger element. */\r\n    _triggerFontSize: number;\r\n    /** The value of the select panel's transform-origin property. */\r\n    _transformOrigin: string;\r\n    /**\r\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\r\n     * This must be adjusted to align the selected option text over the trigger text.\r\n     * when the panel opens. Will change based on the y-position of the selected option.\r\n     */\r\n    _offsetY: number;\r\n    options: QueryList<MatOption>;\r\n    optionGroups: QueryList<MatOptgroup>;\r\n    customTrigger: MatSelectTrigger;\r\n    _positions: ConnectedPosition[];\r\n    /**\r\n     * Calculates the scroll position of the select's overlay panel.\r\n     *\r\n     * Attempts to center the selected option in the panel. If the option is\r\n     * too high or too low in the panel to be scrolled to the center, it clamps the\r\n     * scroll position to the min or max scroll positions respectively.\r\n     */\r\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number;\r\n    ngOnInit(): void;\r\n    open(): void;\r\n    /** Scrolls the active option into view. */\r\n    protected _scrollOptionIntoView(index: number): void;\r\n    protected _positioningSettled(): void;\r\n    protected _panelDoneAnimating(isOpen: boolean): void;\r\n    protected _getChangeEvent(value: any): MatSelectChange;\r\n    /**\r\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\r\n     * This must be adjusted to align the selected option text over the trigger text when\r\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\r\n     * can't be calculated until the panel has been attached, because we need to know the\r\n     * content width in order to constrain the panel within the viewport.\r\n     */\r\n    private _calculateOverlayOffsetX;\r\n    /**\r\n     * Calculates the y-offset of the select's overlay panel in relation to the\r\n     * top start corner of the trigger. It has to be adjusted in order for the\r\n     * selected option to be aligned over the trigger when the panel opens.\r\n     */\r\n    private _calculateOverlayOffsetY;\r\n    /**\r\n     * Checks that the attempted overlay position will fit within the viewport.\r\n     * If it will not fit, tries to adjust the scroll position and the associated\r\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\r\n     * sets the offset back to 0 to allow the fallback position to take over.\r\n     */\r\n    private _checkOverlayWithinViewport;\r\n    /** Adjusts the overlay panel up to fit in the viewport. */\r\n    private _adjustPanelUp;\r\n    /** Adjusts the overlay panel down to fit in the viewport. */\r\n    private _adjustPanelDown;\r\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\r\n    private _calculateOverlayPosition;\r\n    /** Sets the transform origin point based on the selected option. */\r\n    private _getOriginBasedOnOption;\r\n    /** Calculates the height of the select's options. */\r\n    private _getItemHeight;\r\n    /** Calculates the amount of items in the select. This includes options and group labels. */\r\n    private _getItemCount;\r\n}\r\nexport {};\r\n"]}