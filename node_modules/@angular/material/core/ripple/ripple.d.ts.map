{"version":3,"file":"ripple.d.ts","sources":["ripple.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { ElementRef, InjectionToken, NgZone, OnDestroy, OnInit } from '@angular/core';\r\nimport { RippleAnimationConfig, RippleConfig, RippleRef } from './ripple-ref';\r\nimport { RippleTarget } from './ripple-renderer';\r\n/** Configurable options for `matRipple`. */\r\nexport interface RippleGlobalOptions {\r\n    /**\r\n     * Whether ripples should be disabled. Ripples can be still launched manually by using\r\n     * the `launch()` method. Therefore focus indicators will still show up.\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Configuration for the animation duration of the ripples. There are two phases with different\r\n     * durations for the ripples. The animation durations will be overwritten if the\r\n     * `NoopAnimationsModule` is being used.\r\n     */\r\n    animation?: RippleAnimationConfig;\r\n    /**\r\n     * Whether ripples should start fading out immediately after the mouse or touch is released. By\r\n     * default, ripples will wait for the enter animation to complete and for mouse or touch release.\r\n     */\r\n    terminateOnPointerUp?: boolean;\r\n}\r\n/** Injection token that can be used to specify the global ripple options. */\r\nexport declare const MAT_RIPPLE_GLOBAL_OPTIONS: InjectionToken<RippleGlobalOptions>;\r\nexport declare class MatRipple implements OnInit, OnDestroy, RippleTarget {\r\n    private _elementRef;\r\n    private _animationMode?;\r\n    /** Custom color for all ripples. */\r\n    color: string;\r\n    /** Whether the ripples should be visible outside the component's bounds. */\r\n    unbounded: boolean;\r\n    /**\r\n     * Whether the ripple always originates from the center of the host element's bounds, rather\r\n     * than originating from the location of the click event.\r\n     */\r\n    centered: boolean;\r\n    /**\r\n     * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\r\n     * will be the distance from the center of the ripple to the furthest corner of the host element's\r\n     * bounding rectangle.\r\n     */\r\n    radius: number;\r\n    /**\r\n     * Configuration for the ripple animation. Allows modifying the enter and exit animation\r\n     * duration of the ripples. The animation durations will be overwritten if the\r\n     * `NoopAnimationsModule` is being used.\r\n     */\r\n    animation: RippleAnimationConfig;\r\n    /**\r\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\r\n     * by using the `launch()` method.\r\n     */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    private _disabled;\r\n    /**\r\n     * The element that triggers the ripple when click events are received.\r\n     * Defaults to the directive's host element.\r\n     */\r\n    get trigger(): HTMLElement;\r\n    set trigger(trigger: HTMLElement);\r\n    private _trigger;\r\n    /** Renderer for the ripple DOM manipulations. */\r\n    private _rippleRenderer;\r\n    /** Options that are set globally for all ripples. */\r\n    private _globalOptions;\r\n    /** Whether ripple directive is initialized and the input bindings are set. */\r\n    private _isInitialized;\r\n    constructor(_elementRef: ElementRef<HTMLElement>, ngZone: NgZone, platform: Platform, globalOptions?: RippleGlobalOptions, _animationMode?: string | undefined);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Fades out all currently showing ripple elements. */\r\n    fadeOutAll(): void;\r\n    /** Fades out all currently showing non-persistent ripple elements. */\r\n    fadeOutAllNonPersistent(): void;\r\n    /**\r\n     * Ripple configuration from the directive's input values.\r\n     * @docs-private Implemented as part of RippleTarget\r\n     */\r\n    get rippleConfig(): RippleConfig;\r\n    /**\r\n     * Whether ripples on pointer-down are disabled or not.\r\n     * @docs-private Implemented as part of RippleTarget\r\n     */\r\n    get rippleDisabled(): boolean;\r\n    /** Sets up the trigger event listeners if ripples are enabled. */\r\n    private _setupTriggerEventsIfEnabled;\r\n    /**\r\n     * Launches a manual ripple using the specified ripple configuration.\r\n     * @param config Configuration for the manual ripple.\r\n     */\r\n    launch(config: RippleConfig): RippleRef;\r\n    /**\r\n     * Launches a manual ripple at the specified coordinates within the element.\r\n     * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\r\n     * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\r\n     * @param config Optional ripple configuration for the manual ripple.\r\n     */\r\n    launch(x: number, y: number, config?: RippleConfig): RippleRef;\r\n}\r\n"]}