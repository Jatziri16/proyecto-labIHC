{"version":3,"file":"option.d.ts","sources":["option.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';\r\nimport { FocusOptions, FocusableOption, FocusOrigin } from '@angular/cdk/a11y';\r\nimport { Subject } from 'rxjs';\r\nimport { MatOptgroup, _MatOptgroupBase } from './optgroup';\r\nimport { MatOptionParentComponent } from './option-parent';\r\n/** Event object emitted by MatOption when selected or deselected. */\r\nexport declare class MatOptionSelectionChange {\r\n    /** Reference to the option that emitted the event. */\r\n    source: _MatOptionBase;\r\n    /** Whether the change in the option's value was a result of a user action. */\r\n    isUserInput: boolean;\r\n    constructor(\r\n    /** Reference to the option that emitted the event. */\r\n    source: _MatOptionBase, \r\n    /** Whether the change in the option's value was a result of a user action. */\r\n    isUserInput?: boolean);\r\n}\r\nexport declare class _MatOptionBase implements FocusableOption, AfterViewChecked, OnDestroy {\r\n    private _element;\r\n    private _changeDetectorRef;\r\n    private _parent;\r\n    readonly group: _MatOptgroupBase;\r\n    private _selected;\r\n    private _active;\r\n    private _disabled;\r\n    private _mostRecentViewValue;\r\n    /** Whether the wrapping component is in multiple selection mode. */\r\n    get multiple(): boolean | undefined;\r\n    /** Whether or not the option is currently selected. */\r\n    get selected(): boolean;\r\n    /** The form value of the option. */\r\n    value: any;\r\n    /** The unique ID of the option. */\r\n    id: string;\r\n    /** Whether the option is disabled. */\r\n    get disabled(): any;\r\n    set disabled(value: any);\r\n    /** Whether ripples for the option are disabled. */\r\n    get disableRipple(): boolean | undefined;\r\n    /** Event emitted when the option is selected or deselected. */\r\n    readonly onSelectionChange: EventEmitter<MatOptionSelectionChange>;\r\n    /** Emits when the state of the option changes and any parents have to be notified. */\r\n    readonly _stateChanges: Subject<void>;\r\n    constructor(_element: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _parent: MatOptionParentComponent, group: _MatOptgroupBase);\r\n    /**\r\n     * Whether or not the option is currently active and ready to be selected.\r\n     * An active option displays styles as if it is focused, but the\r\n     * focus is actually retained somewhere else. This comes in handy\r\n     * for components like autocomplete where focus must remain on the input.\r\n     */\r\n    get active(): boolean;\r\n    /**\r\n     * The displayed value of the option. It is necessary to show the selected option in the\r\n     * select's trigger.\r\n     */\r\n    get viewValue(): string;\r\n    /** Selects the option. */\r\n    select(): void;\r\n    /** Deselects the option. */\r\n    deselect(): void;\r\n    /** Sets focus onto this option. */\r\n    focus(_origin?: FocusOrigin, options?: FocusOptions): void;\r\n    /**\r\n     * This method sets display styles on the option to make it appear\r\n     * active. This is used by the ActiveDescendantKeyManager so key\r\n     * events will display the proper options as active on arrow key events.\r\n     */\r\n    setActiveStyles(): void;\r\n    /**\r\n     * This method removes display styles on the option that made it appear\r\n     * active. This is used by the ActiveDescendantKeyManager so key\r\n     * events will display the proper options as active on arrow key events.\r\n     */\r\n    setInactiveStyles(): void;\r\n    /** Gets the label to be used when determining whether the option should be focused. */\r\n    getLabel(): string;\r\n    /** Ensures the option is selected when activated from the keyboard. */\r\n    _handleKeydown(event: KeyboardEvent): void;\r\n    /**\r\n     * `Selects the option while indicating the selection came from the user. Used to\r\n     * determine if the select's view -> model callback should be invoked.`\r\n     */\r\n    _selectViaInteraction(): void;\r\n    /**\r\n     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\r\n     * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\r\n     * attributes adds a significant amount of noise to screen-reader users without providing useful\r\n     * information.\r\n     */\r\n    _getAriaSelected(): boolean | null;\r\n    /** Returns the correct tabindex for the option depending on disabled state. */\r\n    _getTabIndex(): string;\r\n    /** Gets the host DOM element. */\r\n    _getHostElement(): HTMLElement;\r\n    ngAfterViewChecked(): void;\r\n    ngOnDestroy(): void;\r\n    /** Emits the selection change event. */\r\n    private _emitSelectionChangeEvent;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n/**\r\n * Single option inside of a `<mat-select>` element.\r\n */\r\nexport declare class MatOption extends _MatOptionBase {\r\n    constructor(element: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef, parent: MatOptionParentComponent, group: MatOptgroup);\r\n}\r\n/**\r\n * Counts the amount of option group labels that precede the specified option.\r\n * @param optionIndex Index of the option at which to start counting.\r\n * @param options Flat list of all of the options.\r\n * @param optionGroups Flat list of all of the option groups.\r\n * @docs-private\r\n */\r\nexport declare function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>, optionGroups: QueryList<MatOptgroup>): number;\r\n/**\r\n * Determines the position to which to scroll a panel in order for an option to be into view.\r\n * @param optionOffset Offset of the option from the top of the panel.\r\n * @param optionHeight Height of the options.\r\n * @param currentScrollPosition Current scroll position of the panel.\r\n * @param panelHeight Height of the panel.\r\n * @docs-private\r\n */\r\nexport declare function _getOptionScrollPosition(optionOffset: number, optionHeight: number, currentScrollPosition: number, panelHeight: number): number;\r\n"]}