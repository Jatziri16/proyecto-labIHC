{"version":3,"file":"native-date-adapter.d.ts","sources":["native-date-adapter.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { DateAdapter } from './date-adapter';\r\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\r\nexport declare class NativeDateAdapter extends DateAdapter<Date> {\r\n    /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\r\n    private readonly _clampDate;\r\n    /**\r\n     * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n     * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n     * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n     * will produce `'8/13/1800'`.\r\n     *\r\n     * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n     * getting the string representation of a Date object from its utc representation. We're keeping\r\n     * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n     * though.\r\n     */\r\n    useUtcForDisplay: boolean;\r\n    constructor(matDateLocale: string, platform: Platform);\r\n    getYear(date: Date): number;\r\n    getMonth(date: Date): number;\r\n    getDate(date: Date): number;\r\n    getDayOfWeek(date: Date): number;\r\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\r\n    getDateNames(): string[];\r\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\r\n    getYearName(date: Date): string;\r\n    getFirstDayOfWeek(): number;\r\n    getNumDaysInMonth(date: Date): number;\r\n    clone(date: Date): Date;\r\n    createDate(year: number, month: number, date: number): Date;\r\n    today(): Date;\r\n    parse(value: any): Date | null;\r\n    format(date: Date, displayFormat: Object): string;\r\n    addCalendarYears(date: Date, years: number): Date;\r\n    addCalendarMonths(date: Date, months: number): Date;\r\n    addCalendarDays(date: Date, days: number): Date;\r\n    toIso8601(date: Date): string;\r\n    /**\r\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n     * invalid date for all other values.\r\n     */\r\n    deserialize(value: any): Date | null;\r\n    isDateInstance(obj: any): boolean;\r\n    isValid(date: Date): boolean;\r\n    invalid(): Date;\r\n    /** Creates a date but allows the month and date to overflow. */\r\n    private _createDateWithOverflow;\r\n    /**\r\n     * Pads a number to make it two digits.\r\n     * @param n The number to pad.\r\n     * @returns The padded number.\r\n     */\r\n    private _2digit;\r\n    /**\r\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n     * other browsers do not. We remove them to make output consistent and because they interfere with\r\n     * date parsing.\r\n     * @param str The string to strip direction characters from.\r\n     * @returns The stripped string.\r\n     */\r\n    private _stripDirectionalityCharacters;\r\n    /**\r\n     * When converting Date object to string, javascript built-in functions may return wrong\r\n     * results because it applies its internal DST rules. The DST rules around the world change\r\n     * very frequently, and the current valid rule is not always valid in previous years though.\r\n     * We work around this problem building a new Date object which has its internal UTC\r\n     * representation with the local date and time.\r\n     * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n     *    timeZone set to 'utc' to work fine.\r\n     * @param date Date from which we want to get the string representation according to dtf\r\n     * @returns A Date object with its UTC representation based on the passed in date info\r\n     */\r\n    private _format;\r\n}\r\n"]}