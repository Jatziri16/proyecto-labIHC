{"version":3,"file":"common-module.d.ts","sources":["common-module.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { HighContrastModeDetector } from '@angular/cdk/a11y';\r\nimport { InjectionToken } from '@angular/core';\r\n/** @docs-private */\r\nexport declare function MATERIAL_SANITY_CHECKS_FACTORY(): SanityChecks;\r\n/** Injection token that configures whether the Material sanity checks are enabled. */\r\nexport declare const MATERIAL_SANITY_CHECKS: InjectionToken<SanityChecks>;\r\n/**\r\n * Possible sanity checks that can be enabled. If set to\r\n * true/false, all checks will be enabled/disabled.\r\n */\r\nexport declare type SanityChecks = boolean | GranularSanityChecks;\r\n/** Object that can be used to configure the sanity checks granularly. */\r\nexport interface GranularSanityChecks {\r\n    doctype: boolean;\r\n    theme: boolean;\r\n    version: boolean;\r\n}\r\n/**\r\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\r\n * components. This includes Bidi, etc.\r\n *\r\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\r\n */\r\nexport declare class MatCommonModule {\r\n    /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\r\n    private _hasDoneGlobalChecks;\r\n    /** Configured sanity checks. */\r\n    private _sanityChecks;\r\n    /** Used to reference correct document/window */\r\n    protected _document: Document;\r\n    constructor(highContrastModeDetector: HighContrastModeDetector, sanityChecks: any, document: any);\r\n    /** Use defaultView of injected document if available or fallback to global window reference */\r\n    private _getWindow;\r\n    /** Whether any sanity checks are enabled. */\r\n    private _checksAreEnabled;\r\n    /** Whether the code is running in tests. */\r\n    private _isTestEnv;\r\n    private _checkDoctypeIsDefined;\r\n    private _checkThemeIsPresent;\r\n    /** Checks whether the material version matches the cdk version */\r\n    private _checkCdkVersionMatch;\r\n}\r\n"]}