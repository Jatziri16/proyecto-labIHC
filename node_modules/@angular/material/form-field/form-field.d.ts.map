{"version":3,"file":"form-field.d.ts","sources":["form-field.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { AfterContentChecked, AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, InjectionToken, NgZone, QueryList, OnDestroy } from '@angular/core';\r\nimport { CanColor, CanColorCtor } from '@angular/material/core';\r\nimport { MatError } from './error';\r\nimport { MatFormFieldControl } from './form-field-control';\r\nimport { MatHint } from './hint';\r\nimport { MatLabel } from './label';\r\nimport { MatPlaceholder } from './placeholder';\r\nimport { MatPrefix } from './prefix';\r\nimport { MatSuffix } from './suffix';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { NgControl } from '@angular/forms';\r\n/**\r\n * Boilerplate for applying mixins to MatFormField.\r\n * @docs-private\r\n */\r\ndeclare class MatFormFieldBase {\r\n    _elementRef: ElementRef;\r\n    constructor(_elementRef: ElementRef);\r\n}\r\n/**\r\n * Base class to which we're applying the form field mixins.\r\n * @docs-private\r\n */\r\ndeclare const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase;\r\n/** Possible appearance styles for the form field. */\r\nexport declare type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\r\n/** Possible values for the \"floatLabel\" form-field input. */\r\nexport declare type FloatLabelType = 'always' | 'never' | 'auto';\r\n/**\r\n * Represents the default options for the form field that can be configured\r\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\r\n */\r\nexport interface MatFormFieldDefaultOptions {\r\n    appearance?: MatFormFieldAppearance;\r\n    hideRequiredMarker?: boolean;\r\n    /**\r\n     * Whether the label for form-fields should by default float `always`,\r\n     * `never`, or `auto` (only when necessary).\r\n     */\r\n    floatLabel?: FloatLabelType;\r\n}\r\n/**\r\n * Injection token that can be used to configure the\r\n * default options for all form field within an app.\r\n */\r\nexport declare const MAT_FORM_FIELD_DEFAULT_OPTIONS: InjectionToken<MatFormFieldDefaultOptions>;\r\n/**\r\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\r\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\r\n * retention of the `MatFormField` class and its component metadata.\r\n */\r\nexport declare const MAT_FORM_FIELD: InjectionToken<MatFormField>;\r\n/** Container for form controls that applies Material Design styling and behavior. */\r\nexport declare class MatFormField extends _MatFormFieldMixinBase implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\r\n    _elementRef: ElementRef;\r\n    private _changeDetectorRef;\r\n    private _dir;\r\n    private _defaults;\r\n    private _platform;\r\n    private _ngZone;\r\n    /**\r\n     * Whether the outline gap needs to be calculated\r\n     * immediately on the next change detection run.\r\n     */\r\n    private _outlineGapCalculationNeededImmediately;\r\n    /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\r\n    private _outlineGapCalculationNeededOnStable;\r\n    private _destroyed;\r\n    /** The form-field appearance style. */\r\n    get appearance(): MatFormFieldAppearance;\r\n    set appearance(value: MatFormFieldAppearance);\r\n    _appearance: MatFormFieldAppearance;\r\n    /** Whether the required marker should be hidden. */\r\n    get hideRequiredMarker(): boolean;\r\n    set hideRequiredMarker(value: boolean);\r\n    private _hideRequiredMarker;\r\n    /** Override for the logic that disables the label animation in certain cases. */\r\n    private _showAlwaysAnimate;\r\n    /** Whether the floating label should always float or not. */\r\n    _shouldAlwaysFloat(): boolean;\r\n    /** Whether the label can float or not. */\r\n    _canLabelFloat(): boolean;\r\n    /** State of the mat-hint and mat-error animations. */\r\n    _subscriptAnimationState: string;\r\n    /** Text for the form field hint. */\r\n    get hintLabel(): string;\r\n    set hintLabel(value: string);\r\n    private _hintLabel;\r\n    readonly _hintLabelId: string;\r\n    readonly _labelId: string;\r\n    /**\r\n     * Whether the label should always float, never float or float as the user types.\r\n     *\r\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\r\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\r\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\r\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\r\n     */\r\n    get floatLabel(): FloatLabelType;\r\n    set floatLabel(value: FloatLabelType);\r\n    private _floatLabel;\r\n    /** Whether the Angular animations are enabled. */\r\n    _animationsEnabled: boolean;\r\n    /**\r\n     * @deprecated\r\n     * @breaking-change 8.0.0\r\n     */\r\n    underlineRef: ElementRef;\r\n    _connectionContainerRef: ElementRef;\r\n    _inputContainerRef: ElementRef;\r\n    private _label;\r\n    _controlNonStatic: MatFormFieldControl<any>;\r\n    _controlStatic: MatFormFieldControl<any>;\r\n    get _control(): MatFormFieldControl<any>;\r\n    set _control(value: MatFormFieldControl<any>);\r\n    private _explicitFormFieldControl;\r\n    _labelChildNonStatic: MatLabel;\r\n    _labelChildStatic: MatLabel;\r\n    _placeholderChild: MatPlaceholder;\r\n    _errorChildren: QueryList<MatError>;\r\n    _hintChildren: QueryList<MatHint>;\r\n    _prefixChildren: QueryList<MatPrefix>;\r\n    _suffixChildren: QueryList<MatSuffix>;\r\n    constructor(_elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, \r\n    /**\r\n     * @deprecated `_labelOptions` parameter no longer being used. To be removed.\r\n     * @breaking-change 12.0.0\r\n     */\r\n    _labelOptions: any, _dir: Directionality, _defaults: MatFormFieldDefaultOptions, _platform: Platform, _ngZone: NgZone, _animationMode: string);\r\n    /**\r\n     * Gets the id of the label element. If no label is present, returns `null`.\r\n     */\r\n    getLabelId(): string | null;\r\n    /**\r\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\r\n     * positioned relative to.\r\n     */\r\n    getConnectedOverlayOrigin(): ElementRef;\r\n    ngAfterContentInit(): void;\r\n    ngAfterContentChecked(): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\r\n    _shouldForward(prop: keyof NgControl): boolean;\r\n    _hasPlaceholder(): boolean;\r\n    _hasLabel(): boolean;\r\n    _shouldLabelFloat(): boolean;\r\n    _hideControlPlaceholder(): boolean;\r\n    _hasFloatingLabel(): boolean;\r\n    /** Determines whether to display hints or errors. */\r\n    _getDisplayedMessages(): 'error' | 'hint';\r\n    /** Animates the placeholder up and locks it in position. */\r\n    _animateAndLockLabel(): void;\r\n    /**\r\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\r\n     * or child element with the `mat-placeholder` directive).\r\n     */\r\n    private _validatePlaceholders;\r\n    /** Does any extra processing that is required when handling the hints. */\r\n    private _processHints;\r\n    /**\r\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\r\n     * attribute being considered as `align=\"start\"`.\r\n     */\r\n    private _validateHints;\r\n    /** Gets the default float label state. */\r\n    private _getDefaultFloatLabelState;\r\n    /**\r\n     * Sets the list of element IDs that describe the child control. This allows the control to update\r\n     * its `aria-describedby` attribute accordingly.\r\n     */\r\n    private _syncDescribedByIds;\r\n    /** Throws an error if the form field's control is missing. */\r\n    protected _validateControlChild(): void;\r\n    /**\r\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\r\n     * appearance.\r\n     */\r\n    updateOutlineGap(): void;\r\n    /** Gets the start end of the rect considering the current directionality. */\r\n    private _getStartEnd;\r\n    /** Checks whether the form field is attached to the DOM. */\r\n    private _isAttachedToDOM;\r\n    static ngAcceptInputType_hideRequiredMarker: BooleanInput;\r\n}\r\nexport {};\r\n"]}