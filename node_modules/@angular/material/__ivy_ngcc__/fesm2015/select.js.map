{"version":3,"file":"select.js","sources":["../../../../../../src/material/select/select-animations.ts","../../../../../../src/material/select/select-errors.ts","../../../../../../src/material/select/select.ts","../../../../../../src/material/select/select-module.ts","../../../../../../src/material/select/public-api.ts","../../../../../../src/material/select/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  ENTER,\n  hasModifierKey,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  ConnectedPosition,\n  Overlay,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTGROUP,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n  _MatOptionBase,\n} from '@angular/material/core';\nimport {MAT_FORM_FIELD, MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/**\n * The max height of the select's overlay panel.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/**\n * The panel's padding on the x-axis.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/**\n * The height of the select items in `em` units.\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n *\n * @deprecated To be turned into a private variable.\n * @breaking-change 12.0.0\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** Object that can be used to configure the default options for the select module. */\nexport interface MatSelectConfig {\n  /** Whether option centering should be disabled. */\n  disableOptionCentering?: boolean;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  typeaheadDebounceInterval?: number;\n\n  /** Class or list of classes to be applied to the menu's overlay panel. */\n  overlayPanelClass?: string | string[];\n}\n\n/** Injection token that can be used to provide the default options the select module. */\nexport const MAT_SELECT_CONFIG = new InjectionToken<MatSelectConfig>('MAT_SELECT_CONFIG');\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_SELECT_TRIGGER = new InjectionToken<MatSelectTrigger>('MatSelectTrigger');\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger',\n  providers: [{provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger}],\n})\nexport class MatSelectTrigger {}\n\n/** Base class with all of the `MatSelect` functionality. */\n@Directive()\nexport abstract class _MatSelectBase<C> extends _MatSelectMixinBase implements AfterContentInit,\n    OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n\n  /** All of the defined select options. */\n  abstract options: QueryList<_MatOptionBase>;\n\n  // TODO(crisbeto): this is only necessary for the non-MDC select, but it's technically a\n  // public API so we have to keep it. It should be deprecated and removed eventually.\n  /** All of the defined groups of options. */\n  abstract optionGroups: QueryList<MatOptgroup>;\n\n  /** User-supplied override of the trigger element. */\n  abstract customTrigger: {};\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  abstract _positions: ConnectedPosition[];\n\n  /** Scrolls a particular option into the view. */\n  protected abstract _scrollOptionIntoView(index: number): void;\n\n  /** Called when the panel has been opened and the overlay has settled on its final position. */\n  protected abstract _positioningSettled(): void;\n\n  /** Creates a change event object that should be emitted by the select. */\n  protected abstract _getChangeEvent(value: any): C;\n\n  /** Factory function used to create a scroll strategy for this select. */\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Current `ariar-labelledby` value for the select trigger. */\n  private _triggerAriaLabelledBy: string | null = null;\n\n  /** Emits whenever the component is destroyed. */\n  protected readonly _destroy = new Subject<void>();\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** ID for the DOM node containing the select's value. */\n  _valueId = `mat-select-value-${nextUniqueId++}`;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  _overlayPanelClass: string | string[] = this._defaultOptions?.overlayPanelClass || '';\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /**\n   * Overlay pane containing the options.\n   * @deprecated To be turned into a private API.\n   * @breaking-change 10.0.0\n   * @docs-private\n   */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  private _placeholder: string;\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  private _required: boolean = false;\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n  private _disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    // Always re-assign an array, because it might have been mutated.\n    if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n      if (this.options) {\n        this._setSelectionByValue(newValue);\n      }\n\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input()\n  get typeaheadDebounceInterval(): number { return this._typeaheadDebounceInterval; }\n  set typeaheadDebounceInterval(value: number) {\n    this._typeaheadDebounceInterval = coerceNumberProperty(value);\n  }\n  private _typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<C> = new EventEmitter<C>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    protected _viewportRuler: ViewportRuler,\n    protected _changeDetectorRef: ChangeDetectorRef,\n    protected _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() @Inject(MAT_FORM_FIELD) protected _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    private _liveAnnouncer: LiveAnnouncer,\n    @Optional() @Inject(MAT_SELECT_CONFIG) private _defaultOptions?: MatSelectConfig) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    // Note that we only want to set this when the defaults pass it in, otherwise it should\n    // stay as `undefined` so that it falls back to the default in the key manager.\n    if (_defaultOptions?.typeaheadDebounceInterval != null) {\n      this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    const newAriaLabelledby = this._getTriggerAriaLabelledby();\n\n    // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n    // is computed as a result of a content query which can cause this binding to trigger a\n    // \"changed after checked\" error.\n    if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n      const element: HTMLElement = this._elementRef.nativeElement;\n      this._triggerAriaLabelledBy = newAriaLabelledby;\n      if (newAriaLabelledby) {\n        element.setAttribute('aria-labelledby', newAriaLabelledby);\n      } else {\n        element.removeAttribute('aria-labelledby');\n      }\n    }\n\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this._canOpen()) {\n      this._panelOpen = true;\n      this._keyManager.withHorizontalOrientation(null);\n      this._highlightCorrectOption();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n      ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n      manager.onKeydown(event);\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n\n    if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n      // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._positioningSettled();\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n    this._selectionModel.clear();\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.updateActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.updateActiveItem(-1);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      // Skip options that are already in the model. This allows us to handle cases\n      // where the same primitive value is selected multiple times.\n      if (this._selectionModel.isSelected(option)) {\n        return false;\n      }\n\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this._typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withHomeAndEnd()\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n\n        // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n        this.focus();\n        this.close();\n      }\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n\n      if (this.value != null) {\n        this._propagateChanges(option.value);\n      }\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected ? this._selectionModel.select(option) :\n                          this._selectionModel.deselect(option);\n      }\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Whether the panel is allowed to open. */\n  protected _canOpen(): boolean {\n    return !this._panelOpen && !this.disabled && this.options?.length > 0;\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the aria-labelledby for the select panel. */\n  _getPanelAriaLabelledby(): string | null {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = this._parentFormField?.getLabelId();\n    const labelExpression = (labelId ? labelId + ' ' : '');\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /** Gets the aria-labelledby of the select component trigger. */\n  private _getTriggerAriaLabelledby(): string | null {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelId = this._parentFormField?.getLabelId();\n    let value = (labelId ? labelId + ' ' : '') + this._valueId;\n\n    if (this.ariaLabelledby) {\n      value += ' ' + this.ariaLabelledby;\n    }\n\n    return value;\n  }\n\n  /** Called when the overlay panel is done animating. */\n  protected _panelDoneAnimating(isOpen: boolean) {\n    this.openedChange.emit(isOpen);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_disableOptionCentering: BooleanInput;\n  static ngAcceptInputType_typeaheadDebounceInterval: NumberInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n\n@Component({\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'combobox',\n    'aria-autocomplete': 'none',\n    // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n    // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n    // value. At some point we should try to switch it back to being `listbox`.\n    'aria-haspopup': 'true',\n    'class': 'mat-select',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n    '[attr.aria-expanded]': 'panelOpen',\n    '[attr.aria-label]': 'ariaLabel || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    '[class.mat-select-multiple]': 'multiple',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectBase<MatSelectChange> implements OnInit {\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  @ContentChildren(MAT_OPTGROUP, {descendants: true}) optionGroups: QueryList<MatOptgroup>;\n\n  @ContentChild(MAT_SELECT_TRIGGER) customTrigger: MatSelectTrigger;\n\n  _positions: ConnectedPosition[] = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n\n  open(): void {\n    if (super._canOpen()) {\n      super.open();\n      this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n      // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n      // `parseInt` ignores the trailing 'px' and converts this to a number.\n      this._triggerFontSize =\n          parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n      this._calculateOverlayPosition();\n\n      // Set the font size on the panel element once it exists.\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        if (this._triggerFontSize && this.overlayDir.overlayRef &&\n            this.overlayDir.overlayRef.overlayElement) {\n          this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n        }\n      });\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  protected _scrollOptionIntoView(index: number): void {\n    const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n    const itemHeight = this._getItemHeight();\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      (index + labelCount) * itemHeight,\n      itemHeight,\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  protected _positioningSettled() {\n    this._calculateOverlayOffsetX();\n    this.panel.nativeElement.scrollTop = this._scrollTop;\n  }\n\n  protected _panelDoneAnimating(isOpen: boolean) {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n    } else {\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    super._panelDoneAnimating(isOpen);\n  }\n\n  protected _getChangeEvent(value: any) {\n    return new MatSelectChange(this, value);\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else if (this.disableOptionCentering) {\n      offsetX = SELECT_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this.disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset: number;\n\n    if (this.empty) {\n      selectedOptionOffset = 0;\n    } else {\n      selectedOptionOffset =\n          Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n    }\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [\n    CdkScrollableModule,\n    MatFormFieldModule,\n    MatSelect,\n    MatSelectTrigger,\n    MatOptionModule,\n    MatCommonModule\n  ],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './select-module';\nexport * from './select';\nexport * from './select-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}