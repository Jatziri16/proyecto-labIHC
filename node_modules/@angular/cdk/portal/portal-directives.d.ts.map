{"version":3,"file":"portal-directives.d.ts","sources":["portal-directives.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ComponentFactoryResolver, ComponentRef, EmbeddedViewRef, EventEmitter, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { BasePortalOutlet, ComponentPortal, Portal, TemplatePortal, DomPortal } from './portal';\r\n/**\r\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\r\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\r\n */\r\nexport declare class CdkPortal extends TemplatePortal {\r\n    constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef);\r\n}\r\n/**\r\n * @deprecated Use `CdkPortal` instead.\r\n * @breaking-change 9.0.0\r\n */\r\nexport declare class TemplatePortalDirective extends CdkPortal {\r\n}\r\n/**\r\n * Possible attached references to the CdkPortalOutlet.\r\n */\r\nexport declare type CdkPortalOutletAttachedRef = ComponentRef<any> | EmbeddedViewRef<any> | null;\r\n/**\r\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\r\n * directly attached to it, enabling declarative use.\r\n *\r\n * Usage:\r\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\r\n */\r\nexport declare class CdkPortalOutlet extends BasePortalOutlet implements OnInit, OnDestroy {\r\n    private _componentFactoryResolver;\r\n    private _viewContainerRef;\r\n    private _document;\r\n    /** Whether the portal component is initialized. */\r\n    private _isInitialized;\r\n    /** Reference to the currently-attached component/view ref. */\r\n    private _attachedRef;\r\n    constructor(_componentFactoryResolver: ComponentFactoryResolver, _viewContainerRef: ViewContainerRef, \r\n    /**\r\n     * @deprecated `_document` parameter to be made required.\r\n     * @breaking-change 9.0.0\r\n     */\r\n    _document?: any);\r\n    /** Portal associated with the Portal outlet. */\r\n    get portal(): Portal<any> | null;\r\n    set portal(portal: Portal<any> | null);\r\n    /** Emits when a portal is attached to the outlet. */\r\n    attached: EventEmitter<CdkPortalOutletAttachedRef>;\r\n    /** Component or view reference that is attached to the portal. */\r\n    get attachedRef(): CdkPortalOutletAttachedRef;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\r\n     *\r\n     * @param portal Portal to be attached to the portal outlet.\r\n     * @returns Reference to the created component.\r\n     */\r\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n    /**\r\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\r\n     * @param portal Portal to be attached.\r\n     * @returns Reference to the created embedded view.\r\n     */\r\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\r\n    /**\r\n     * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\r\n     * @param portal Portal to be attached.\r\n     * @deprecated To be turned into a method.\r\n     * @breaking-change 10.0.0\r\n     */\r\n    attachDomPortal: (portal: DomPortal) => void;\r\n    /** Gets the root node of the portal outlet. */\r\n    private _getRootNode;\r\n    static ngAcceptInputType_portal: Portal<any> | null | undefined | '';\r\n}\r\n/**\r\n * @deprecated Use `CdkPortalOutlet` instead.\r\n * @breaking-change 9.0.0\r\n */\r\nexport declare class PortalHostDirective extends CdkPortalOutlet {\r\n}\r\nexport declare class PortalModule {\r\n}\r\n"]}