{"version":3,"file":"overlay.d.ts","sources":["overlay.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { Location } from '@angular/common';\r\nimport { ComponentFactoryResolver, Injector, NgZone } from '@angular/core';\r\nimport { OverlayKeyboardDispatcher } from './dispatchers/overlay-keyboard-dispatcher';\r\nimport { OverlayOutsideClickDispatcher } from './dispatchers/overlay-outside-click-dispatcher';\r\nimport { OverlayConfig } from './overlay-config';\r\nimport { OverlayContainer } from './overlay-container';\r\nimport { OverlayRef } from './overlay-ref';\r\nimport { OverlayPositionBuilder } from './position/overlay-position-builder';\r\nimport { ScrollStrategyOptions } from './scroll/index';\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\r\n */\r\nexport declare class Overlay {\r\n    /** Scrolling strategies that can be used when creating an overlay. */\r\n    scrollStrategies: ScrollStrategyOptions;\r\n    private _overlayContainer;\r\n    private _componentFactoryResolver;\r\n    private _positionBuilder;\r\n    private _keyboardDispatcher;\r\n    private _injector;\r\n    private _ngZone;\r\n    private _document;\r\n    private _directionality;\r\n    private _location;\r\n    private _outsideClickDispatcher;\r\n    private _appRef;\r\n    constructor(\r\n    /** Scrolling strategies that can be used when creating an overlay. */\r\n    scrollStrategies: ScrollStrategyOptions, _overlayContainer: OverlayContainer, _componentFactoryResolver: ComponentFactoryResolver, _positionBuilder: OverlayPositionBuilder, _keyboardDispatcher: OverlayKeyboardDispatcher, _injector: Injector, _ngZone: NgZone, _document: any, _directionality: Directionality, _location: Location, _outsideClickDispatcher: OverlayOutsideClickDispatcher);\r\n    /**\r\n     * Creates an overlay.\r\n     * @param config Configuration applied to the overlay.\r\n     * @returns Reference to the created overlay.\r\n     */\r\n    create(config?: OverlayConfig): OverlayRef;\r\n    /**\r\n     * Gets a position builder that can be used, via fluent API,\r\n     * to construct and configure a position strategy.\r\n     * @returns An overlay position builder.\r\n     */\r\n    position(): OverlayPositionBuilder;\r\n    /**\r\n     * Creates the DOM element for an overlay and appends it to the overlay container.\r\n     * @returns Newly-created pane element\r\n     */\r\n    private _createPaneElement;\r\n    /**\r\n     * Creates the host element that wraps around an overlay\r\n     * and can be used for advanced positioning.\r\n     * @returns Newly-create host element.\r\n     */\r\n    private _createHostElement;\r\n    /**\r\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\r\n     * @param pane The DOM element to turn into a portal outlet.\r\n     * @returns A portal outlet for the given DOM element.\r\n     */\r\n    private _createPortalOutlet;\r\n}\r\n"]}