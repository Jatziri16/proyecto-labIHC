{"version":3,"file":"overlay-directives.d.ts","sources":["overlay-directives.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Direction, Directionality } from '@angular/cdk/bidi';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { ElementRef, EventEmitter, InjectionToken, OnChanges, OnDestroy, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Overlay } from './overlay';\r\nimport { OverlayRef } from './overlay-ref';\r\nimport { ConnectedOverlayPositionChange } from './position/connected-position';\r\nimport { ConnectedPosition, FlexibleConnectedPositionStrategy } from './position/flexible-connected-position-strategy';\r\nimport { RepositionScrollStrategy, ScrollStrategy } from './scroll/index';\r\n/** Injection token that determines the scroll handling while the connected overlay is open. */\r\nexport declare const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\r\n/**\r\n * Directive applied to an element to make it usable as an origin for an Overlay using a\r\n * ConnectedPositionStrategy.\r\n */\r\nexport declare class CdkOverlayOrigin {\r\n    /** Reference to the element on which the directive is applied. */\r\n    elementRef: ElementRef;\r\n    constructor(\r\n    /** Reference to the element on which the directive is applied. */\r\n    elementRef: ElementRef);\r\n}\r\n/**\r\n * Directive to facilitate declarative creation of an\r\n * Overlay using a FlexibleConnectedPositionStrategy.\r\n */\r\nexport declare class CdkConnectedOverlay implements OnDestroy, OnChanges {\r\n    private _overlay;\r\n    private _dir;\r\n    private _overlayRef;\r\n    private _templatePortal;\r\n    private _hasBackdrop;\r\n    private _lockPosition;\r\n    private _growAfterOpen;\r\n    private _flexibleDimensions;\r\n    private _push;\r\n    private _backdropSubscription;\r\n    private _attachSubscription;\r\n    private _detachSubscription;\r\n    private _positionSubscription;\r\n    private _offsetX;\r\n    private _offsetY;\r\n    private _position;\r\n    private _scrollStrategyFactory;\r\n    /** Origin for the connected overlay. */\r\n    origin: CdkOverlayOrigin;\r\n    /** Registered connected position pairs. */\r\n    positions: ConnectedPosition[];\r\n    /**\r\n     * This input overrides the positions input if specified. It lets users pass\r\n     * in arbitrary positioning strategies.\r\n     */\r\n    positionStrategy: FlexibleConnectedPositionStrategy;\r\n    /** The offset in pixels for the overlay connection point on the x-axis */\r\n    get offsetX(): number;\r\n    set offsetX(offsetX: number);\r\n    /** The offset in pixels for the overlay connection point on the y-axis */\r\n    get offsetY(): number;\r\n    set offsetY(offsetY: number);\r\n    /** The width of the overlay panel. */\r\n    width: number | string;\r\n    /** The height of the overlay panel. */\r\n    height: number | string;\r\n    /** The min width of the overlay panel. */\r\n    minWidth: number | string;\r\n    /** The min height of the overlay panel. */\r\n    minHeight: number | string;\r\n    /** The custom class to be set on the backdrop element. */\r\n    backdropClass: string;\r\n    /** The custom class to add to the overlay pane element. */\r\n    panelClass: string | string[];\r\n    /** Margin between the overlay and the viewport edges. */\r\n    viewportMargin: number;\r\n    /** Strategy to be used when handling scroll events while the overlay is open. */\r\n    scrollStrategy: ScrollStrategy;\r\n    /** Whether the overlay is open. */\r\n    open: boolean;\r\n    /** Whether the overlay can be closed by user interaction. */\r\n    disableClose: boolean;\r\n    /** CSS selector which to set the transform origin. */\r\n    transformOriginSelector: string;\r\n    /** Whether or not the overlay should attach a backdrop. */\r\n    get hasBackdrop(): any;\r\n    set hasBackdrop(value: any);\r\n    /** Whether or not the overlay should be locked when scrolling. */\r\n    get lockPosition(): any;\r\n    set lockPosition(value: any);\r\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\r\n    get flexibleDimensions(): boolean;\r\n    set flexibleDimensions(value: boolean);\r\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\r\n    get growAfterOpen(): boolean;\r\n    set growAfterOpen(value: boolean);\r\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\r\n    get push(): boolean;\r\n    set push(value: boolean);\r\n    /** Event emitted when the backdrop is clicked. */\r\n    backdropClick: EventEmitter<MouseEvent>;\r\n    /** Event emitted when the position has changed. */\r\n    positionChange: EventEmitter<ConnectedOverlayPositionChange>;\r\n    /** Event emitted when the overlay has been attached. */\r\n    attach: EventEmitter<void>;\r\n    /** Event emitted when the overlay has been detached. */\r\n    detach: EventEmitter<void>;\r\n    /** Emits when there are keyboard events that are targeted at the overlay. */\r\n    overlayKeydown: EventEmitter<KeyboardEvent>;\r\n    /** Emits when there are mouse outside click events that are targeted at the overlay. */\r\n    overlayOutsideClick: EventEmitter<MouseEvent>;\r\n    constructor(_overlay: Overlay, templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef, scrollStrategyFactory: any, _dir: Directionality);\r\n    /** The associated overlay reference. */\r\n    get overlayRef(): OverlayRef;\r\n    /** The element's layout direction. */\r\n    get dir(): Direction;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /** Creates an overlay */\r\n    private _createOverlay;\r\n    /** Builds the overlay config based on the directive's inputs */\r\n    private _buildConfig;\r\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\r\n    private _updatePositionStrategy;\r\n    /** Returns the position strategy of the overlay to be set on the overlay config */\r\n    private _createPositionStrategy;\r\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\r\n    private _attachOverlay;\r\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\r\n    private _detachOverlay;\r\n    static ngAcceptInputType_hasBackdrop: BooleanInput;\r\n    static ngAcceptInputType_lockPosition: BooleanInput;\r\n    static ngAcceptInputType_flexibleDimensions: BooleanInput;\r\n    static ngAcceptInputType_growAfterOpen: BooleanInput;\r\n    static ngAcceptInputType_push: BooleanInput;\r\n}\r\n/** @docs-private */\r\nexport declare function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => RepositionScrollStrategy;\r\n/** @docs-private */\r\nexport declare const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER: {\r\n    provide: InjectionToken<() => ScrollStrategy>;\r\n    deps: (typeof Overlay)[];\r\n    useFactory: typeof CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY;\r\n};\r\n"]}