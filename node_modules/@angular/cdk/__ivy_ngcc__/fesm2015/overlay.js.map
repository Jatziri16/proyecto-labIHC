{"version":3,"file":"overlay.js","sources":["../../../../../../src/cdk/overlay/scroll/block-scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/close-scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../../../../../src/cdk/overlay/position/scroll-clip.ts","../../../../../../src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../../../../../src/cdk/overlay/scroll/scroll-strategy-options.ts","../../../../../../src/cdk/overlay/scroll/index.ts","../../../../../../src/cdk/overlay/overlay-config.ts","../../../../../../src/cdk/overlay/position/connected-position.ts","../../../../../../src/cdk/overlay/dispatchers/base-overlay-dispatcher.ts","../../../../../../src/cdk/overlay/dispatchers/overlay-keyboard-dispatcher.ts","../../../../../../src/cdk/overlay/dispatchers/overlay-outside-click-dispatcher.ts","../../../../../../src/cdk/overlay/overlay-container.ts","../../../../../../src/cdk/overlay/overlay-ref.ts","../../../../../../src/cdk/overlay/position/flexible-connected-position-strategy.ts","../../../../../../src/cdk/overlay/position/connected-position-strategy.ts","../../../../../../src/cdk/overlay/position/global-position-strategy.ts","../../../../../../src/cdk/overlay/position/overlay-position-builder.ts","../../../../../../src/cdk/overlay/overlay.ts","../../../../../../src/cdk/overlay/overlay-directives.ts","../../../../../../src/cdk/overlay/overlay-module.ts","../../../../../../src/cdk/overlay/dispatchers/index.ts","../../../../../../src/cdk/overlay/fullscreen-overlay-container.ts","../../../../../../src/cdk/overlay/public-api.ts","../../../../../../src/cdk/overlay/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAKD,MAAM,uBAAuB,GAAG,sBAAsB,EAAE,CAAC;AAEzD;AACC;AACC;AACF,MAAa,mBAAmB;AAAI,IAMlC,YAAoB,cAA6B,EAAE,QAAa;AACjE,QADqB,mBAAc,GAAd,cAAc,CAAe;AAAE,QAL3C,wBAAmB,GAAG,EAAC,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAC,CAAC;AACnD,QACS,eAAU,GAAG,KAAK,CAAC;AAC5B,QAGG,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC7B,KAAE;AAEH;AACG,IAAD,MAAM,MAAK;AAEb;AACG,IAAD,MAAM;AACP,QAAG,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;AAC7B,YAAK,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,eAAgB,CAAC;AAEnD,YAAM,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,CAAC;AAErF;AACO,YAAD,IAAI,CAAC,mBAAmB,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC;AAC3D,YAAK,IAAI,CAAC,mBAAmB,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC;AAE1D;AACO;AACO,YAAR,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;AAC/E,YAAK,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,mBAAmB,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;AAC7E,YAAK,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AAClD,YAAK,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAC5B,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,OAAO;AACR,QAAG,IAAI,IAAI,CAAC,UAAU,EAAE;AACxB,YAAK,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,eAAgB,CAAC;AAClD,YAAK,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAK,CAAC;AACvC,YAAK,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;AAClC,YAAK,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;AAClC,YAAK,MAAM,0BAA0B,GAAG,SAAS,CAAC,cAAc,IAAI,EAAE,CAAC;AACvE,YAAK,MAAM,0BAA0B,GAAG,SAAS,CAAC,cAAc,IAAI,EAAE,CAAC;AAExE,YAAM,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;AAE9B,YAAM,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;AACpD,YAAK,SAAS,CAAC,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC;AAClD,YAAK,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;AAEtD;AACO;AACO;AACO;AACO;AACO,YAA7B,IAAI,uBAAuB,EAAE;AAClC,gBAAO,SAAS,CAAC,cAAc,GAAG,SAAS,CAAC,cAAc,GAAG,MAAM,CAAC;AACpE,aAAM;AAEP,YAAM,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;AAEzF,YAAM,IAAI,uBAAuB,EAAE;AAClC,gBAAO,SAAS,CAAC,cAAc,GAAG,0BAA0B,CAAC;AAC7D,gBAAO,SAAS,CAAC,cAAc,GAAG,0BAA0B,CAAC;AAC7D,aAAM;AACN,SAAI;AACJ,KAAE;AAEH,IAAU,aAAa;AAAM;AAC0D;AAErF;AACK,QAAH,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,eAAgB,CAAC;AAEjD,QAAI,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,wBAAwB,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;AAC7E,YAAK,OAAO,KAAK,CAAC;AAClB,SAAI;AAEL,QAAI,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;AACpC,QAAG,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC;AAC1D,QAAG,OAAO,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC;AACnF,KAAE;AACF,CAAA;AACA;ACpGD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAAK;AAAK;AAGqC;AAmBhD,SAAgB,wCAAwC;AAAM,IAC5D,OAAO,KAAK,CAAC,4CAA4C,CAAC,CAAC;AAC5D,CAAA;AACA;ACZD;AACC;AACC;AACF,MAAa,mBAAmB;AAAI,IAKlC,YACU,iBAAmC,EACnC,OAAe,EACf,cAA6B,EAC7B,OAAmC;AAC/C,QAJY,sBAAiB,GAAjB,iBAAiB,CAAkB;AAC/C,QAAY,YAAO,GAAP,OAAO,CAAQ;AAC3B,QAAY,mBAAc,GAAd,cAAc,CAAe;AACzC,QAAY,YAAO,GAAP,OAAO,CAA4B;AAAE,QARvC,wBAAmB,GAAsB,IAAI,CAAC;AACvD;AACkC,QAwDzB,YAAO,GAAG;AACnB,YAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAEnB,YAAI,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE;AACvC,gBAAK,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;AACvD,aAAI;AACJ,SAAE,CAAA;AACF,KAzDkD;AAEnD;AACG,IAAD,MAAM,CAAC,UAA4B;AACpC,QAAG,IAAI,IAAI,CAAC,WAAW,KAAK,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,EAAE;AAC5E,YAAK,MAAM,wCAAwC,EAAE,CAAC;AACtD,SAAI;AAEL,QAAI,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;AACjC,KAAE;AAEH;AACG,IAAD,MAAM;AACP,QAAG,IAAI,IAAI,CAAC,mBAAmB,EAAE;AACjC,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAEtD,QAAI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,EAAE;AAC7E,YAAK,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,CAAC,GAAG,CAAC;AAExF,YAAM,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,SAAS,CAAC;AACjD,gBAAO,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,CAAC,GAAG,CAAC;AAEnF,gBAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,CAAC,GAAG,IAAI,CAAC,OAAQ,CAAC,SAAU,EAAE;AAC9F,oBAAS,IAAI,CAAC,OAAO,EAAE,CAAC;AACxB,iBAAQ;AAAE,qBAAI;AACd,oBAAS,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;AAC3C,iBAAQ;AACR,aAAM,CAAC,CAAC;AACR,SAAI;AAAE,aAAI;AACV,YAAK,IAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC/D,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,OAAO;AACR,QAAG,IAAI,IAAI,CAAC,mBAAmB,EAAE;AACjC,YAAK,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;AAC5C,YAAK,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;AACrC,SAAI;AACJ,KAAE;AAEH,IAAE,MAAM;AACP,QAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAClB,QAAG,IAAI,CAAC,WAAW,GAAG,IAAK,CAAC;AAC5B,KAAE;AAEH,CAQC;AACA;AC3FD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAAK;AAGN,MAAa,kBAAkB;AAAI;AACE,IACnC,MAAM,MAAM;AACb;AACG,IAAF,OAAO,MAAM;AACd;AACG,IAAF,MAAM,MAAM;AACb,CAAA;AACA;ACnBD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAAK;AACC;AAGJ;AAAK;AACC;AACC;AACC;AACC;AAEH;AAAT,SAAgB,4BAA4B,CAAC,OAAmB,EAAE,gBAA8B;AAC/F,IAAC,OAAO,gBAAgB,CAAC,IAAI,CAAC,eAAe;AAC7C,QAAG,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC;AAC7D,QAAG,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,GAAG,eAAe,CAAC,MAAM,CAAC;AAC7D,QAAG,MAAM,WAAW,GAAG,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC;AAC5D,QAAG,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,GAAG,eAAe,CAAC,KAAK,CAAC;AAE9D,QAAI,OAAO,YAAY,IAAI,YAAY,IAAI,WAAW,IAAI,YAAY,CAAC;AACtE,KAAE,CAAC,CAAC;AACJ,CAAA;AAED;AAEA;AACC;AACC;AACC;AACC;AAEH;AAAD,SAAgB,2BAA2B,CAAC,OAAmB,EAAE,gBAA8B;AAC9F,IAAC,OAAO,gBAAgB,CAAC,IAAI,CAAC,mBAAmB;AACjD,QAAG,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,GAAG,mBAAmB,CAAC,GAAG,CAAC;AAC9D,QAAG,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,GAAG,mBAAmB,CAAC,MAAM,CAAC;AACpE,QAAG,MAAM,WAAW,GAAG,OAAO,CAAC,IAAI,GAAG,mBAAmB,CAAC,IAAI,CAAC;AAC/D,QAAG,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK,GAAG,mBAAmB,CAAC,KAAK,CAAC;AAEnE,QAAI,OAAO,YAAY,IAAI,YAAY,IAAI,WAAW,IAAI,YAAY,CAAC;AACtE,KAAE,CAAC,CAAC;AACJ,CAAA;AACA;AC/CD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAkBD;AACC;AACC;AACF,MAAa,wBAAwB;AAAI,IAIvC,YACU,iBAAmC,EACnC,cAA6B,EAC7B,OAAe,EACf,OAAwC;AAAK,QAH7C,sBAAiB,GAAjB,iBAAiB,CAAkB;AAC/C,QAAY,mBAAc,GAAd,cAAc,CAAe;AACzC,QAAY,YAAO,GAAP,OAAO,CAAQ;AAC3B,QAAY,YAAO,GAAP,OAAO,CAAiC;AAAE,QAP5C,wBAAmB,GAAsB,IAAI,CAAC;AACvD,KAMwD;AAEzD;AACG,IAAD,MAAM,CAAC,UAA4B;AACpC,QAAG,IAAI,IAAI,CAAC,WAAW,KAAK,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,EAAE;AAC5E,YAAK,MAAM,wCAAwC,EAAE,CAAC;AACtD,SAAI;AAEL,QAAI,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;AACjC,KAAE;AAEH;AACG,IAAD,MAAM;AACP,QAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;AAClC,YAAK,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,CAAC,CAAC;AAEtE,YAAM,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC;AACpF,gBAAO,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;AAE1C;AACS,gBAAD,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;AACnD,oBAAS,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,qBAAqB,EAAE,CAAC;AACrF,oBAAS,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC;AAExE;AACW;AACW,oBAAZ,MAAM,WAAW,GAAG,CAAC,EAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAC,CAAC,CAAC;AAE/F,oBAAU,IAAI,4BAA4B,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE;AACrE,wBAAW,IAAI,CAAC,OAAO,EAAE,CAAC;AAC1B,wBAAW,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;AAC7D,qBAAU;AACV,iBAAQ;AACR,aAAM,CAAC,CAAC;AACR,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,OAAO;AACR,QAAG,IAAI,IAAI,CAAC,mBAAmB,EAAE;AACjC,YAAK,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;AAC5C,YAAK,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;AACrC,SAAI;AACJ,KAAE;AAEH,IAAE,MAAM;AACP,QAAG,IAAI,CAAC,OAAO,EAAE,CAAC;AAClB,QAAG,IAAI,CAAC,WAAW,GAAG,IAAK,CAAC;AAC5B,KAAE;AACF,CAAA;AACA;ACvFD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAYD;AACC;AACC;AACC;AACC;AAEH;AACD,MAAa,qBAAqB;AACjC,IAEC,YACU,iBAAmC,EACnC,cAA6B,EAC7B,OAAe,EACL,QAAa;AAClC,QAJW,sBAAiB,GAAjB,iBAAiB,CAAkB;AAC/C,QAAY,mBAAc,GAAd,cAAc,CAAe;AACzC,QAAY,YAAO,GAAP,OAAO,CAAQ;AAC3B;AAAsC,QAKpC,SAAI,GAAG,MAAM,IAAI,kBAAkB,EAAE,CAAC;AAExC;AACO;AACO;AAEC;AAAa,QAA1B,UAAK,GAAG,CAAC,MAAkC,KAAK,IAAI,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,EAC1F,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAA;AAEhD;AACO,QAAL,UAAK,GAAG,MAAM,IAAI,mBAAmB,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;AAE7E;AACO;AACO;AACO;AAEC;AAAa,QAAjC,eAAU,GAAG,CAAC,MAAuC,KAAK,IAAI,wBAAwB,CAClF,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;AACvE,QAvBK,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC/B,KAAI;AAEL;gQAAC;AAAE,2RAXG;AAAE;EADP,UAAU,SAAC,EAAC,vBAEM,YApBX,gBAAgB;AAkBD,EAAE,MAAM,EAAC,VAlBH,YAAH,aAAa;AAAK,YAEhB,MAAM;AAAK,4CAwBlC,MAAM,SAAC,QAAQ;AAAS;;;;;;;kCAAE;AAAE;AClCjC;AACC;AACC;AAEF;AAAI;AACC;AAGJ,GAFE;AAEH;ACRA;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAKD;AACA,MAAa,aAAa;AACzB,IA8CC,YAAY,MAAsB;AACnC;AACyE,QA5CxE,mBAAc,GAAoB,IAAI,kBAAkB,EAAE,CAAC;AAE7D;AACO,QAAL,eAAU,GAAuB,EAAE,CAAC;AAEtC;AACO,QAAL,gBAAW,GAAa,KAAK,CAAC;AAEhC;AACO,QAAL,kBAAa,GAAuB,2BAA2B,CAAC;AAElE;AAAa;AACa;AAGzB;AAEY;AAAa,QAuBxB,wBAAmB,GAAa,KAAK,CAAC;AAExC,QACI,IAAI,MAAM,EAAE;AACf;AACO;AACO;AACO,YAAhB,MAAM,UAAU,GACZ,MAAM,CAAC,IAAI,CAAC,MAAM,CAA4D,CAAC;AACxF,YAAK,KAAK,MAAM,GAAG,IAAI,UAAU,EAAE;AACnC,gBAAO,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;AACtC;AACW;AACW;AACW;AACW;AAEvC;AAIL,oBAJS,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAQ,CAAC;AACxC,iBAAQ;AACR,aAAM;AACN,SAAI;AACJ,KAAE;AACF,CAAA;AACA;AClFD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAoBD;AACA,MAAa,sBAAsB;AAClC,IASC,YACE,MAAgC,EAChC,OAAkC;AACpC;AACC,IAAQ,OAAgB;AACzB;AACC,IAAQ,OAAgB;AACzB;AACC,IAAQ,UAA8B;AAEzC,QANW,YAAO,GAAP,OAAO,CAAS;AAC3B,QACW,YAAO,GAAP,OAAO,CAAS;AAC3B,QACW,eAAU,GAAV,UAAU,CAAoB;AAAE,QAEvC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;AACjC,QAAG,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;AACjC,QAAG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AACpC,QAAG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AACpC,KAAE;AACF,CAAA;AAED;AACC;AACC;AAEF;AAAI;AACC;AAEF;AAAI;AACC;AAEF;AAAI;AACC;AACC;AACC;AACC;AACC;AACC;AACC;AACC;AACC;AACC;AACC;AAGpB;AACA;AAAmB;AAApB,MAAa,mBAAmB;AAC/B,CAIA;AAED;AACA,MAAa,8BAA8B;AAC1C,IAAC;AACD;AACD,IAAa,cAAsC;AACjD;AACD,IAAwB,wBAA6C;AACtE,QAHa,mBAAc,GAAd,cAAc,CAAwB;AACnD,QACyB,6BAAwB,GAAxB,wBAAwB,CAAqB;AAAE,KAAE;AACzE;AAEA;AACqD,YANzB,sBAAsB;AAChD,YACgD,mBAAmB,uBAA/D,QAAQ;AAAO;AAAI;AAAK;AAIF;AACrB;AACD;AAAkB;AAGzB,SAAgB,wBAAwB,CAAC,QAAgB,EAAE,KAA4B;AACtF,IAAC,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,QAAQ,EAAE;AAClE,QAAG,MAAM,KAAK,CAAC,8BAA8B,QAAQ,KAAK,KAAK,KAAK;AACpE,YAAe,uCAAuC,CAAC,CAAC;AACxD,KAAE;AACF,CAAA;AAED;AACC;AACC;AACC;AACC;AAEH;AAAD,SAAgB,0BAA0B,CAAC,QAAgB,EAAE,KAA8B;AAC1F,IAAC,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,EAAE;AACjE,QAAG,MAAM,KAAK,CAAC,8BAA8B,QAAQ,KAAK,KAAK,KAAK;AACpE,YAAe,sCAAsC,CAAC,CAAC;AACvD,KAAE;AACF,CAAA;AACA;AC1HD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAKD;AACC;AACC;AACC;AAEH;AACA,MAAsB,qBAAqB;AAAI,IAQ7C,YAA8B,QAAa;AAC5C;AAIiB,QAVhB,sBAAiB,GAAuB,EAAE,CAAC;AAE7C,QAII,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC7B,KAAE;AAEH,IAAE,WAAW;AAAM,QACf,IAAI,CAAC,MAAM,EAAE,CAAC;AACjB,KAAE;AAEH;AACG,IAAD,GAAG,CAAC,UAA4B;AAAK;AAEvC,QAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAC3B,QAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC3C,KAAE;AAEH;AACG,IAAD,MAAM,CAAC,UAA4B;AAAK,QACtC,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAE7D,QAAI,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;AACnB,YAAK,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAC7C,SAAI;AAEL;AACK,QAAD,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;AAC5C,YAAK,IAAI,CAAC,MAAM,EAAE,CAAC;AACnB,SAAI;AACJ,KAAE;AAEH;+IAAC;AAAE,oNArCG;AAAE;EADP,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC,3CACwB,4CAQzC,MAAM,SAAC,QAAQ;AAAS;;;;;;;kCAAE;AAAE;AC3B3C;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAMD;AACC;AACC;AACC;AAEH;AACA,MAAa,yBAA0B,SAAQ,qBAAqB;AAEpE,IAAE,YAA8B,QAAa;AAC5C,QAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;AACnB;AAGK,QAmBI,qBAAgB,GAAG,CAAC,KAAoB;AACjD,YAAG,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC;AAE5C,YAAI,KAAK,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;AAClD;AACW;AACW;AACW;AACW;AAEZ;AAC3B,gBADA,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AAC1D,oBAAO,QAAQ,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9C,oBAAO,MAAM;AACb,iBAAM;AACN,aAAI;AACJ,SAAE,CAAA;AACF,KAtCE;AAEH;AACG,IAAD,GAAG,CAAC,UAA4B;AAAK,QACnC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAE1B;AACK,QAAD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;AAC1B,YAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;AAC5E,YAAK,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAC7B,SAAI;AACJ,KAAE;AAEH;AACG,IAAS,MAAM;AACjB,QAAG,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,YAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;AAC/E,YAAK,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AAC9B,SAAI;AACJ,KAAE;AAEH;2JAAC;AAAE,oOAzBG;AAAE;EADP,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC,3CAC4B,4CAE7C,MAAM,SAAC,QAAQ;AAAS;;;;;;;kCAAE;AAAE;ACtB3C;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAMD;AACC;AACC;AACC;AAEH;AACA,MAAa,6BAA8B,SAAQ,qBAAqB;AACvE,IAGC,YAA8B,QAAa,EAAU,SAAmB;AACzE,QAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;AACnB,QAFsD,cAAS,GAAT,SAAS,CAAU;AAAE,QAFlE,sBAAiB,GAAG,KAAK,CAAC;AAEpC;AACU,QA+CA,mBAAc,GAAG,CAAC,KAAiB;AAC5C;AACS,YAAN,MAAM,MAAM,GAAG,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;AAC9E;AACS;AACS;AACS,YAAxB,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;AAEpD;AACS;AACS;AAER;AAA0B,YAAhC,KAAK,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;AAClD,gBAAK,MAAM,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACpC,gBAAK,IAAI,UAAU,CAAC,qBAAqB,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE;AAC7F,oBAAO,SAAS;AAChB,iBAAM;AAEP;AACW;AACW,gBAAhB,IAAI,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAc,CAAC,EAAE;AAC7D,oBAAO,MAAM;AACb,iBAAM;AAEP,gBAAM,UAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClD,aAAI;AACJ,SAAE,CAAA;AACF,KAzEE;AAEH;AACG,IAAD,GAAG,CAAC,UAA4B;AAAK,QACnC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AAE1B;AACK;AACK;AACK;AACK;AACK;AAExB,QADG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;AAC1B,YAAK,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;AACtC,YAAK,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AAC/D,YAAK,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AAClE,YAAK,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AAEtE;AACO;AACO,YAAR,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;AACxD,gBAAO,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;AACrD,gBAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;AACrC,gBAAO,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AACrC,aAAM;AAEP,YAAM,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAC7B,SAAI;AACJ,KAAE;AAEH;AACG,IAAS,MAAM;AACjB,QAAG,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,YAAK,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;AACtC,YAAK,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AAClE,YAAK,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AACrE,YAAK,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;AACxE,YAAK,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,IAAI,CAAC,iBAAiB,EAAE;AACvD,gBAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;AACrD,gBAAO,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;AACtC,aAAM;AACN,YAAK,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AAC9B,SAAI;AACJ,KAAE;AAEH;yMAAC;AAAE,wQAnDG;AAAE;EADP,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC,3CACgC,4CAIjD,MAAM,SAAC,QAAQ;AAAU,YAbhC,QAAQ;AAAI;;;;;;;6DAAE;AAAE;ACXxB;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAID;AACC;AACC;AACC;AACH,MAAM,iBAAiB,GAAY,OAAO,MAAM,KAAK,WAAW,IAAI,CAAC,CAAC,MAAM;AAC3E,IAAC,CAAC,EAAG,MAAc,CAAC,SAAS,IAAK,MAAc,CAAC,OAAO,CAAC,CAAC;AAE3D;AAEA,MAAa,gBAAgB;AAAI,IAI/B,YAA8B,QAAa,EAAY,SAAmB;AAC3E,QADwD,cAAS,GAAT,SAAS,CAAU;AAAE,QAC1E,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC7B,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC;AAE7C,QAAI,IAAI,SAAS,IAAI,SAAS,CAAC,UAAU,EAAE;AAC1C,YAAK,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AACjD,SAAI;AACJ,KAAE;AAEH;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAhB,mBAAmB;AAAM,QACvB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;AAChC,YAAK,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC7B,SAAI;AAEL,QAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC;AACjC,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAA,gBAAgB;AAAM,QAC9B,MAAM,cAAc,GAAG,uBAAuB,CAAC;AAEnD,QAAI,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,IAAI,iBAAiB,EAAE;AACtD,YAAK,MAAM,0BAA0B,GAC5B,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,cAAc,uBAAuB;AAClF,gBAAyC,IAAI,cAAc,mBAAmB,CAAC,CAAC;AAEjF;AACO;AACO,YAAR,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,0BAA0B,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjE,gBAAO,0BAA0B,CAAC,CAAC,CAAC,CAAC,UAAW,CAAC,WAAW,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5F,aAAM;AACN,SAAI;AAEL,QAAI,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AACzD,QAAG,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AAE5C;AACK;AACK;AACK;AACK;AACK;AACK;AACK;AACK;AAExB,QADZ,IAAI,iBAAiB,EAAE;AAC1B,YAAK,SAAS,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;AAChD,SAAI;AAAE,aAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;AACzC,YAAK,SAAS,CAAC,YAAY,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AAClD,SAAI;AAEL,QAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AAC9C,QAAG,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;AACtC,KAAE;AACF;kKACD;AAAE,oNAvEI;AAAE;EADP,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC,3CACmB,4CAIpC,MAAM,SAAC,QAAQ;AAAU,YAfhC,QAAQ;AAAI;;;;;;;6DAAE;AAAE;ACVxB;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAoBD;AACC;AACC;AACC;AACH,MAAa,UAAU;AAAI,IAsBzB,YACY,aAA2B,EAC3B,KAAkB,EAClB,KAAkB,EAClB,OAAuC,EACvC,OAAe,EACf,mBAA8C,EAC9C,SAAmB,EACnB,SAAmB,EACnB,uBAAsD;AAEpE,QAVc,kBAAa,GAAb,aAAa,CAAc;AACzC,QAAc,UAAK,GAAL,KAAK,CAAa;AAChC,QAAc,UAAK,GAAL,KAAK,CAAa;AAChC,QAAc,YAAO,GAAP,OAAO,CAAgC;AACrD,QAAc,YAAO,GAAP,OAAO,CAAQ;AAC7B,QAAc,wBAAmB,GAAnB,mBAAmB,CAA2B;AAC5D,QAAc,cAAS,GAAT,SAAS,CAAU;AACjC,QAAc,cAAS,GAAT,SAAS,CAAU;AACjC,QAAc,4BAAuB,GAAvB,uBAAuB,CAA+B;AAAE,QA9B5D,qBAAgB,GAAuB,IAAI,CAAC;AACrD,QAAS,mBAAc,GAAwB,IAAI,OAAO,EAAE,CAAC;AAC7D,QAAS,iBAAY,GAAG,IAAI,OAAO,EAAQ,CAAC;AAC5C,QAAS,iBAAY,GAAG,IAAI,OAAO,EAAQ,CAAC;AAC5C,QAES,qBAAgB,GAAqB,YAAY,CAAC,KAAK,CAAC;AACjE,QAAS,0BAAqB,GAAG,CAAC,KAAiB,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAEzF;AAC+D,QAM7D,mBAAc,GAAG,IAAI,OAAO,EAAiB,CAAC;AAEhD;AACO,QAAL,0BAAqB,GAAG,IAAI,OAAO,EAAc,CAAC;AAEpD,QAWI,IAAI,OAAO,CAAC,cAAc,EAAE;AAC/B,YAAK,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,cAAc,CAAC;AACnD,YAAK,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACvC,SAAI;AAEL,QAAI,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,gBAAgB,CAAC;AACrD,KAAE;AAEH;AACG,IAAD,IAAI,cAAc;AAAM,QACtB,OAAO,IAAI,CAAC,KAAK,CAAC;AACrB,KAAE;AAEH;AACG,IAAD,IAAI,eAAe;AAAM,QACvB,OAAO,IAAI,CAAC,gBAAgB,CAAC;AAChC,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAb,IAAI,WAAW;AAAM,QACnB,OAAO,IAAI,CAAC,KAAK,CAAC;AACrB,KAAE;AAEH;AAAS;AACI;AAGZ;AACE;AACW;AAA+C;AAAS,IAKpE,MAAM,CAAC,MAAmB;AAAK,QAC7B,IAAI,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAEzD;AACK,QAAD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,IAAI,CAAC,mBAAmB,EAAE;AAC9D,YAAK,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACtD,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAC/B,YAAK,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACzC,SAAI;AAEL,QAAI,IAAI,CAAC,oBAAoB,EAAE,CAAC;AAC/B,QAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC7B,QAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;AAEnC,QAAI,IAAI,IAAI,CAAC,eAAe,EAAE;AAC7B,YAAK,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;AACnC,SAAI;AAEL;AACK;AACK;AACK,QAAX,IAAI,CAAC,OAAO,CAAC,QAAQ;AACxB,aAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB,aAAM,SAAS,CAAC;AAChB;AACK,YAAE,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;AAC/B,gBAAS,IAAI,CAAC,cAAc,EAAE,CAAC;AAC/B,aAAQ;AACR,SAAM,CAAC,CAAC;AAET;AACK,QAAD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;AAEpC,QAAI,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;AACjC,YAAK,IAAI,CAAC,eAAe,EAAE,CAAC;AAC5B,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;AAChC,YAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AACpE,SAAI;AAEL;AACK,QAAD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;AAE7B;AACK,QAAD,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAEvC,QAAI,IAAI,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE;AACzC,YAAK,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AAC5E,SAAI;AAEL,QAAI,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1C,QAAG,OAAO,YAAY,CAAC;AACvB,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,MAAM;AAAM,QACV,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;AAC5B,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,IAAI,CAAC,cAAc,EAAE,CAAC;AAE1B;AACK;AACK;AACK,QAAX,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;AAErC,QAAI,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE;AAChE,YAAK,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC;AACrC,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,eAAe,EAAE;AAC7B,YAAK,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;AACpC,SAAI;AAEL,QAAI,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC;AAEzD;AACK,QAAD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;AAE7B;AACK,QAAD,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAE1C;AACK;AACK,QAAN,IAAI,CAAC,wBAAwB,EAAE,CAAC;AACnC,QAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;AACvC,QAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC7C,QAAG,OAAO,gBAAgB,CAAC;AAC3B,KAAE;AAEH;AACG,IAAD,OAAO;AAAM,QACX,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AAE1C,QAAI,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAC/B,YAAK,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;AACtC,SAAI;AAEL,QAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;AACjC,QAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AACzB,QAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;AACvC,QAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACzC,QAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;AAChC,QAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;AAChC,QAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;AAClC,QAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;AAClC,QAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAAC;AACzC,QAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAE9C,QAAI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;AAC5C,YAAK,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACnD,YAAK,IAAI,CAAC,KAAK,GAAG,IAAK,CAAC;AACxB,SAAI;AAEL,QAAI,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,KAAK,GAAG,IAAK,CAAC;AAElD,QAAI,IAAI,UAAU,EAAE;AACnB,YAAK,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;AAC9B,SAAI;AAEL,QAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;AAChC,KAAE;AAEH;AACG,IAAD,WAAW;AAAM,QACf,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;AAC3C,KAAE;AAEH;AACG,IAAD,aAAa;AAAM,QACjB,OAAO,IAAI,CAAC,cAAc,CAAC;AAC9B,KAAE;AAEH;AACG,IAAD,WAAW;AAAM,QACf,OAAO,IAAI,CAAC,YAAY,CAAC;AAC5B,KAAE;AAEH;AACG,IAAD,WAAW;AAAM,QACf,OAAO,IAAI,CAAC,YAAY,CAAC;AAC5B,KAAE;AAEH;AACG,IAAD,aAAa;AAAM,QACjB,OAAO,IAAI,CAAC,cAAc,CAAC;AAC9B,KAAE;AAEH;AACG,IAAD,oBAAoB;AAAM,QACxB,OAAO,IAAI,CAAC,qBAAqB,CAAC;AACrC,KAAE;AAEH;AACG,IAAD,SAAS;AAAM,QACb,OAAO,IAAI,CAAC,OAAO,CAAC;AACvB,KAAE;AAEH;AACG,IAAD,cAAc;AAAM,QAClB,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAC/B,YAAK,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;AACpC,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,sBAAsB,CAAC,QAA0B;AAAK,QACpD,IAAI,QAAQ,KAAK,IAAI,CAAC,iBAAiB,EAAE;AAC5C,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAC/B,YAAK,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;AACtC,SAAI;AAEL,QAAI,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC;AAEtC,QAAI,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;AAC3B,YAAK,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC3B,YAAK,IAAI,CAAC,cAAc,EAAE,CAAC;AAC3B,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,UAAU,CAAC,UAA6B;AAAK,QAC3C,IAAI,CAAC,OAAO,mCAAO,IAAI,CAAC,OAAO,GAAK,UAAU,CAAC,CAAC;AACnD,QAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC7B,KAAE;AAEH;AACG,IAAD,YAAY,CAAC,GAA+B;AAAK,QAC/C,IAAI,CAAC,OAAO,mCAAO,IAAI,CAAC,OAAO,KAAE,SAAS,EAAE,GAAG,GAAC,CAAC;AACpD,QAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;AAClC,KAAE;AAEH;AACG,IAAD,aAAa,CAAC,OAA0B;AAAK,QAC3C,IAAI,IAAI,CAAC,KAAK,EAAE;AACnB,YAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;AACpD,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,gBAAgB,CAAC,OAA0B;AAAK,QAC9C,IAAI,IAAI,CAAC,KAAK,EAAE;AACnB,YAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AACrD,SAAI;AACJ,KAAE;AAEH;AACG;AAEH;AAAS,IAAP,YAAY;AAAM,QAChB,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;AAE7C,QAAI,IAAI,CAAC,SAAS,EAAE;AACnB,YAAK,OAAO,KAAK,CAAC;AAClB,SAAI;AAEL,QAAI,OAAO,OAAO,SAAS,KAAK,QAAQ,GAAG,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC;AACtE,KAAE;AAEH;AACG,IAAD,oBAAoB,CAAC,QAAwB;AAAK,QAChD,IAAI,QAAQ,KAAK,IAAI,CAAC,eAAe,EAAE;AAC1C,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;AACjC,QAAG,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;AAEpC,QAAI,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE;AAC3B,YAAK,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC3B,YAAK,QAAQ,CAAC,MAAM,EAAE,CAAC;AACvB,SAAI;AACJ,KAAE;AAEH;AACG,IAAO,uBAAuB;AAChC,QAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;AACvD,KAAE;AAEH;AACG,IAAO,kBAAkB;AAC3B,QAAG,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AACpB,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;AAEnC,QAAI,KAAK,CAAC,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACzD,QAAG,KAAK,CAAC,MAAM,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3D,QAAG,KAAK,CAAC,QAAQ,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/D,QAAG,KAAK,CAAC,SAAS,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACjE,QAAG,KAAK,CAAC,QAAQ,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/D,QAAG,KAAK,CAAC,SAAS,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACjE,KAAE;AAEH;AACG,IAAO,oBAAoB,CAAC,aAAsB;AACpD,QAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,GAAG,aAAa,GAAG,EAAE,GAAG,MAAM,CAAC;AAChE,KAAE;AAEH;AACG,IAAO,eAAe;AACxB,QAAG,MAAM,YAAY,GAAG,8BAA8B,CAAC;AAExD,QAAI,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAC/D,QAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AAEhE,QAAI,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;AACnC,YAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;AAClF,SAAI;AAEL;AACK;AACK,QAAN,IAAI,CAAC,KAAK,CAAC,aAAc,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AAE9E;AACK;AACK,QAAN,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;AAEhF;AACK,QAAD,IAAI,OAAO,qBAAqB,KAAK,WAAW,EAAE;AACrD,YAAK,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;AACpC,gBAAO,qBAAqB,CAAC;AAC7B,oBAAS,IAAI,IAAI,CAAC,gBAAgB,EAAE;AACpC,wBAAW,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC7D,qBAAU;AACV,iBAAQ,CAAC,CAAC;AACV,aAAM,CAAC,CAAC;AACR,SAAI;AAAE,aAAI;AACV,YAAK,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AACvD,SAAI;AACJ,KAAE;AAEH;AACG;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAX,oBAAoB;AAC7B,QAAG,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;AAC/B,YAAK,IAAI,CAAC,KAAK,CAAC,UAAW,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACpD,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,cAAc;AAAM,QAClB,IAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;AAEjD,QAAI,IAAI,CAAC,gBAAgB,EAAE;AAC1B,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,IAAI,SAAiB,CAAC;AACzB,QAAG,IAAI,YAAY,GAAG;AACtB;AACO,YAAF,IAAI,gBAAgB,EAAE;AAC3B,gBAAO,gBAAgB,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;AACjF,gBAAO,gBAAgB,CAAC,mBAAmB,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;AAE5E,gBAAQ,IAAI,gBAAgB,CAAC,UAAU,EAAE;AACxC,oBAAS,gBAAgB,CAAC,UAAU,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;AACnE,iBAAQ;AACR,aAAM;AAEP;AACO;AACO;AACO,YAAf,IAAI,IAAI,CAAC,gBAAgB,IAAI,gBAAgB,EAAE;AACpD,gBAAO,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;AACpC,aAAM;AAEP,YAAM,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;AACrC,gBAAO,IAAI,CAAC,cAAc,CAAC,gBAAiB,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;AACjF,aAAM;AAEP,YAAM,YAAY,CAAC,SAAS,CAAC,CAAC;AAC7B,SAAI,CAAC;AAEN,QAAI,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC;AAEtE,QAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;AAClC,YAAK,gBAAiB,CAAC,gBAAgB,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;AACvE,SAAI,CAAC,CAAC;AAEP;AACK;AACK,QAAN,gBAAgB,CAAC,KAAK,CAAC,aAAa,GAAG,MAAM,CAAC;AAElD;AACK;AACK;AACK,QAAX,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,UAAU,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC;AACnF,KAAE;AAEH;AACG,IAAO,cAAc,CAAC,OAAoB,EAAE,UAA6B,EAAE,KAAc;AAC3F,QAAG,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;AAExC,QAAI,WAAW,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,QAAQ;AAC3C;AACO;AACO,YAAT,IAAI,QAAQ,EAAE;AACnB,gBAAO,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACpE,aAAM;AACN,SAAI,CAAC,CAAC;AACN,KAAE;AAEH;AACG,IAAO,wBAAwB;AACjC;AACK;AACK;AACK,QAAZ,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;AAClC;AACO;AACO;AACO,YAAhB,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ;AAC/C,iBAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;AACpE,iBAAQ,SAAS,CAAC;AAClB;AACO;AACO,gBAAL,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AAC7E,oBAAW,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;AACtD,wBAAa,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;AAC7E,qBAAY;AAEb,oBAAY,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;AACvD,wBAAa,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;AACjE,wBAAa,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9D,qBAAY;AAEb,oBAAY,YAAY,CAAC,WAAW,EAAE,CAAC;AACtC,iBAAU;AACV,aAAQ,CAAC,CAAC;AACV,SAAI,CAAC,CAAC;AACN,KAAE;AAEH;AACG,IAAO,sBAAsB;AAC/B,QAAG,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC;AAEhD,QAAI,IAAI,cAAc,EAAE;AACvB,YAAK,cAAc,CAAC,OAAO,EAAE,CAAC;AAE/B,YAAM,IAAI,cAAc,CAAC,MAAM,EAAE;AAChC,gBAAO,cAAc,CAAC,MAAM,EAAE,CAAC;AAC/B,aAAM;AACN,SAAI;AACJ,KAAE;AACF,CAAA;AAED;AC9gBA;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAiBD;AACC;AAEA;AACD,MAAM,gBAAgB,GAAG,6CAA6C,CAAC;AAEvE;AACA,MAAM,cAAc,GAAG,eAAe,CAAC;AAEvC;AAAK;AAAqF;AAEnF;AAKuD;AACW;AAAoB;AAK7F,MAAa,iCAAiC;AAAI,IA0FhD,YACI,WAAoD,EAAU,cAA6B,EACnF,SAAmB,EAAU,SAAmB,EAChD,iBAAmC;AAChD,QAHmE,mBAAc,GAAd,cAAc,CAAe;AACjG,QAAc,cAAS,GAAT,SAAS,CAAU;AAAE,QAAQ,cAAS,GAAT,SAAS,CAAU;AAC9D,QAAc,sBAAiB,GAAjB,iBAAiB,CAAkB;AAAE;AAK/C,QA1FM,yBAAoB,GAAG,EAAC,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC;AAEvD;AACO,QAAG,cAAS,GAAG,KAAK,CAAC;AAE5B;AACO,QAAG,aAAQ,GAAG,IAAI,CAAC;AAE1B;AACO,QAAG,mBAAc,GAAG,KAAK,CAAC;AAEjC;AACO,QAAG,2BAAsB,GAAG,IAAI,CAAC;AAExC;AACO,QAAG,oBAAe,GAAG,KAAK,CAAC;AAElC;AAIC,QAMS,oBAAe,GAAG,CAAC,CAAC;AAE9B;AACO,QAAG,iBAAY,GAAoB,EAAE,CAAC;AAE7C;AACO,QAAL,wBAAmB,GAA6B,EAAE,CAAC;AAErD;AAAkE,QAmBxD,qBAAgB,GAAG,IAAI,OAAO,EAAkC,CAAC;AAE3E;AACO,QAAG,wBAAmB,GAAG,YAAY,CAAC,KAAK,CAAC;AAEnD;AACO,QAAG,aAAQ,GAAG,CAAC,CAAC;AAEvB;AACO,QAAG,aAAQ,GAAG,CAAC,CAAC;AAEvB;AACe,QAGL,yBAAoB,GAAa,EAAE,CAAC;AAE9C;AAAyD,QAIvD,oBAAe,GAA+C,IAAI,CAAC,gBAAgB,CAAC;AAEtF,QASI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;AAC/B,KAAE;AAEH;AACuB,IAZrB,IAAI,SAAS;AAAM,QACjB,OAAO,IAAI,CAAC,mBAAmB,CAAC;AACnC,KAAE;AAEH;AAC4C,IAO1C,MAAM,CAAC,UAA4B;AAAK,QACtC,IAAI,IAAI,CAAC,WAAW,IAAI,UAAU,KAAK,IAAI,CAAC,WAAW;AAC1D,aAAM,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,EAAE;AACtD,YAAK,MAAM,KAAK,CAAC,0DAA0D,CAAC,CAAC;AAC7E,SAAI;AAEL,QAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAE9B,QAAI,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAE3D,QAAI,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;AACjC,QAAG,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,WAAW,CAAC;AAC9C,QAAG,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,cAAc,CAAC;AAC1C,QAAG,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AAC5B,QAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;AAChC,QAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC7B,QAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;AAC1C,QAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC;AACrE;AACO;AACO;AACO,YAAhB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;AAClC,YAAK,IAAI,CAAC,KAAK,EAAE,CAAC;AAClB,SAAI,CAAC,CAAC;AACN,KAAE;AAEH;AACG;AACG;AAEF;AAAQ;AACG;AACG;AACG;AACG;AACG;AAElB;AAAwB;AAGtB;AACI;AAAS,IADtB,KAAK;AAAM;AAEb,QAAI,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;AACtD,YAAK,OAAO;AACZ,SAAI;AAEL;AACK;AACK;AACK,QAAX,IAAI,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,aAAa,EAAE;AAC7E,YAAK,IAAI,CAAC,mBAAmB,EAAE,CAAC;AAChC,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC7B,QAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;AACrC,QAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;AAEnC;AACK;AACK;AACK,QAAX,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;AACxD,QAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC5C,QAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC;AAE3D,QAAI,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;AACvC,QAAG,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;AACzC,QAAG,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;AAE5C;AACK,QAAD,MAAM,YAAY,GAAkB,EAAE,CAAC;AAE3C;AACK,QAAD,IAAI,QAAsC,CAAC;AAE/C;AACK;AACK,QAAN,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,mBAAmB,EAAE;AAC7C;AACO,YAAF,IAAI,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;AAE9D;AACO;AACO;AACO,YAAf,IAAI,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC;AAE9E;AACO,YAAD,IAAI,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,WAAW,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC;AAEzF;AACO,YAAD,IAAI,UAAU,CAAC,0BAA0B,EAAE;AAChD,gBAAO,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC9B,gBAAO,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;AAC7C,gBAAO,OAAO;AACd,aAAM;AAEP;AACO;AACO,YAAR,IAAI,IAAI,CAAC,6BAA6B,CAAC,UAAU,EAAE,YAAY,EAAE,YAAY,CAAC,EAAE;AACrF;AACS;AACS,gBAAX,YAAY,CAAC,IAAI,CAAC;AACzB,oBAAS,QAAQ,EAAE,GAAG;AACtB,oBAAS,MAAM,EAAE,WAAW;AAC5B,oBAAS,WAAW;AACpB,oBAAS,eAAe,EAAE,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,GAAG,CAAC;AAC1E,iBAAQ,CAAC,CAAC;AAEX,gBAAQ,SAAS;AAChB,aAAM;AAEP;AACO;AACO;AACO,YAAf,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,UAAU,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,EAAE;AAChF,gBAAO,QAAQ,GAAG,EAAC,UAAU,EAAE,YAAY,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG,EAAE,WAAW,EAAC,CAAC;AACtF,aAAM;AACN,SAAI;AAEL;AACK;AACK,QAAN,IAAI,YAAY,CAAC,MAAM,EAAE;AAC5B,YAAK,IAAI,OAAO,GAAuB,IAAI,CAAC;AAC5C,YAAK,IAAI,SAAS,GAAG,CAAC,CAAC,CAAC;AACxB,YAAK,KAAK,MAAM,GAAG,IAAI,YAAY,EAAE;AACrC,gBAAO,MAAM,KAAK,GACP,GAAG,CAAC,eAAe,CAAC,KAAK,GAAG,GAAG,CAAC,eAAe,CAAC,MAAM,IAAI,GAAG,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;AAC/F,gBAAO,IAAI,KAAK,GAAG,SAAS,EAAE;AAC9B,oBAAS,SAAS,GAAG,KAAK,CAAC;AAC3B,oBAAS,OAAO,GAAG,GAAG,CAAC;AACvB,iBAAQ;AACR,aAAM;AAEP,YAAM,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC5B,YAAK,IAAI,CAAC,cAAc,CAAC,OAAQ,CAAC,QAAQ,EAAE,OAAQ,CAAC,MAAM,CAAC,CAAC;AAC7D,YAAK,OAAO;AACZ,SAAI;AAEL;AACK;AACK,QAAN,IAAI,IAAI,CAAC,QAAQ,EAAE;AACtB;AACO,YAAF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC3B,YAAK,IAAI,CAAC,cAAc,CAAC,QAAS,CAAC,QAAQ,EAAE,QAAS,CAAC,WAAW,CAAC,CAAC;AACpE,YAAK,OAAO;AACZ,SAAI;AAEL;AACK;AACK,QAAN,IAAI,CAAC,cAAc,CAAC,QAAS,CAAC,QAAQ,EAAE,QAAS,CAAC,WAAW,CAAC,CAAC;AAClE,KAAE;AAEH,IAAE,MAAM;AAAM,QACV,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC7B,QAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC7B,QAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;AACnC,QAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;AAC1C,KAAE;AAEH;AACG,IAAD,OAAO;AAAM,QACX,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,YAAK,OAAO;AACZ,SAAI;AAEL;AACK;AACK,QAAN,IAAI,IAAI,CAAC,YAAY,EAAE;AAC1B,YAAK,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;AAC3C,gBAAO,GAAG,EAAE,EAAE;AACd,gBAAO,IAAI,EAAE,EAAE;AACf,gBAAO,KAAK,EAAE,EAAE;AAChB,gBAAO,MAAM,EAAE,EAAE;AACjB,gBAAO,MAAM,EAAE,EAAE;AACjB,gBAAO,KAAK,EAAE,EAAE;AAChB,gBAAO,UAAU,EAAE,EAAE;AACrB,gBAAO,cAAc,EAAE,EAAE;AACzB,aAA6B,CAAC,CAAC;AAC/B,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,KAAK,EAAE;AACnB,YAAK,IAAI,CAAC,0BAA0B,EAAE,CAAC;AACvC,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,YAAK,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;AACrE,SAAI;AAEL,QAAI,IAAI,CAAC,MAAM,EAAE,CAAC;AACjB,QAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;AACpC,QAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,GAAG,IAAK,CAAC;AAChD,QAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAC3B,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAb,mBAAmB;AAAM,QACvB,IAAI,CAAC,IAAI,CAAC,WAAW,KAAK,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;AAC3E,YAAK,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC9C,YAAK,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC;AAC5D,YAAK,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;AAE3D,YAAM,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAC5E,YAAK,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;AAE/E,YAAM,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;AACpD,SAAI;AACJ,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAb,wBAAwB,CAAC,WAA4B;AAAK,QACxD,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;AACnC,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,aAAa,CAAC,SAA8B;AAAK,QAC/C,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;AAEzC;AACK;AACK,QAAN,IAAI,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,aAAc,CAAC,KAAK,CAAC,CAAC,EAAE;AACtD,YAAK,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC/B,SAAI;AAEL,QAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAE9B,QAAI,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,kBAAkB,CAAC,MAAc;AAAK,QACpC,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;AACjC,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG,IAAD,sBAAsB,CAAC,kBAAkB,GAAG,IAAI;AAAK,QACnD,IAAI,CAAC,sBAAsB,GAAG,kBAAkB,CAAC;AACpD,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG,IAAD,iBAAiB,CAAC,aAAa,GAAG,IAAI;AAAK,QACzC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;AACvC,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG,IAAD,QAAQ,CAAC,OAAO,GAAG,IAAI;AAAK,QAC1B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;AAC3B,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAhB,kBAAkB,CAAC,QAAQ,GAAG,IAAI;AAAK,QACrC,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;AACnC,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAnB,SAAS,CAAC,MAA+C;AAAK,QAC5D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;AACzB,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,kBAAkB,CAAC,MAAc;AAAK,QACpC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;AAC1B,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,kBAAkB,CAAC,MAAc;AAAK,QACpC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;AAC1B,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAtB,qBAAqB,CAAC,QAAgB;AAAK,QACzC,IAAI,CAAC,wBAAwB,GAAG,QAAQ,CAAC;AAC5C,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AAEH;AAAS,IAAC,eAAe,CAAC,UAAsB,EAAE,GAAsB;AAAK,QACzE,IAAI,CAAS,CAAC;AACjB,QAAG,IAAI,GAAG,CAAC,OAAO,IAAI,QAAQ,EAAE;AAChC;AACO;AACO,YAAT,CAAC,GAAG,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;AAClD,SAAI;AAAE,aAAI;AACV,YAAK,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC;AACvE,YAAK,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC;AACrE,YAAK,CAAC,GAAG,GAAG,CAAC,OAAO,IAAI,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC;AAChD,SAAI;AAEL,QAAI,IAAI,CAAS,CAAC;AACjB,QAAG,IAAI,GAAG,CAAC,OAAO,IAAI,QAAQ,EAAE;AAChC,YAAK,CAAC,GAAG,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAClD,SAAI;AAAE,aAAI;AACV,YAAK,CAAC,GAAG,GAAG,CAAC,OAAO,IAAI,KAAK,GAAG,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC;AACnE,SAAI;AAEL,QAAI,OAAO,EAAC,CAAC,EAAE,CAAC,EAAC,CAAC;AACjB,KAAE;AAEH;AAEE;AACG;AAEH;AAAS,IAAD,gBAAgB,CACpB,WAAkB,EAClB,WAAuB,EACvB,GAAsB;AAAK;AAEmC;AAEjE,QAAC,IAAI,aAAqB,CAAC;AAC7B,QAAG,IAAI,GAAG,CAAC,QAAQ,IAAI,QAAQ,EAAE;AACjC,YAAK,aAAa,GAAG,CAAC,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC;AAC5C,SAAI;AAAE,aAAI,IAAI,GAAG,CAAC,QAAQ,KAAK,OAAO,EAAE;AACxC,YAAK,aAAa,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC;AAC5D,SAAI;AAAE,aAAI;AACV,YAAK,aAAa,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,CAAC;AAC5D,SAAI;AAEL,QAAI,IAAI,aAAqB,CAAC;AAC7B,QAAG,IAAI,GAAG,CAAC,QAAQ,IAAI,QAAQ,EAAE;AACjC,YAAK,aAAa,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;AAC7C,SAAI;AAAE,aAAI;AACV,YAAK,aAAa,GAAG,GAAG,CAAC,QAAQ,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC;AACrE,SAAI;AAEL;AACK,QAAD,OAAO;AACV,YAAK,CAAC,EAAE,WAAW,CAAC,CAAC,GAAG,aAAa;AACrC,YAAK,CAAC,EAAE,WAAW,CAAC,CAAC,GAAG,aAAa;AACrC,SAAI,CAAC;AACL,KAAE;AAEH;AACG,IAAO,cAAc,CAAC,KAAY,EAAE,cAA0B,EAAE,QAAoB,EACnF,QAA2B;AAAK;AAEc;AACK,QACnD,MAAM,OAAO,GAAG,4BAA4B,CAAC,cAAc,CAAC,CAAC;AAChE,QAAG,IAAI,EAAC,CAAC,EAAE,CAAC,EAAC,GAAG,KAAK,CAAC;AACtB,QAAG,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAChD,QAAG,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAEjD;AACK,QAAD,IAAI,OAAO,EAAE;AAChB,YAAK,CAAC,IAAI,OAAO,CAAC;AAClB,SAAI;AAEL,QAAI,IAAI,OAAO,EAAE;AAChB,YAAK,CAAC,IAAI,OAAO,CAAC;AAClB,SAAI;AAEL;AACK,QAAD,IAAI,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5B,QAAG,IAAI,aAAa,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC;AAC5D,QAAG,IAAI,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;AAC3B,QAAG,IAAI,cAAc,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC;AAEhE;AACK,QAAD,IAAI,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;AAC1F,QAAG,IAAI,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;AAC5F,QAAG,IAAI,WAAW,GAAG,YAAY,GAAG,aAAa,CAAC;AAEnD,QAAI,OAAO;AACV,YAAK,WAAW;AAChB,YAAK,0BAA0B,EAAE,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,MAAM,MAAM,WAAW;AACjF,YAAK,wBAAwB,EAAE,aAAa,KAAK,OAAO,CAAC,MAAM;AAC/D,YAAK,0BAA0B,EAAE,YAAY,IAAI,OAAO,CAAC,KAAK;AAC9D,SAAI,CAAC;AACL,KAAE;AAEH;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAR,6BAA6B,CAAC,GAAe,EAAE,KAAY,EAAE,QAAoB;AAC1F,QAAG,IAAI,IAAI,CAAC,sBAAsB,EAAE;AACpC,YAAK,MAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC;AACvD,YAAK,MAAM,cAAc,GAAG,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;AACrD,YAAK,MAAM,SAAS,GAAG,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,CAAC;AAC7E,YAAK,MAAM,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC;AAE5E,YAAM,MAAM,WAAW,GAAG,GAAG,CAAC,wBAAwB;AACrD,iBAAU,SAAS,IAAI,IAAI,IAAI,SAAS,IAAI,eAAe,CAAC,CAAC;AAC7D,YAAK,MAAM,aAAa,GAAG,GAAG,CAAC,0BAA0B;AACzD,iBAAU,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,cAAc,CAAC,CAAC;AAE3D,YAAM,OAAO,WAAW,IAAI,aAAa,CAAC;AACzC,SAAI;AACJ,QAAG,OAAO,KAAK,CAAC;AAChB,KAAE;AAEH;AACG;AACG;AACG;AAEF;AAAQ;AACG;AACG;AACG;AAEnB;AACmB;AAAS,IAAvB,oBAAoB,CAAC,KAAY,EACZ,cAA0B,EAC1B,cAAsC;AAAK;AACoB;AAE1F;AACK,QAAL,IAAI,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,eAAe,EAAE;AACzD,YAAK,OAAO;AACZ,gBAAO,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAC9C,gBAAO,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAC9C,aAAM,CAAC;AACP,SAAI;AAEL;AACK;AACK,QAAN,MAAM,OAAO,GAAG,4BAA4B,CAAC,cAAc,CAAC,CAAC;AAChE,QAAG,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC;AAExC;AACK;AACK,QAAN,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AAC/E,QAAG,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAClF,QAAG,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,GAAG,cAAc,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAChF,QAAG,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAEpF;AACK,QAAD,IAAI,KAAK,GAAG,CAAC,CAAC;AACjB,QAAG,IAAI,KAAK,GAAG,CAAC,CAAC;AAElB;AACK;AACK;AACK,QAAX,IAAI,OAAO,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,EAAE;AACxC,YAAK,KAAK,GAAG,YAAY,IAAI,CAAC,aAAa,CAAC;AAC5C,SAAI;AAAE,aAAI;AACV,YAAK,KAAK,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,GAAG,CAAC,QAAQ,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAClG,SAAI;AAEL,QAAI,IAAI,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE;AAC1C,YAAK,KAAK,GAAG,WAAW,IAAI,CAAC,cAAc,CAAC;AAC5C,SAAI;AAAE,aAAI;AACV,YAAK,KAAK,GAAG,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,GAAG,CAAC,QAAQ,CAAC,GAAG,GAAG,cAAc,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;AAChG,SAAI;AAEL,QAAI,IAAI,CAAC,mBAAmB,GAAG,EAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAC,CAAC;AAEpD,QAAI,OAAO;AACV,YAAK,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK;AACvB,YAAK,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK;AACvB,SAAI,CAAC;AACL,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAL,cAAc,CAAC,QAA2B,EAAE,WAAkB;AACvE,QAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AACtC,QAAG,IAAI,CAAC,wBAAwB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;AACxD,QAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;AAEtD,QAAI,IAAI,QAAQ,CAAC,UAAU,EAAE;AAC5B,YAAK,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AAChD,SAAI;AAEL;AACK,QAAD,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;AAElC;AACK;AACK;AACK,QAAX,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,EAAE;AAC/C,YAAK,MAAM,wBAAwB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;AAClE,YAAK,MAAM,WAAW,GAAG,IAAI,8BAA8B,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;AAChG,YAAK,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC7C,SAAI;AAEL,QAAI,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;AACjC,KAAE;AAEH;AACG,IAAO,mBAAmB,CAAC,QAA2B;AACxD,QAAG,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;AACvC,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,MAAM,QAAQ,GACV,IAAI,CAAC,YAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;AAC1E,QAAG,IAAI,OAAoC,CAAC;AAC5C,QAAG,IAAI,OAAO,GAAgC,QAAQ,CAAC,QAAQ,CAAC;AAEjE,QAAI,IAAI,QAAQ,CAAC,QAAQ,KAAK,QAAQ,EAAE;AACvC,YAAK,OAAO,GAAG,QAAQ,CAAC;AACxB,SAAI;AAAE,aAAI,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;AAC7B,YAAK,OAAO,GAAG,QAAQ,CAAC,QAAQ,KAAK,OAAO,GAAG,OAAO,GAAG,MAAM,CAAC;AAChE,SAAI;AAAE,aAAI;AACV,YAAK,OAAO,GAAG,QAAQ,CAAC,QAAQ,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;AAChE,SAAI;AAEL,QAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC7C,YAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,GAAG,GAAG,OAAO,IAAI,OAAO,EAAE,CAAC;AACjE,SAAI;AACJ,KAAE;AAEH;AACG;AAEF;AAAQ;AACG;AAEH;AAAS,IAAR,yBAAyB,CAAC,MAAa,EAAE,QAA2B;AAAK,QAC/E,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC;AACvC,QAAG,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAC/B,QAAG,IAAI,MAAc,EAAE,GAAW,EAAE,MAAc,CAAC;AAEpD,QAAI,IAAI,QAAQ,CAAC,QAAQ,KAAK,KAAK,EAAE;AACpC;AACO,YAAF,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC;AACpB,YAAK,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC;AAC3D,SAAI;AAAE,aAAI,IAAI,QAAQ,CAAC,QAAQ,KAAK,QAAQ,EAAE;AAC9C;AACO;AACO;AACO,YAAhB,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;AACpE,YAAK,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC;AAC9D,SAAI;AAAE,aAAI;AACV;AACO;AACO;AACO;AACO,YAAvB,MAAM,8BAA8B,GAChC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AAExE,YAAM,MAAM,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC;AAE9D,YAAM,MAAM,GAAG,8BAA8B,GAAG,CAAC,CAAC;AACjD,YAAK,GAAG,GAAG,MAAM,CAAC,CAAC,GAAG,8BAA8B,CAAC;AAEtD,YAAM,IAAI,MAAM,GAAG,cAAc,IAAI,CAAC,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;AACpF,gBAAO,GAAG,GAAG,MAAM,CAAC,CAAC,IAAI,cAAc,GAAG,CAAC,CAAC,CAAC;AAC7C,aAAM;AACN,SAAI;AAEL;AACK,QAAD,MAAM,4BAA4B,GAC9B,CAAC,QAAQ,CAAC,QAAQ,KAAK,OAAO,IAAI,CAAC,KAAK;AAC/C,aAAQ,QAAQ,CAAC,QAAQ,KAAK,KAAK,IAAI,KAAK,CAAC,CAAC;AAE/C;AACK,QAAD,MAAM,2BAA2B,GAC7B,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,IAAI,CAAC,KAAK;AAC7C,aAAQ,QAAQ,CAAC,QAAQ,KAAK,OAAO,IAAI,KAAK,CAAC,CAAC;AAEjD,QAAI,IAAI,KAAa,EAAE,IAAY,EAAE,KAAa,CAAC;AAEnD,QAAI,IAAI,2BAA2B,EAAE;AACpC,YAAK,KAAK,GAAG,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;AAC9D,YAAK,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;AAC7C,SAAI;AAAE,aAAI,IAAI,4BAA4B,EAAE;AAC5C,YAAK,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC;AACrB,YAAK,KAAK,GAAG,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC;AACvC,SAAI;AAAE,aAAI;AACV;AACO;AACO;AACO;AACO,YAAvB,MAAM,8BAA8B,GAChC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AACvE,YAAK,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC;AAE5D,YAAM,KAAK,GAAG,8BAA8B,GAAG,CAAC,CAAC;AAChD,YAAK,IAAI,GAAG,MAAM,CAAC,CAAC,GAAG,8BAA8B,CAAC;AAEvD,YAAM,IAAI,KAAK,GAAG,aAAa,IAAI,CAAC,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;AAClF,gBAAO,IAAI,GAAG,MAAM,CAAC,CAAC,IAAI,aAAa,GAAG,CAAC,CAAC,CAAC;AAC7C,aAAM;AACN,SAAI;AAEL,QAAI,OAAO,EAAC,GAAG,EAAE,GAAI,EAAE,IAAI,EAAE,IAAK,EAAE,MAAM,EAAE,MAAO,EAAE,KAAK,EAAE,KAAM,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC;AAClF,KAAE;AAEH;AACG;AACG;AAEF;AAAQ;AACG;AAEH;AAAS,IAAX,qBAAqB,CAAC,MAAa,EAAE,QAA2B;AAAK,QAC3E,MAAM,eAAe,GAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAE7E;AACK;AACK,QAAN,IAAI,CAAC,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;AACvD,YAAK,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;AACjG,YAAK,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;AAC9F,SAAI;AAEL,QAAI,MAAM,MAAM,GAAG,EAAyB,CAAC;AAE7C,QAAI,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;AACjC,YAAK,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC;AACpC,YAAK,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,GAAG,EAAE,CAAC;AAC5E,YAAK,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;AAC3C,SAAI;AAAE,aAAI;AACV,YAAK,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC;AAC9D,YAAK,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;AAE7D,YAAM,MAAM,CAAC,MAAM,GAAG,mBAAmB,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;AACjE,YAAK,MAAM,CAAC,GAAG,GAAG,mBAAmB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;AAC3D,YAAK,MAAM,CAAC,MAAM,GAAG,mBAAmB,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;AACjE,YAAK,MAAM,CAAC,KAAK,GAAG,mBAAmB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AAC/D,YAAK,MAAM,CAAC,IAAI,GAAG,mBAAmB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAC7D,YAAK,MAAM,CAAC,KAAK,GAAG,mBAAmB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AAEhE;AACO,YAAD,IAAI,QAAQ,CAAC,QAAQ,KAAK,QAAQ,EAAE;AACzC,gBAAO,MAAM,CAAC,UAAU,GAAG,QAAQ,CAAC;AACpC,aAAM;AAAE,iBAAI;AACZ,gBAAO,MAAM,CAAC,UAAU,GAAG,QAAQ,CAAC,QAAQ,KAAK,KAAK,GAAG,UAAU,GAAG,YAAY,CAAC;AACnF,aAAM;AAEP,YAAM,IAAI,QAAQ,CAAC,QAAQ,KAAK,QAAQ,EAAE;AACzC,gBAAO,MAAM,CAAC,cAAc,GAAG,QAAQ,CAAC;AACxC,aAAM;AAAE,iBAAI;AACZ,gBAAO,MAAM,CAAC,cAAc,GAAG,QAAQ,CAAC,QAAQ,KAAK,QAAQ,GAAG,UAAU,GAAG,YAAY,CAAC;AAC1F,aAAM;AAEP,YAAM,IAAI,SAAS,EAAE;AACpB,gBAAO,MAAM,CAAC,SAAS,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC;AACzD,aAAM;AAEP,YAAM,IAAI,QAAQ,EAAE;AACnB,gBAAO,MAAM,CAAC,QAAQ,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AACvD,aAAM;AACN,SAAI;AAEL,QAAI,IAAI,CAAC,oBAAoB,GAAG,eAAe,CAAC;AAEhD,QAAI,YAAY,CAAC,IAAI,CAAC,YAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAClD,KAAE;AAEH;AACG,IAAO,uBAAuB;AAChC,QAAG,YAAY,CAAC,IAAI,CAAC,YAAa,CAAC,KAAK,EAAE;AAC1C,YAAK,GAAG,EAAE,GAAG;AACb,YAAK,IAAI,EAAE,GAAG;AACd,YAAK,KAAK,EAAE,GAAG;AACf,YAAK,MAAM,EAAE,GAAG;AAChB,YAAK,MAAM,EAAE,EAAE;AACf,YAAK,KAAK,EAAE,EAAE;AACd,YAAK,UAAU,EAAE,EAAE;AACnB,YAAK,cAAc,EAAE,EAAE;AACvB,SAA2B,CAAC,CAAC;AAC7B,KAAE;AAEH;AACG,IAAO,0BAA0B;AACnC,QAAG,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;AAClC,YAAK,GAAG,EAAE,EAAE;AACZ,YAAK,IAAI,EAAE,EAAE;AACb,YAAK,MAAM,EAAE,EAAE;AACf,YAAK,KAAK,EAAE,EAAE;AACd,YAAK,QAAQ,EAAE,EAAE;AACjB,YAAK,SAAS,EAAE,EAAE;AAClB,SAA2B,CAAC,CAAC;AAC7B,KAAE;AAEH;AACG,IAAO,wBAAwB,CAAC,WAAkB,EAAE,QAA2B;AAAK,QACnF,MAAM,MAAM,GAAG,EAAyB,CAAC;AAC5C,QAAG,MAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AACrD,QAAG,MAAM,qBAAqB,GAAG,IAAI,CAAC,sBAAsB,CAAC;AAC7D,QAAG,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;AAEhD,QAAI,IAAI,gBAAgB,EAAE;AACzB,YAAK,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,CAAC;AAC5E,YAAK,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC,CAAC;AACzF,YAAK,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC,CAAC;AACzF,SAAI;AAAE,aAAI;AACV,YAAK,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;AAChC,SAAI;AAEL;AACK;AACK;AACK;AACK;AACK,QAArB,IAAI,eAAe,GAAG,EAAE,CAAC;AAC5B,QAAG,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAChD,QAAG,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAEjD,QAAI,IAAI,OAAO,EAAE;AAChB,YAAK,eAAe,IAAI,cAAc,OAAO,MAAM,CAAC;AACpD,SAAI;AAEL,QAAI,IAAI,OAAO,EAAE;AAChB,YAAK,eAAe,IAAI,cAAc,OAAO,KAAK,CAAC;AACnD,SAAI;AAEL,QAAI,MAAM,CAAC,SAAS,GAAG,eAAe,CAAC,IAAI,EAAE,CAAC;AAE9C;AACK;AACK;AACK;AACK;AACK,QAArB,IAAI,MAAM,CAAC,SAAS,EAAE;AACzB,YAAK,IAAI,gBAAgB,EAAE;AAC3B,gBAAO,MAAM,CAAC,SAAS,GAAG,mBAAmB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAChE,aAAM;AAAE,iBAAI,IAAI,qBAAqB,EAAE;AACvC,gBAAO,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC;AAC7B,aAAM;AACN,SAAI;AAEL,QAAI,IAAI,MAAM,CAAC,QAAQ,EAAE;AACxB,YAAK,IAAI,gBAAgB,EAAE;AAC3B,gBAAO,MAAM,CAAC,QAAQ,GAAG,mBAAmB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC9D,aAAM;AAAE,iBAAI,IAAI,qBAAqB,EAAE;AACvC,gBAAO,MAAM,CAAC,QAAQ,GAAG,EAAE,CAAC;AAC5B,aAAM;AACN,SAAI;AAEL,QAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAC1C,KAAE;AAEH;AACG,IAAO,iBAAiB,CAAC,QAA2B,EAC3B,WAAkB,EAClB,cAAsC;AACjE;AACK;AACK,QAAP,IAAI,MAAM,GAAG,EAAC,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAwB,CAAC;AAC7D,QAAG,IAAI,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;AAEvF,QAAI,IAAI,IAAI,CAAC,SAAS,EAAE;AACvB,YAAK,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;AAC/F,SAAI;AAEL,QAAI,IAAI,qBAAqB,GACrB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC,qBAAqB,EAAE,CAAC,GAAG,CAAC;AAEjF;AACK;AACK;AACK;AACK,QAAhB,YAAY,CAAC,CAAC,IAAI,qBAAqB,CAAC;AAE5C;AACK;AACK,QAAN,IAAI,QAAQ,CAAC,QAAQ,KAAK,QAAQ,EAAE;AACvC;AACO;AACO,YAAT,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,eAAgB,CAAC,YAAY,CAAC;AACzE,YAAK,MAAM,CAAC,MAAM,GAAG,GAAG,cAAc,IAAI,YAAY,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC;AACzF,SAAI;AAAE,aAAI;AACV,YAAK,MAAM,CAAC,GAAG,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AACtD,SAAI;AAEL,QAAI,OAAO,MAAM,CAAC;AACjB,KAAE;AAEH;AACG,IAAO,iBAAiB,CAAC,QAA2B,EAC3B,WAAkB,EAClB,cAAsC;AACjE;AACK;AACK,QAAP,IAAI,MAAM,GAAG,EAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAwB,CAAC;AAC7D,QAAG,IAAI,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;AAEvF,QAAI,IAAI,IAAI,CAAC,SAAS,EAAE;AACvB,YAAK,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;AAC/F,SAAI;AAEL;AACK;AACK;AACK;AACK,QAAhB,IAAI,uBAAyC,CAAC;AAElD,QAAI,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE;AACtB,YAAK,uBAAuB,GAAG,QAAQ,CAAC,QAAQ,KAAK,KAAK,GAAG,MAAM,GAAG,OAAO,CAAC;AAC9E,SAAI;AAAE,aAAI;AACV,YAAK,uBAAuB,GAAG,QAAQ,CAAC,QAAQ,KAAK,KAAK,GAAG,OAAO,GAAG,MAAM,CAAC;AAC9E,SAAI;AAEL;AACK;AACK,QAAN,IAAI,uBAAuB,KAAK,OAAO,EAAE;AAC5C,YAAK,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,eAAgB,CAAC,WAAW,CAAC;AACvE,YAAK,MAAM,CAAC,KAAK,GAAG,GAAG,aAAa,IAAI,YAAY,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;AACtF,SAAI;AAAE,aAAI;AACV,YAAK,MAAM,CAAC,IAAI,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AACvD,SAAI;AAEL,QAAI,OAAO,MAAM,CAAC;AACjB,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAF,oBAAoB;AAAM;AACiB,QACjD,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC9C,QAAG,MAAM,aAAa,GAAI,IAAI,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC;AAE9D;AACK;AACK;AACK,QAAX,MAAM,qBAAqB,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU;AACjE,YAAK,OAAO,UAAU,CAAC,aAAa,EAAE,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;AAC7E,SAAI,CAAC,CAAC;AAEP,QAAI,OAAO;AACV,YAAK,eAAe,EAAE,2BAA2B,CAAC,YAAY,EAAE,qBAAqB,CAAC;AACtF,YAAK,mBAAmB,EAAE,4BAA4B,CAAC,YAAY,EAAE,qBAAqB,CAAC;AAC3F,YAAK,gBAAgB,EAAE,2BAA2B,CAAC,aAAa,EAAE,qBAAqB,CAAC;AACxF,YAAK,oBAAoB,EAAE,4BAA4B,CAAC,aAAa,EAAE,qBAAqB,CAAC;AAC7F,SAAI,CAAC;AACL,KAAE;AAEH;AACG,IAAO,kBAAkB,CAAC,MAAc,EAAE,GAAG,SAAmB;AAAK,QACpE,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,YAAoB,EAAE,eAAuB;AACzE,YAAK,OAAO,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;AACxD,SAAI,EAAE,MAAM,CAAC,CAAC;AACd,KAAE;AAEH;AACG,IAAO,wBAAwB;AAAM;AAC+C;AACO;AAE1F;AACK;AACK,QAAV,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,eAAgB,CAAC,WAAW,CAAC;AAC7D,QAAG,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,eAAgB,CAAC,YAAY,CAAC;AAC/D,QAAG,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,yBAAyB,EAAE,CAAC;AAE3E,QAAI,OAAO;AACV,YAAK,GAAG,EAAK,cAAc,CAAC,GAAG,GAAG,IAAI,CAAC,eAAe;AACtD,YAAK,IAAI,EAAI,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe;AACvD,YAAK,KAAK,EAAG,cAAc,CAAC,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,eAAe;AAC/D,YAAK,MAAM,EAAE,cAAc,CAAC,GAAG,GAAG,MAAM,GAAG,IAAI,CAAC,eAAe;AAC/D,YAAK,KAAK,EAAG,KAAK,IAAK,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;AAChD,YAAK,MAAM,EAAE,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;AAChD,SAAI,CAAC;AACL,KAAE;AAEH;AACG,IAAO,MAAM;AACf,QAAG,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,KAAK,KAAK,CAAC;AACpD,KAAE;AAEH;AACG,IAAO,iBAAiB;AAC1B,QAAG,OAAO,CAAC,IAAI,CAAC,sBAAsB,IAAI,IAAI,CAAC,SAAS,CAAC;AACzD,KAAE;AAEH;AACG,IAAO,UAAU,CAAC,QAA2B,EAAE,IAAe;AAChE,QAAG,IAAI,IAAI,KAAK,GAAG,EAAE;AACrB;AACO;AACO,YAAT,OAAO,QAAQ,CAAC,OAAO,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC;AACxE,SAAI;AAEL,QAAI,OAAO,QAAQ,CAAC,OAAO,IAAI,IAAI,GAAG,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC;AACtE,KAAE;AAEH;AACG,IAAO,kBAAkB;AAAM,QAC9B,IAAI,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,EAAE;AACtD,YAAK,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE;AAC3C,gBAAO,MAAM,KAAK,CAAC,uEAAuE,CAAC,CAAC;AAC5F,aAAM;AAEP;AACO;AACO,YAAR,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI;AAC1C,gBAAO,0BAA0B,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3D,gBAAO,wBAAwB,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;AACzD,gBAAO,0BAA0B,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC7D,gBAAO,wBAAwB,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC3D,aAAM,CAAC,CAAC;AACR,SAAI;AACJ,KAAE;AAEH;AACG,IAAO,gBAAgB,CAAC,UAA6B;AACvD,QAAG,IAAI,IAAI,CAAC,KAAK,EAAE;AACnB,YAAK,WAAW,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,QAAQ;AAC7C,gBAAO,IAAI,QAAQ,KAAK,EAAE,IAAI,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;AAClF,oBAAS,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAClD,oBAAS,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC5C,iBAAQ;AACR,aAAM,CAAC,CAAC;AACR,SAAI;AACJ,KAAE;AAEH;AACG,IAAO,kBAAkB;AAC3B,QAAG,IAAI,IAAI,CAAC,KAAK,EAAE;AACnB,YAAK,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,QAAQ;AAC/C,gBAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC7C,aAAM,CAAC,CAAC;AACR,YAAK,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;AACpC,SAAI;AACJ,KAAE;AAEH;AACG,IAAO,cAAc;AAAM,QAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;AAEhC,QAAI,IAAI,MAAM,YAAY,UAAU,EAAE;AACrC,YAAK,OAAO,MAAM,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;AACzD,SAAI;AAEL;AACK,QAAD,IAAI,MAAM,YAAY,OAAO,EAAE;AAClC,YAAK,OAAO,MAAM,CAAC,qBAAqB,EAAE,CAAC;AAC3C,SAAI;AAEL,QAAI,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC;AACnC,QAAG,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC;AAEtC;AACK,QAAD,OAAO;AACV,YAAK,GAAG,EAAE,MAAM,CAAC,CAAC;AAClB,YAAK,MAAM,EAAE,MAAM,CAAC,CAAC,GAAG,MAAM;AAC9B,YAAK,IAAI,EAAE,MAAM,CAAC,CAAC;AACnB,YAAK,KAAK,EAAE,MAAM,CAAC,CAAC,GAAG,KAAK;AAC5B,YAAK,MAAM;AACX,YAAK,KAAK;AACV,SAAI,CAAC;AACL,KAAE;AACF,CAAA;AAED;AA+DA,SAAS,YAAY,CAAC,WAAgC,EAChC,MAA2B;AAAK,IACpD,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;AACzB,QAAG,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AACnC,YAAK,WAAW,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;AACpC,SAAI;AACJ,KAAE;AAEH,IAAE,OAAO,WAAW,CAAC;AACpB,CAAA;AAED;AAEA;AACC;AACC;AACF,SAAS,aAAa,CAAC,KAAmC;AAAK,IAC7D,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,IAAI,IAAI,EAAE;AACjD,QAAG,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;AACtD,QAAG,OAAO,CAAC,CAAC,KAAK,IAAI,KAAK,KAAK,IAAI,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;AAChE,KAAE;AAEH,IAAE,OAAO,KAAK,IAAI,IAAI,CAAC;AACtB,CAAA;AAED;AACC;AACC;AACC;AACC;AAEH;AAAD,SAAS,4BAA4B,CAAC,UAAsB;AAAK,IAC/D,OAAO;AACR,QAAG,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC;AAClC,QAAG,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC;AACtC,QAAG,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC;AACxC,QAAG,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC;AACpC,QAAG,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC;AACtC,QAAG,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC;AACxC,KAAE,CAAC;AACH,CAAA;AACA;AC5tCD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAkBD;AACC;AACC;AACC;AACC;AACC;AACC;AACC;AAEH;AAAJ,MAAa,yBAAyB;AAAI,IAkBxC,YACI,SAAmC,EAAE,UAAqC,EAC1E,WAAoC,EAAE,aAA4B,EAAE,QAAkB,EACtF,QAAkB,EAAE,gBAAkC;AAC3D;AAAmF,QATlF,wBAAmB,GAA6B,EAAE,CAAC;AAErD;AACmC;AAGI;AACO;AAAwC,QAMlF,IAAI,CAAC,iBAAiB,GAAG,IAAI,iCAAiC,CACjC,WAAW,EAAE,aAAa,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,CAAC;AACjG,aAAiC,sBAAsB,CAAC,KAAK,CAAC;AAC9D,aAAiC,QAAQ,CAAC,KAAK,CAAC;AAChD,aAAiC,kBAAkB,CAAC,CAAC,CAAC,CAAC;AAExD,QAAI,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AACpD,QAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC;AAClE,KAAE;AAEH;AACG,IAAD,IAAI,SAAS;AAAM,QACjB,OAAO,IAAI,CAAC,mBAAmB,CAAC;AACnC,KAAE;AAEH;AACG,IAAD,MAAM,CAAC,UAA4B;AAAK,QACtC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;AACjC,QAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAE9C,QAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACxB,YAAK,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC9C,YAAK,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAC5B,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,OAAO;AACR,QAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;AACpC,KAAE;AAEH;AACG,IAAD,MAAM;AACP,QAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC;AACnC,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAb,KAAK;AAAM,QACT,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;AAClC,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAb,uBAAuB;AAAM,QAC3B,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;AAChD,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAb,wBAAwB,CAAC,WAA4B;AACtD,QAAG,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC;AAChE,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAb,oBAAoB,CAChB,SAAmC,EACnC,UAAqC,EACrC,OAAgB,EAChB,OAAgB;AAAK,QAEvB,MAAM,QAAQ,GAAG,IAAI,sBAAsB,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACxF,QAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC3C,QAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAClE,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,aAAa,CAAC,GAAkB;AAAK;AAEvC;AACK;AACK,QAAN,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,YAAK,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;AACxC,SAAI;AAAE,aAAI;AACV,YAAK,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;AAC3B,SAAI;AAEL,QAAI,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,WAAW,CAAC,MAAc;AAAK,QAC7B,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;AACrD,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,WAAW,CAAC,MAAc;AAAK,QAC7B,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;AACrD,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAhB,kBAAkB,CAAC,QAAiB;AAAK,QACvC,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;AACvD,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,aAAa,CAAC,SAAmC;AAAK,QACpD,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;AAChD,QAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAClE,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,SAAS,CAAC,MAAkB;AAAK,QAC/B,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AAC5C,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AACF,CAAA;AACA;AC9MD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAAK;AAIN,MAAM,YAAY,GAAG,4BAA4B,CAAC;AAElD;AACC;AACC;AACC;AACC;AAEH;AAAD,MAAa,sBAAsB;AAAI,IAAvC;AAAiB,QAGP,iBAAY,GAAW,QAAQ,CAAC;AACzC,QAAS,eAAU,GAAW,EAAE,CAAC;AACjC,QAAS,kBAAa,GAAW,EAAE,CAAC;AACpC,QAAS,gBAAW,GAAW,EAAE,CAAC;AAClC,QAAS,iBAAY,GAAW,EAAE,CAAC;AACnC,QAAS,gBAAW,GAAW,EAAE,CAAC;AAClC,QAAS,oBAAe,GAAW,EAAE,CAAC;AACtC,QAAS,WAAM,GAAW,EAAE,CAAC;AAC7B,QAAS,YAAO,GAAW,EAAE,CAAC;AAC9B,KA2LA;AACA,IA1LC,MAAM,CAAC,UAA4B;AAAK,QACtC,MAAM,MAAM,GAAG,UAAU,CAAC,SAAS,EAAE,CAAC;AAE1C,QAAI,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;AAElC,QAAI,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;AACrC,YAAK,UAAU,CAAC,UAAU,CAAC,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,EAAC,CAAC,CAAC;AACjD,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;AACvC,YAAK,UAAU,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC;AACnD,SAAI;AAEL,QAAI,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AACtD,QAAG,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AAC5B,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,GAAG,CAAC,QAAgB,EAAE;AAAK,QACzB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;AAC3B,QAAG,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;AAC3B,QAAG,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;AACnC,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,IAAI,CAAC,QAAgB,EAAE;AAAK,QAC1B,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;AAC1B,QAAG,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AAC5B,QAAG,IAAI,CAAC,eAAe,GAAG,YAAY,CAAC;AACvC,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,MAAM,CAAC,QAAgB,EAAE;AAAK,QAC5B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AACxB,QAAG,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;AAC9B,QAAG,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;AACjC,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,KAAK,CAAC,QAAgB,EAAE;AAAK,QAC3B,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACzB,QAAG,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAC7B,QAAG,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;AACrC,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAhB,KAAK,CAAC,QAAgB,EAAE;AAAK,QAC3B,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,YAAK,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;AACjD,SAAI;AAAE,aAAI;AACV,YAAK,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACzB,SAAI;AAEL,QAAI,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AACG;AACG;AAEH;AAAS,IAAhB,MAAM,CAAC,QAAgB,EAAE;AAAK,QAC5B,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,YAAK,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;AAClD,SAAI;AAAE,aAAI;AACV,YAAK,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AAC1B,SAAI;AAEL,QAAI,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEF;AAAQ;AAEH;AAAS,IAAhB,kBAAkB,CAAC,SAAiB,EAAE;AAAK,QACzC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACrB,QAAG,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;AACnC,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEF;AAAQ;AAEH;AAAS,IAAhB,gBAAgB,CAAC,SAAiB,EAAE;AAAK,QACvC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACpB,QAAG,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;AAC/B,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,KAAK;AAAM;AAEb;AACK;AACK,QAAN,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE;AAC7D,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC;AACxD,QAAG,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC;AAC3D,QAAG,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC;AAC/C,QAAG,MAAM,EAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAC,GAAG,MAAM,CAAC;AACvD,QAAG,MAAM,yBAAyB,GAAG,CAAC,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,OAAO;AAC3E,aAAsC,CAAC,QAAQ,IAAI,QAAQ,KAAK,MAAM,IAAI,QAAQ,KAAK,OAAO,CAAC,CAAC;AAChG,QAAG,MAAM,uBAAuB,GAAG,CAAC,MAAM,KAAK,MAAM,IAAI,MAAM,KAAK,OAAO;AAC3E,aAAoC,CAAC,SAAS,IAAI,SAAS,KAAK,MAAM,IAAI,SAAS,KAAK,OAAO,CAAC,CAAC;AAElG,QAAI,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;AACvC,QAAG,MAAM,CAAC,UAAU,GAAG,yBAAyB,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC;AAC1E,QAAG,MAAM,CAAC,SAAS,GAAG,uBAAuB,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;AACtE,QAAG,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;AAC5C,QAAG,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;AAE3C,QAAI,IAAI,yBAAyB,EAAE;AAClC,YAAK,YAAY,CAAC,cAAc,GAAG,YAAY,CAAC;AAChD,SAAI;AAAE,aAAI,IAAI,IAAI,CAAC,eAAe,KAAK,QAAQ,EAAE;AACjD,YAAK,YAAY,CAAC,cAAc,GAAG,QAAQ,CAAC;AAC5C,SAAI;AAAE,aAAI,IAAI,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,SAAS,KAAK,KAAK,EAAE;AAChE;AACO;AACO;AACO;AACO,YAAvB,IAAI,IAAI,CAAC,eAAe,KAAK,YAAY,EAAE;AAChD,gBAAO,YAAY,CAAC,cAAc,GAAG,UAAU,CAAC;AAChD,aAAM;AAAE,iBAAI,IAAI,IAAI,CAAC,eAAe,KAAK,UAAU,EAAE;AACrD,gBAAO,YAAY,CAAC,cAAc,GAAG,YAAY,CAAC;AAClD,aAAM;AACN,SAAI;AAAE,aAAI;AACV,YAAK,YAAY,CAAC,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC;AACxD,SAAI;AAEL,QAAI,YAAY,CAAC,UAAU,GAAG,uBAAuB,GAAG,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;AACvF,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,OAAO;AAAM,QACX,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;AAC9C,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC;AACxD,QAAG,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;AAC/C,QAAG,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC;AAEtC,QAAI,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AACzC,QAAG,YAAY,CAAC,cAAc,GAAG,YAAY,CAAC,UAAU,GAAG,MAAM,CAAC,SAAS;AAC3E,YAAK,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,QAAQ,GAAG,EAAE,CAAC;AAE1F,QAAI,IAAI,CAAC,WAAW,GAAG,IAAK,CAAC;AAC5B,QAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAC3B,KAAE;AACF,CAAA;AACA;AC5ND;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAgBD;AAEA,MAAa,sBAAsB;AAClC,IAAC,YACY,cAA6B,EAA4B,SAAc,EACvE,SAAmB,EAAU,iBAAmC;AAC9E,QAFc,mBAAc,GAAd,cAAc,CAAe;AAAE,QAA0B,cAAS,GAAT,SAAS,CAAK;AACrF,QAAc,cAAS,GAAT,SAAS,CAAU;AAAE,QAAQ,sBAAiB,GAAjB,iBAAiB,CAAkB;AAAE,KAAE;AAElF;AACG;AAEH;AAAS,IAAP,MAAM;AAAM,QACV,OAAO,IAAI,sBAAsB,EAAE,CAAC;AACvC,KAAE;AAEH;AACG;AACG;AACG;AACG;AACG;AACG;AAGlB;AAAS,IADP,WAAW,CACP,UAAsB,EACtB,SAAmC,EACnC,UAAqC;AAAK,QAC5C,OAAO,IAAI,yBAAyB,CAChC,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EACtF,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAC/B,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,mBAAmB,CAAC,MAA+C;AACnE,QACE,OAAO,IAAI,iCAAiC,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,EACpF,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAC/C,KAAE;AAEH;8PAAC;AACA,iSAxCK;AAAE;EADP,UAAU,SAAC,EAAC,vBAGT,YAnBI,aAAa;GAgBE,EAAE,MAAM,EAAC,bAhBN,4CAmBoB,MAAM,SAAC,QAAQ;AAAU,YApB/D,QAAQ;AAAK,YAKb,gBAAgB;AAAI;;;;;;;yFAAE;AAAE;ACbhC;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAoBD;AACA,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB;AACC;AAEA;AACC;AACC;AACC;AACC;AAEF;AAAI;AAEH;AACJ,MAAa,OAAO;AACnB,IAEC;AACD;AAA4E,IACxD,gBAAuC,EACtC,iBAAmC,EACnC,yBAAmD,EACnD,gBAAwC,EACxC,mBAA8C,EAC9C,SAAmB,EACnB,OAAe,EACG,SAAc,EAChC,eAA+B,EAC/B,SAAmB,EACnB,uBAAsD;AAAK,QAV5D,qBAAgB,GAAhB,gBAAgB,CAAuB;AAC5D,QAAsB,sBAAiB,GAAjB,iBAAiB,CAAkB;AACzD,QAAsB,8BAAyB,GAAzB,yBAAyB,CAA0B;AACzE,QAAsB,qBAAgB,GAAhB,gBAAgB,CAAwB;AAC9D,QAAsB,wBAAmB,GAAnB,mBAAmB,CAA2B;AACpE,QAAsB,cAAS,GAAT,SAAS,CAAU;AACzC,QAAsB,YAAO,GAAP,OAAO,CAAQ;AACrC,QAAwC,cAAS,GAAT,SAAS,CAAK;AACtD,QAAsB,oBAAe,GAAf,eAAe,CAAgB;AACrD,QAAsB,cAAS,GAAT,SAAS,CAAU;AACzC,QAAsB,4BAAuB,GAAvB,uBAAuB,CAA+B;AAAE,KAAG;AAEjF;AACG;AACG;AACG;AAEH;AAAS,IAAb,MAAM,CAAC,MAAsB;AAAK,QAChC,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1C,QAAG,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;AAC9C,QAAG,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;AACvD,QAAG,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC;AAEpD,QAAI,aAAa,CAAC,SAAS,GAAG,aAAa,CAAC,SAAS,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;AAEpF,QAAI,OAAO,IAAI,UAAU,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC,OAAO,EACzE,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;AAC7F,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAb,QAAQ;AAAM,QACZ,OAAO,IAAI,CAAC,gBAAgB,CAAC;AAChC,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAF,kBAAkB,CAAC,IAAiB;AAAK,QAC/C,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AAErD,QAAI,IAAI,CAAC,EAAE,GAAG,eAAe,YAAY,EAAE,EAAE,CAAC;AAC7C,QAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAC1C,QAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAE3B,QAAI,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAL,kBAAkB;AAAM,QAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;AACpD,QAAG,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAClE,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAL,mBAAmB,CAAC,IAAiB;AAAK;AACa;AACN,QACvD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AACtB,YAAK,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAiB,cAAc,CAAC,CAAC;AACvE,SAAI;AAEL,QAAI,OAAO,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,yBAAyB,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAClE,IAAI,CAAC,SAAS,CAAC,CAAC;AAC9C,KAAE;AACF;qCApFA,UAAU;qFACR;AAAE;AACW,YAnBR,qBAAqB;AAAK,YAH1B,gBAAgB;AAAK,YAT3B,wBAAwB;AACvB,YAUK,sBAAsB;AAAK,YAL3B,yBAAyB;AAAK,YAHpC,QAAQ;AACP,YAAD,MAAM;AACL,4CAqCY,MAAM,SAAC,QAAQ;AAAU,YA/ChC,cAAc;AAAK,YAET,QAAQ;AAAK,YAUvB,6BAA6B;AAAI;;;;;;uIAAE;AAAE;ACpB7C;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAmCD;AACA,MAAM,mBAAmB,GAAwB;AAChD,IAAC;AACD,QAAG,OAAO,EAAE,OAAO;AACnB,QAAG,OAAO,EAAE,QAAQ;AACpB,QAAG,QAAQ,EAAE,OAAO;AACpB,QAAG,QAAQ,EAAE,KAAK;AAClB,KAAE;AACF,IAAC;AACD,QAAG,OAAO,EAAE,OAAO;AACnB,QAAG,OAAO,EAAE,KAAK;AACjB,QAAG,QAAQ,EAAE,OAAO;AACpB,QAAG,QAAQ,EAAE,QAAQ;AACrB,KAAE;AACF,IAAC;AACD,QAAG,OAAO,EAAE,KAAK;AACjB,QAAG,OAAO,EAAE,KAAK;AACjB,QAAG,QAAQ,EAAE,KAAK;AAClB,QAAG,QAAQ,EAAE,QAAQ;AACrB,KAAE;AACF,IAAC;AACD,QAAG,OAAO,EAAE,KAAK;AACjB,QAAG,OAAO,EAAE,QAAQ;AACpB,QAAG,QAAQ,EAAE,KAAK;AAClB,QAAG,QAAQ,EAAE,KAAK;AAClB,KAAE;AACF,CAAA,CAAC;AAEF;AACA,MAAa,qCAAqC,GAC9C,IAAI,cAAc,CAAuB,uCAAuC,CAAC,CAAC;AAEtF;AACC;AACC;AACC;AAKH,MAAa,gBAAgB;AAC5B,IAAC;AACD;AACD,IAAa,UAAsB;AAAK,QAA3B,eAAU,GAAV,UAAU,CAAY;AAAE,KAAG;AACvC;8CARA,SAAS,SAAC,mBACT,QAAQ,EAAE;MAA4D,mBACtE,QAAQ,EAAE,kBAAkB,gBAC7B,+IACK;AAAE;AAEJ,YAvEF,UAAU;AACV;;;;;;;2EAAE;AAAE;AAAK;AAKX;AAIG;AA0EH,MAAa,mBAAmB;AAAI;AAE5B,IAiIN,YACY,QAAiB,EACzB,WAA6B,EAC7B,gBAAkC,EACa,qBAA0B,EACrD,IAAoB;AAC7C,QALa,aAAQ,GAAR,QAAQ,CAAS;AAC/B,QAG0B,SAAI,GAAJ,IAAI,CAAgB;AAAE,QArItC,iBAAY,GAAG,KAAK,CAAC;AAC9B,QAAS,kBAAa,GAAG,KAAK,CAAC;AAC/B,QAAS,mBAAc,GAAG,KAAK,CAAC;AAChC,QAAS,wBAAmB,GAAG,KAAK,CAAC;AACrC,QAAS,UAAK,GAAG,KAAK,CAAC;AACvB,QAAS,0BAAqB,GAAG,YAAY,CAAC,KAAK,CAAC;AACpD,QAAS,wBAAmB,GAAG,YAAY,CAAC,KAAK,CAAC;AAClD,QAAS,wBAAmB,GAAG,YAAY,CAAC,KAAK,CAAC;AAClD,QAAS,0BAAqB,GAAG,YAAY,CAAC,KAAK,CAAC;AACpD;AAEW,QAwDkC,mBAAc,GAAW,CAAC,CAAC;AAEzE;AAA6C,QAIT,SAAI,GAAY,KAAK,CAAC;AAE1D;AACO,QAAqC,iBAAY,GAAY,KAAK,CAAC;AAE1E;AACG,QA8BS,kBAAa,GAAG,IAAI,YAAY,EAAc,CAAC;AAE3D;AACO,QAAK,mBAAc,GAAG,IAAI,YAAY,EAAkC,CAAC;AAEhF;AACO,QAAK,WAAM,GAAG,IAAI,YAAY,EAAQ,CAAC;AAE9C;AACO,QAAK,WAAM,GAAG,IAAI,YAAY,EAAQ,CAAC;AAE9C;AACO,QAAK,mBAAc,GAAG,IAAI,YAAY,EAAiB,CAAC;AAE/D;AACO,QAAK,wBAAmB,GAAG,IAAI,YAAY,EAAc,CAAC;AAEjE,QAQI,IAAI,CAAC,eAAe,GAAG,IAAI,cAAc,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;AAC5E,QAAG,IAAI,CAAC,sBAAsB,GAAG,qBAAqB,CAAC;AACvD,QAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;AACvD,KAAE;AAEH;AAEI,IAlHF,IACI,OAAO,KAAa,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;AAChD,IAAC,IAAI,OAAO,CAAC,OAAe;AAC5B,QAAG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;AAE5B,QAAI,IAAI,IAAI,CAAC,SAAS,EAAE;AACvB,YAAK,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClD,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,IACI,OAAO,KAAK,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE;AACxC,IAAC,IAAI,OAAO,CAAC,OAAe;AAC5B,QAAG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;AAE5B,QAAI,IAAI,IAAI,CAAC,SAAS,EAAE;AACvB,YAAK,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClD,SAAI;AACJ,KAAE;AAEH;AACwB,IAiCtB,IACI,WAAW,KAAK,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE;AAChD,IAAC,IAAI,WAAW,CAAC,KAAU,IAAI,IAAI,CAAC,YAAY,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;AAEnF;AACG,IAAD,IACI,YAAY,KAAK,OAAO,IAAI,CAAC,aAAa,CAAC,EAAE;AAClD,IAAC,IAAI,YAAY,CAAC,KAAU,IAAI,IAAI,CAAC,aAAa,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;AAErF;AACG,IAAD,IACI,kBAAkB,KAAK,OAAO,IAAI,CAAC,mBAAmB,CAAC,EAAE;AAC9D,IAAC,IAAI,kBAAkB,CAAC,KAAc;AACtC,QAAG,IAAI,CAAC,mBAAmB,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;AAC3D,KAAE;AAEH;AACG,IAAD,IACI,aAAa,KAAK,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE;AACpD,IAAC,IAAI,aAAa,CAAC,KAAc,IAAI,IAAI,CAAC,cAAc,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;AAE3F;AACG,IAAD,IACI,IAAI,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE;AAClC,IAAC,IAAI,IAAI,CAAC,KAAc,IAAI,IAAI,CAAC,KAAK,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;AAEzE;AAA8C,IAgC5C,IAAI,UAAU;AAAM,QAClB,OAAO,IAAI,CAAC,WAAW,CAAC;AAC3B,KAAE;AAEH;AACG,IAAD,IAAI,GAAG;AAAM,QACX,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AAC9C,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;AAC1C,QAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;AAC1C,QAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;AAC5C,QAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;AAE7C,QAAI,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,YAAK,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;AAChC,SAAI;AACJ,KAAE;AAEH,IAAE,WAAW,CAAC,OAAsB;AACnC,QAAG,IAAI,IAAI,CAAC,SAAS,EAAE;AACvB,YAAK,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAClD,YAAK,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;AACjC,gBAAO,KAAK,EAAE,IAAI,CAAC,KAAK;AACxB,gBAAO,QAAQ,EAAE,IAAI,CAAC,QAAQ;AAC9B,gBAAO,MAAM,EAAE,IAAI,CAAC,MAAM;AAC1B,gBAAO,SAAS,EAAE,IAAI,CAAC,SAAS;AAChC,aAAM,CAAC,CAAC;AAET,YAAM,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;AACzC,gBAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;AAC9B,aAAM;AACN,SAAI;AAEL,QAAI,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;AACxB,YAAK,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAC/D,SAAI;AACJ,KAAE;AAEH;AACG,IAAO,cAAc;AACvB,QAAG,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;AAClD,YAAK,IAAI,CAAC,SAAS,GAAG,mBAAmB,CAAC;AAC1C,SAAI;AAEL,QAAI,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;AACnF,QAAG,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3F,QAAG,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3F,QAAG,UAAU,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,CAAC,KAAoB;AAC7D,YAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAEtC,YAAM,IAAI,KAAK,CAAC,OAAO,KAAK,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;AACnF,gBAAO,KAAK,CAAC,cAAc,EAAE,CAAC;AAC9B,gBAAO,IAAI,CAAC,cAAc,EAAE,CAAC;AAC7B,aAAM;AACN,SAAI,CAAC,CAAC;AAEP,QAAI,IAAI,CAAC,WAAW,CAAC,oBAAoB,EAAE,CAAC,SAAS,CAAC,CAAC,KAAiB;AACvE,YAAK,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1C,SAAI,CAAC,CAAC;AACN,KAAE;AAEH;AACG,IAAO,YAAY;AAAM,QACxB,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS;AAC1C,YAAK,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;AAC7D,QAAG,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC;AAC3C,YAAK,SAAS,EAAE,IAAI,CAAC,IAAI;AACzB,YAAK,gBAAgB;AACrB,YAAK,cAAc,EAAE,IAAI,CAAC,cAAc;AACxC,YAAK,WAAW,EAAE,IAAI,CAAC,WAAW;AAClC,SAAI,CAAC,CAAC;AAEP,QAAI,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;AACvC,YAAK,aAAa,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACtC,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AACzC,YAAK,aAAa,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AACxC,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,EAAE;AAC7C,YAAK,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;AAC5C,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,CAAC,EAAE;AAC/C,YAAK,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;AAC9C,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,aAAa,EAAE;AAC3B,YAAK,aAAa,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;AACtD,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACxB,YAAK,aAAa,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AAChD,SAAI;AAEL,QAAI,OAAO,aAAa,CAAC;AACxB,KAAE;AAEH;AACG,IAAO,uBAAuB,CAAC,gBAAmD;AACpF,QAAG,MAAM,SAAS,GAAwB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,KAAK;AACjF,YAAK,OAAO,EAAE,eAAe,CAAC,OAAO;AACrC,YAAK,OAAO,EAAE,eAAe,CAAC,OAAO;AACrC,YAAK,QAAQ,EAAE,eAAe,CAAC,QAAQ;AACvC,YAAK,QAAQ,EAAE,eAAe,CAAC,QAAQ;AACvC,YAAK,OAAO,EAAE,eAAe,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO;AACrD,YAAK,OAAO,EAAE,eAAe,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO;AACrD,YAAK,UAAU,EAAE,eAAe,CAAC,UAAU,IAAI,SAAS;AACxD,SAAI,CAAC,CAAC,CAAC;AAER,QAAI,OAAO,gBAAgB;AAC1B,aAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;AACvC,aAAM,aAAa,CAAC,SAAS,CAAC;AAC9B,aAAM,sBAAsB,CAAC,IAAI,CAAC,kBAAkB,CAAC;AACrD,aAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;AACzB,aAAM,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC;AAC3C,aAAM,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC;AAC7C,aAAM,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC;AAC3C,aAAM,qBAAqB,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;AAC1D,KAAE;AAEH;AACG,IAAO,uBAAuB;AAAM,QACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AACzF,QAAG,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;AAC1C,QAAG,OAAO,QAAQ,CAAC;AACnB,KAAE;AAEH;AACG,IAAO,cAAc;AACvB,QAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;AAC1B,YAAK,IAAI,CAAC,cAAc,EAAE,CAAC;AAC3B,SAAI;AAAE,aAAI;AACV;AACO,YAAF,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;AACjE,SAAI;AAEL,QAAI,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE;AACxC,YAAK,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AACnD,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,YAAK,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,KAAK;AAClF,gBAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACtC,aAAM,CAAC,CAAC;AACR,SAAI;AAAE,aAAI;AACV,YAAK,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;AAC9C,SAAI;AAEL,QAAI,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;AAE7C;AACK;AACK,QAAN,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;AACjD,YAAK,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe;AAChE,iBAAQ,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACvE,iBAAQ,SAAS,CAAC,QAAQ;AAC1B,gBAAS,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAE7C,gBAAU,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;AACzD,oBAAW,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;AACpD,iBAAU;AACV,aAAQ,CAAC,CAAC;AACV,SAAI;AACJ,KAAE;AAEH;AACG,IAAO,cAAc;AACvB,QAAG,IAAI,IAAI,CAAC,WAAW,EAAE;AACzB,YAAK,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;AAC/B,SAAI;AAEL,QAAI,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;AAC5C,QAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;AAC5C,KAAE;AAEH;iDAtUC,SAAS,SAAC,mBACT,QAAQ,EAAE,qEAAqE,mBAC/E,QAAQ,EAAE,qBAAqB,eAChC;wvDACK;AAAE;AAA8C,YArE9C,OAAO;AAAK,YALlB,WAAW;AACV,YAAD,gBAAgB;AACf,4CA+MI,MAAM,SAAC,qCAAqC;AAAU,YAjO1C,cAAc,uBAkO1B,QAAQ;AAAO;AAAI;AACV,qBAvHb,KAAK,SAAC,2BAA2B;AAAQ,wBAGzC,KAAK,SAAC,8BAA8B;AAAQ,+BAM5C,KAAK,SAAC,qCAAqC;AAAQ,sBAGnD,KAAK,SAAC,4BAA4B;AAC/B,sBAUH,KAAK,SAAC,4BAA4B;AAC/B,oBAUH,KAAK,SAAC,0BAA0B;AAAQ,qBAGxC,KAAK,SAAC,2BAA2B;AAAQ,uBAGzC,KAAK,SAAC,6BAA6B;AAAQ,wBAG3C,KAAK,SAAC,8BAA8B;AAAQ,4BAG5C,KAAK,SAAC,kCAAkC;AAAQ,yBAGhD,KAAK,SAAC,+BAA+B;AAAQ,6BAG7C,KAAK,SAAC,mCAAmC;AAAQ,6BAGjD,KAAK,SAAC,mCAAmC;AAAQ,mBAGjD,KAAK,SAAC,yBAAyB;AAAQ,2BAGvC,KAAK,SAAC,iCAAiC;AAAQ,sCAG/C,KAAK,SAAC,sCAAsC;AAAQ,0BAGpD,KAAK,SAAC,gCAAgC;AACnC,2BAIH,KAAK,SAAC,iCAAiC;AACpC,iCAIH,KAAK,SAAC,uCAAuC;AAC1C,4BAMH,KAAK,SAAC,kCAAkC;AACrC,mBAIH,KAAK,SAAC,yBAAyB;AAC5B,4BAIH,MAAM;AAAM,6BAGZ,MAAM;AAAM,qBAGZ,MAAM;AAAM,qBAGZ,MAAM;AAAM,6BAGZ,MAAM;AAAM,kCAGZ,MAAM;AAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAE;AA4MlB,SAAgB,sDAAsD,CAAC,OAAgB;AACrF,IACA,OAAO,MAAM,OAAO,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC;AACpD,CAAA;AAED;AACA,MAAa,8CAA8C,GAAG;AAC7D,IAAC,OAAO,EAAE,qCAAqC;AAC/C,IAAC,IAAI,EAAE,CAAC,OAAO,CAAC;AAChB,IAAC,UAAU,EAAE,sDAAsD;AACnE,CAAA;AACA;ACxbD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAAD,MAqBa,aAAa;AAC1B;2CAVC,QAAQ,SAAC,mBACR,OAAO,EAAE,CAAC;IAAU,EAAE,YAAY,EAAE,eAAe,CAAC,mBACpD,OAAO,EAAE,CAAC;aAAmB,EAAE,gBAAgB,EAAE,eAAe,CAAC;QACjE;GAAY,EAAE,CAAC,mBAAmB,EAAE,gBAAgB,CAAC;OACrD,SAAS,EAAE,uBACT,OAAO,uBACP;kCAA8C,oBAC/C,gBACF;;;;;;;;;;;;0BACK;AAAE;AC7BR;AACC;AACC;AAEF;AAAI;AACC;AAGJ,GAFE;AAEH;ACRA;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAMD;AACC;AACC;AACC;AAEF;AAAI;AAEH;AACF,MAAa,0BAA2B,SAAQ,gBAAgB;AAAI,IAIlE,YAA8B,SAAc,EAAE,QAAkB;AACjE,QAAG,KAAK,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AAC9B,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,KAAK,CAAC,WAAW,EAAE,CAAC;AAExB,QAAI,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,mBAAmB,EAAE;AAC9D,YAAK,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAC7F,SAAI;AACJ,KAAE;AAEH,IAAY,gBAAgB;AAAM,QAC9B,KAAK,CAAC,gBAAgB,EAAE,CAAC;AAC5B,QAAG,IAAI,CAAC,gCAAgC,EAAE,CAAC;AAC3C,QAAG,IAAI,CAAC,4BAA4B,CAAC,MAAM,IAAI,CAAC,gCAAgC,EAAE,CAAC,CAAC;AACpF,KAAE;AAEH,IAAU,gCAAgC;AAAM,QAC5C,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;AAChC,YAAK,OAAO;AACZ,SAAI;AAEL,QAAI,MAAM,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;AACzD,QAAG,MAAM,MAAM,GAAG,iBAAiB,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;AAC3D,QAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAC9C,KAAE;AAEH,IAAU,4BAA4B,CAAC,EAAc;AACpD,QAAG,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AAE3C,QAAI,IAAI,SAAS,EAAE;AAClB,YAAK,IAAI,IAAI,CAAC,mBAAmB,EAAE;AACnC,gBAAO,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAC/E,aAAM;AAEP,YAAM,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;AACpD,YAAK,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;AACnC,SAAI;AACJ,KAAE;AAEH,IAAU,aAAa;AAAM,QACzB,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;AACnC,YAAK,MAAM,SAAS,GAAG,IAAI,CAAC,SAAgB,CAAC;AAE9C,YAAM,IAAI,SAAS,CAAC,iBAAiB,EAAE;AACtC,gBAAO,IAAI,CAAC,oBAAoB,GAAG,kBAAkB,CAAC;AACtD,aAAM;AAAE,iBAAI,IAAI,SAAS,CAAC,uBAAuB,EAAE;AACnD,gBAAO,IAAI,CAAC,oBAAoB,GAAG,wBAAwB,CAAC;AAC5D,aAAM;AAAE,iBAAI,IAAI,SAAS,CAAC,oBAAoB,EAAE;AAChD,gBAAO,IAAI,CAAC,oBAAoB,GAAG,qBAAqB,CAAC;AACzD,aAAM;AAAE,iBAAI,IAAI,SAAS,CAAC,mBAAmB,EAAE;AAC/C,gBAAO,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;AACxD,aAAM;AACN,SAAI;AAEL,QAAI,OAAO,IAAI,CAAC,oBAAoB,CAAC;AACpC,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,oBAAoB;AAAM,QACxB,MAAM,SAAS,GAAG,IAAI,CAAC,SAAgB,CAAC;AAE5C,QAAI,OAAO,SAAS,CAAC,iBAAiB;AACrC,YAAU,SAAS,CAAC,uBAAuB;AAC3C,YAAU,SAAS,CAAC,oBAAoB;AACxC,YAAU,SAAS,CAAC,mBAAmB;AACvC,YAAU,IAAI,CAAC;AACf,KAAE;AACF;gMACD;AAAE,4PA7EI;AAAE;EADP,UAAU,SAAC,EAAC,UAAU,EAAE,MAAM,EAAC,3CAC6B,4CAI9C,MAAM,SAAC,QAAQ;AAAU,YAfhC,QAAQ;AAAI;;;;;;;6DAAE;AAAE;ACXxB;AACC;AACC;AAEF;AAAI;AACC;AAGJ,GAFE;AAEH;ACRA;AACC;AACC,GAAC;AAEH;AAAE;AAGqvB","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {coerceCssPixelValue} from '@angular/cdk/coercion';\nimport {supportsScrollBehavior} from '@angular/cdk/platform';\n\nconst scrollBehaviorSupported = supportsScrollBehavior();\n\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\n  private _previousHTMLStyles = {top: '', left: ''};\n  private _previousScrollPosition: {top: number, left: number};\n  private _isEnabled = false;\n  private _document: Document;\n\n  constructor(private _viewportRuler: ViewportRuler, document: any) {\n    this._document = document;\n  }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach() {}\n\n  /** Blocks page-level scroll while the attached overlay is open. */\n  enable() {\n    if (this._canBeEnabled()) {\n      const root = this._document.documentElement!;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n\n  /** Unblocks page-level scroll while the attached overlay is open. */\n  disable() {\n    if (this._isEnabled) {\n      const html = this._document.documentElement!;\n      const body = this._document.body!;\n      const htmlStyle = html.style;\n      const bodyStyle = body.style;\n      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n\n      this._isEnabled = false;\n\n      htmlStyle.left = this._previousHTMLStyles.left;\n      htmlStyle.top = this._previousHTMLStyles.top;\n      html.classList.remove('cdk-global-scrollblock');\n\n      // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n      // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n      // Note that we don't mutate the property if the browser doesn't support `scroll-behavior`,\n      // because it can throw off feature detections in `supportsScrollBehavior` which\n      // checks for `'scrollBehavior' in documentElement.style`.\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n      }\n\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n\n      if (scrollBehaviorSupported) {\n        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n        bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n      }\n    }\n  }\n\n  private _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    const html = this._document.documentElement!;\n\n    if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const body = this._document.body;\n    const viewport = this._viewportRuler.getViewportSize();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayReference} from '../overlay-reference';\n\n/**\n * Describes a strategy that will be used by an overlay to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  /** Enable this scroll strategy (called when the attached overlay is attached to a portal). */\n  enable: () => void;\n\n  /** Disable this scroll strategy (called when the attached overlay is detached from a portal). */\n  disable: () => void;\n\n  /** Attaches this `ScrollStrategy` to an overlay. */\n  attach: (overlayRef: OverlayReference) => void;\n\n  /** Detaches the scroll strategy from the current overlay. */\n  detach?: () => void;\n}\n\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nexport function getMatScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgZone} from '@angular/core';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {Subscription} from 'rxjs';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the CloseScrollStrategy.\n */\nexport interface CloseScrollStrategyConfig {\n  /** Amount of pixels the user has to scroll before the overlay is closed. */\n  threshold?: number;\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n  private _initialScrollPosition: number;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _config?: CloseScrollStrategyConfig) {}\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables the closing of the attached overlay on scroll. */\n  enable() {\n    if (this._scrollSubscription) {\n      return;\n    }\n\n    const stream = this._scrollDispatcher.scrolled(0);\n\n    if (this._config && this._config.threshold && this._config.threshold > 1) {\n      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n      this._scrollSubscription = stream.subscribe(() => {\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n\n        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config!.threshold!) {\n          this._detach();\n        } else {\n          this._overlayRef.updatePosition();\n        }\n      });\n    } else {\n      this._scrollSubscription = stream.subscribe(this._detach);\n    }\n  }\n\n  /** Disables the closing the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n\n  /** Detaches the overlay ref and disables the scroll strategy. */\n  private _detach = () => {\n    this.disable();\n\n    if (this._overlayRef.hasAttached()) {\n      this._ngZone.run(() => this._overlayRef.detach());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollStrategy} from './scroll-strategy';\n\n/** Scroll strategy that doesn't do anything. */\nexport class NoopScrollStrategy implements ScrollStrategy {\n  /** Does nothing, as this scroll strategy is a no-op. */\n  enable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  disable() { }\n  /** Does nothing, as this scroll strategy is a no-op. */\n  attach() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const outsideAbove = element.bottom < containerBounds.top;\n    const outsideBelow = element.top > containerBounds.bottom;\n    const outsideLeft = element.right < containerBounds.left;\n    const outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n\n\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const clippedAbove = element.top < scrollContainerRect.top;\n    const clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const clippedLeft = element.left < scrollContainerRect.left;\n    const clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgZone} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {ScrollStrategy, getMatScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayReference} from '../overlay-reference';\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView} from '../position/scroll-clip';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  /** Time in milliseconds to throttle the scroll events. */\n  scrollThrottle?: number;\n\n  /** Whether to close the overlay once the user has scrolled away completely. */\n  autoClose?: boolean;\n}\n\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription|null = null;\n  private _overlayRef: OverlayReference;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) { }\n\n  /** Attaches this scroll strategy to an overlay. */\n  attach(overlayRef: OverlayReference) {\n    if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n\n  /** Enables repositioning of the attached overlay on scroll. */\n  enable() {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n        this._overlayRef.updatePosition();\n\n        // TODO(crisbeto): make `close` on by default once all components can handle it.\n        if (this._config && this._config.autoClose) {\n          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n          const {width, height} = this._viewportRuler.getViewportSize();\n\n          // TODO(crisbeto): include all ancestor scroll containers here once\n          // we have a way of exposing the trigger element to the scroll strategy.\n          const parentRects = [{width, height, bottom: height, right: width, top: 0, left: 0}];\n\n          if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n            this.disable();\n            this._ngZone.run(() => this._overlayRef.detach());\n          }\n        }\n      });\n    }\n  }\n\n  /** Disables repositioning of the attached overlay on scroll. */\n  disable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n\n  detach() {\n    this.disable();\n    this._overlayRef = null!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ScrollDispatcher, ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {CloseScrollStrategy, CloseScrollStrategyConfig} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n\n\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\n@Injectable({providedIn: 'root'})\nexport class ScrollStrategyOptions {\n  private _document: Document;\n\n  constructor(\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /** Do nothing on scroll. */\n  noop = () => new NoopScrollStrategy();\n\n  /**\n   * Close the overlay as soon as the user scrolls.\n   * @param config Configuration to be used inside the scroll strategy.\n   */\n  close = (config?: CloseScrollStrategyConfig) => new CloseScrollStrategy(this._scrollDispatcher,\n      this._ngZone, this._viewportRuler, config)\n\n  /** Block scrolling. */\n  block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n\n  /**\n   * Update the overlay's position on scroll.\n   * @param config Configuration to be used inside the scroll strategy.\n   * Allows debouncing the reposition calls.\n   */\n  reposition = (config?: RepositionScrollStrategyConfig) => new RepositionScrollStrategy(\n      this._scrollDispatcher, this._viewportRuler, this._ngZone, config)\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\n\n// Export pre-defined scroll strategies and interface to build custom ones.\nexport {ScrollStrategy} from './scroll-strategy';\nexport {ScrollStrategyOptions} from './scroll-strategy-options';\nexport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig\n} from './reposition-scroll-strategy';\nexport {CloseScrollStrategy} from './close-scroll-strategy';\nexport {NoopScrollStrategy} from './noop-scroll-strategy';\nexport {BlockScrollStrategy} from './block-scroll-strategy';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ScrollStrategy, NoopScrollStrategy} from './scroll/index';\n\n\n/** Initial configuration used when creating an overlay. */\nexport class OverlayConfig {\n  /** Strategy with which to position the overlay. */\n  positionStrategy?: PositionStrategy;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  scrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n\n  /** Custom class to add to the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the overlay has a backdrop. */\n  hasBackdrop?: boolean = false;\n\n  /** Custom class to add to the backdrop */\n  backdropClass?: string | string[] = 'cdk-overlay-dark-backdrop';\n\n  /** The width of the overlay panel. If a number is provided, pixel units are assumed. */\n  width?: number | string;\n\n  /** The height of the overlay panel. If a number is provided, pixel units are assumed. */\n  height?: number | string;\n\n  /** The min-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** The min-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** The max-width of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxWidth?: number | string;\n\n  /** The max-height of the overlay panel. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /**\n   * Direction of the text in the overlay panel. If a `Directionality` instance\n   * is passed in, the overlay will handle changes to its value automatically.\n   */\n  direction?: Direction | Directionality;\n\n  /**\n   * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  disposeOnNavigation?: boolean = false;\n\n  constructor(config?: OverlayConfig) {\n    if (config) {\n      // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n      // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n      // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n      const configKeys =\n          Object.keys(config) as Iterable<keyof OverlayConfig> & (keyof OverlayConfig)[];\n      for (const key of configKeys) {\n        if (config[key] !== undefined) {\n          // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n          // as \"I don't know *which* key this is, so the only valid value is the intersection\n          // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n          // is not smart enough to see that the right-hand-side is actually an access of the same\n          // exact type with the same exact key, meaning that the value type must be identical.\n          // So we use `any` to work around this.\n          this[key] = config[key] as any;\n        }\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n\n/** The points of the origin element and the overlay element to connect. */\nexport class ConnectionPositionPair {\n  /** X-axis attachment point for connected overlay origin. Can be 'start', 'end', or 'center'. */\n  originX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay origin. Can be 'top', 'bottom', or 'center'. */\n  originY: VerticalConnectionPos;\n  /** X-axis attachment point for connected overlay. Can be 'start', 'end', or 'center'. */\n  overlayX: HorizontalConnectionPos;\n  /** Y-axis attachment point for connected overlay. Can be 'top', 'bottom', or 'center'. */\n  overlayY: VerticalConnectionPos;\n\n  constructor(\n    origin: OriginConnectionPosition,\n    overlay: OverlayConnectionPosition,\n    /** Offset along the X axis. */\n    public offsetX?: number,\n    /** Offset along the Y axis. */\n    public offsetY?: number,\n    /** Class(es) to be applied to the panel while this position is active. */\n    public panelClass?: string | string[]) {\n\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\n/** The change event emitted by the strategy when a fallback position is used. */\nexport class ConnectedOverlayPositionChange {\n  constructor(\n      /** The position used as a result of this change. */\n      public connectionPair: ConnectionPositionPair,\n      /** @docs-private */\n      @Optional() public scrollableViewProperties: ScrollingVisibility) {}\n}\n\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateVerticalPosition(property: string, value: VerticalConnectionPos) {\n  if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"top\", \"bottom\" or \"center\".`);\n  }\n}\n\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nexport function validateHorizontalPosition(property: string, value: HorizontalConnectionPos) {\n  if (value !== 'start' && value !== 'end' && value !== 'center') {\n    throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n                `Expected \"start\", \"end\" or \"center\".`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {OverlayReference} from '../overlay-reference';\n\n\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport abstract class BaseOverlayDispatcher implements OnDestroy {\n\n  /** Currently attached overlays in the order they were attached. */\n  _attachedOverlays: OverlayReference[] = [];\n\n  protected _document: Document;\n  protected _isAttached: boolean;\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    this._document = document;\n  }\n\n  ngOnDestroy(): void {\n    this.detach();\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayReference): void {\n    // Ensure that we don't get the same overlay multiple times.\n    this.remove(overlayRef);\n    this._attachedOverlays.push(overlayRef);\n  }\n\n  /** Remove an overlay from the list of attached overlay refs. */\n  remove(overlayRef: OverlayReference): void {\n    const index = this._attachedOverlays.indexOf(overlayRef);\n\n    if (index > -1) {\n      this._attachedOverlays.splice(index, 1);\n    }\n\n    // Remove the global listener once there are no more overlays.\n    if (this._attachedOverlays.length === 0) {\n      this.detach();\n    }\n  }\n\n  /** Detaches the global event listener. */\n  protected abstract detach(): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {OverlayReference} from '../overlay-reference';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\n\n\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n\n  constructor(@Inject(DOCUMENT) document: any) {\n    super(document);\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayReference): void {\n    super.add(overlayRef);\n\n    // Lazily start dispatcher once first overlay is added\n    if (!this._isAttached) {\n      this._document.body.addEventListener('keydown', this._keydownListener);\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      this._document.body.removeEventListener('keydown', this._keydownListener);\n      this._isAttached = false;\n    }\n  }\n\n  /** Keyboard event listener that will be attached to the body. */\n  private _keydownListener = (event: KeyboardEvent) => {\n    const overlays = this._attachedOverlays;\n\n    for (let i = overlays.length - 1; i > -1; i--) {\n      // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n      // We want to target the most recent overlay, rather than trying to match where the event came\n      // from, because some components might open an overlay, but keep focus on a trigger element\n      // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n      // because we don't want overlays that don't handle keyboard events to block the ones below\n      // them that do.\n      if (overlays[i]._keydownEvents.observers.length > 0) {\n        overlays[i]._keydownEvents.next(event);\n        break;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {OverlayReference} from '../overlay-reference';\nimport {Platform} from '@angular/cdk/platform';\nimport {BaseOverlayDispatcher} from './base-overlay-dispatcher';\n\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\n@Injectable({providedIn: 'root'})\nexport class OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n  private _cursorOriginalValue: string;\n  private _cursorStyleIsSet = false;\n\n  constructor(@Inject(DOCUMENT) document: any, private _platform: Platform) {\n    super(document);\n  }\n\n  /** Add a new overlay to the list of attached overlay refs. */\n  add(overlayRef: OverlayReference): void {\n    super.add(overlayRef);\n\n    // Safari on iOS does not generate click events for non-interactive\n    // elements. However, we want to receive a click for any element outside\n    // the overlay. We can force a \"clickable\" state by setting\n    // `cursor: pointer` on the document body. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n    // https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n    if (!this._isAttached) {\n      const body = this._document.body;\n      body.addEventListener('click', this._clickListener, true);\n      body.addEventListener('auxclick', this._clickListener, true);\n      body.addEventListener('contextmenu', this._clickListener, true);\n\n      // click event is not fired on iOS. To make element \"clickable\" we are\n      // setting the cursor to pointer\n      if (this._platform.IOS && !this._cursorStyleIsSet) {\n        this._cursorOriginalValue = body.style.cursor;\n        body.style.cursor = 'pointer';\n        this._cursorStyleIsSet = true;\n      }\n\n      this._isAttached = true;\n    }\n  }\n\n  /** Detaches the global keyboard event listener. */\n  protected detach() {\n    if (this._isAttached) {\n      const body = this._document.body;\n      body.removeEventListener('click', this._clickListener, true);\n      body.removeEventListener('auxclick', this._clickListener, true);\n      body.removeEventListener('contextmenu', this._clickListener, true);\n      if (this._platform.IOS && this._cursorStyleIsSet) {\n        body.style.cursor = this._cursorOriginalValue;\n        this._cursorStyleIsSet = false;\n      }\n      this._isAttached = false;\n    }\n  }\n\n  /** Click event listener that will be attached to the body propagate phase. */\n  private _clickListener = (event: MouseEvent) => {\n    // Get the target through the `composedPath` if possible to account for shadow DOM.\n    const target = event.composedPath ? event.composedPath()[0] : event.target;\n    // We copy the array because the original may be modified asynchronously if the\n    // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n    // the for loop.\n    const overlays = this._attachedOverlays.slice();\n\n    // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n    // We want to target all overlays for which the click could be considered as outside click.\n    // As soon as we reach an overlay for which the click is not outside click we break off\n    // the loop.\n    for (let i = overlays.length - 1; i > -1; i--) {\n      const overlayRef = overlays[i];\n      if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n        continue;\n      }\n\n      // If it's a click inside the overlay, just break - we should do nothing\n      // If it's an outside click dispatch the mouse event, and proceed with the next overlay\n      if (overlayRef.overlayElement.contains(target as Node)) {\n        break;\n      }\n\n      overlayRef._outsidePointerEvents.next(event);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment: boolean = typeof window !== 'undefined' && !!window &&\n  !!((window as any).__karma__ || (window as any).jasmine);\n\n/** Container inside which all overlays will render. */\n@Injectable({providedIn: 'root'})\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n  protected _document: Document;\n\n  constructor(@Inject(DOCUMENT) document: any, protected _platform: Platform) {\n    this._document = document;\n  }\n\n  ngOnDestroy() {\n    const container = this._containerElement;\n\n    if (container && container.parentNode) {\n      container.parentNode.removeChild(container);\n    }\n  }\n\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    const containerClass = 'cdk-overlay-container';\n\n    if (this._platform.isBrowser || isTestEnvironment) {\n      const oppositePlatformContainers =\n          this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                                          `.${containerClass}[platform=\"test\"]`);\n\n      // Remove any old containers from the opposite platform.\n      // This can happen when transitioning from the server to the client.\n      for (let i = 0; i < oppositePlatformContainers.length; i++) {\n        oppositePlatformContainers[i].parentNode!.removeChild(oppositePlatformContainers[i]);\n      }\n    }\n\n    const container = this._document.createElement('div');\n    container.classList.add(containerClass);\n\n    // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n    // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n    // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n    // To mitigate the problem we made it so that only containers from a different platform are\n    // cleared, but the side-effect was that people started depending on the overly-aggressive\n    // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n    // module which does the cleanup, we try to detect that we're in a test environment and we\n    // always clear the container. See #17006.\n    // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n    if (isTestEnvironment) {\n      container.setAttribute('platform', 'test');\n    } else if (!this._platform.isBrowser) {\n      container.setAttribute('platform', 'server');\n    }\n\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal, Portal, PortalOutlet, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, EmbeddedViewRef, NgZone} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, merge, SubscriptionLike, Subscription} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {OverlayReference} from './overlay-reference';\nimport {PositionStrategy} from './position/position-strategy';\nimport {ScrollStrategy} from './scroll';\n\n\n/** An object where all of its properties cannot be written. */\nexport type ImmutableObject<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalOutlet, OverlayReference {\n  private _backdropElement: HTMLElement | null = null;\n  private _backdropClick: Subject<MouseEvent> = new Subject();\n  private _attachments = new Subject<void>();\n  private _detachments = new Subject<void>();\n  private _positionStrategy: PositionStrategy | undefined;\n  private _scrollStrategy: ScrollStrategy | undefined;\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n  private _backdropClickHandler = (event: MouseEvent) => this._backdropClick.next(event);\n\n  /**\n   * Reference to the parent of the `_host` at the time it was detached. Used to restore\n   * the `_host` to its original position in the DOM when it gets re-attached.\n   */\n  private _previousHostParent: HTMLElement;\n\n  /** Stream of keydown events dispatched to this overlay. */\n  _keydownEvents = new Subject<KeyboardEvent>();\n\n  /** Stream of mouse outside events dispatched to this overlay. */\n  _outsidePointerEvents = new Subject<MouseEvent>();\n\n  constructor(\n      private _portalOutlet: PortalOutlet,\n      private _host: HTMLElement,\n      private _pane: HTMLElement,\n      private _config: ImmutableObject<OverlayConfig>,\n      private _ngZone: NgZone,\n      private _keyboardDispatcher: OverlayKeyboardDispatcher,\n      private _document: Document,\n      private _location: Location,\n      private _outsideClickDispatcher: OverlayOutsideClickDispatcher) {\n\n    if (_config.scrollStrategy) {\n      this._scrollStrategy = _config.scrollStrategy;\n      this._scrollStrategy.attach(this);\n    }\n\n    this._positionStrategy = _config.positionStrategy;\n  }\n\n  /** The overlay's HTML element */\n  get overlayElement(): HTMLElement {\n    return this._pane;\n  }\n\n  /** The overlay's backdrop HTML element. */\n  get backdropElement(): HTMLElement | null {\n    return this._backdropElement;\n  }\n\n  /**\n   * Wrapper around the panel element. Can be used for advanced\n   * positioning where a wrapper with specific styling is\n   * required around the overlay pane.\n   */\n  get hostElement(): HTMLElement {\n    return this._host;\n  }\n\n  attach<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n  attach<T>(portal: TemplatePortal<T>): EmbeddedViewRef<T>;\n  attach(portal: any): any;\n\n  /**\n   * Attaches content, given via a Portal, to the overlay.\n   * If the overlay is configured to have a backdrop, it will be created.\n   *\n   * @param portal Portal instance to which to attach the overlay.\n   * @returns The portal attachment result.\n   */\n  attach(portal: Portal<any>): any {\n    let attachResult = this._portalOutlet.attach(portal);\n\n    // Update the pane element with the given configuration.\n    if (!this._host.parentElement && this._previousHostParent) {\n      this._previousHostParent.appendChild(this._host);\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.attach(this);\n    }\n\n    this._updateStackingOrder();\n    this._updateElementSize();\n    this._updateElementDirection();\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.enable();\n    }\n\n    // Update the position once the zone is stable so that the overlay will be fully rendered\n    // before attempting to position it, as the position may depend on the size of the rendered\n    // content.\n    this._ngZone.onStable\n      .pipe(take(1))\n      .subscribe(() => {\n        // The overlay could've been detached before the zone has stabilized.\n        if (this.hasAttached()) {\n          this.updatePosition();\n        }\n      });\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._config.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._config.panelClass) {\n      this._toggleClasses(this._pane, this._config.panelClass, true);\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    // Track this overlay by the keyboard dispatcher\n    this._keyboardDispatcher.add(this);\n\n    if (this._config.disposeOnNavigation) {\n      this._locationChanges = this._location.subscribe(() => this.dispose());\n    }\n\n    this._outsideClickDispatcher.add(this);\n    return attachResult;\n  }\n\n  /**\n   * Detaches an overlay from a portal.\n   * @returns The portal detachment result.\n   */\n  detach(): any {\n    if (!this.hasAttached()) {\n      return;\n    }\n\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._positionStrategy && this._positionStrategy.detach) {\n      this._positionStrategy.detach();\n    }\n\n    if (this._scrollStrategy) {\n      this._scrollStrategy.disable();\n    }\n\n    const detachmentResult = this._portalOutlet.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    // Remove this overlay from keyboard dispatcher tracking.\n    this._keyboardDispatcher.remove(this);\n\n    // Keeping the host element in the DOM can cause scroll jank, because it still gets\n    // rendered, even though it's transparent and unclickable which is why we remove it.\n    this._detachContentWhenStable();\n    this._locationChanges.unsubscribe();\n    this._outsideClickDispatcher.remove(this);\n    return detachmentResult;\n  }\n\n  /** Cleans up the overlay from the DOM. */\n  dispose(): void {\n    const isAttached = this.hasAttached();\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._disposeScrollStrategy();\n    this.detachBackdrop();\n    this._locationChanges.unsubscribe();\n    this._keyboardDispatcher.remove(this);\n    this._portalOutlet.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._keydownEvents.complete();\n    this._outsidePointerEvents.complete();\n    this._outsideClickDispatcher.remove(this);\n\n    if (this._host && this._host.parentNode) {\n      this._host.parentNode.removeChild(this._host);\n      this._host = null!;\n    }\n\n    this._previousHostParent = this._pane = null!;\n\n    if (isAttached) {\n      this._detachments.next();\n    }\n\n    this._detachments.complete();\n  }\n\n  /** Whether the overlay has attached content. */\n  hasAttached(): boolean {\n    return this._portalOutlet.hasAttached();\n  }\n\n  /** Gets an observable that emits when the backdrop has been clicked. */\n  backdropClick(): Observable<MouseEvent> {\n    return this._backdropClick;\n  }\n\n  /** Gets an observable that emits when the overlay has been attached. */\n  attachments(): Observable<void> {\n    return this._attachments;\n  }\n\n  /** Gets an observable that emits when the overlay has been detached. */\n  detachments(): Observable<void> {\n    return this._detachments;\n  }\n\n  /** Gets an observable of keydown events targeted to this overlay. */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._keydownEvents;\n  }\n\n  /** Gets an observable of pointer events targeted outside this overlay. */\n  outsidePointerEvents(): Observable<MouseEvent> {\n    return this._outsidePointerEvents;\n  }\n\n  /** Gets the current overlay configuration, which is immutable. */\n  getConfig(): OverlayConfig {\n    return this._config;\n  }\n\n  /** Updates the position of the overlay based on the position strategy. */\n  updatePosition(): void {\n    if (this._positionStrategy) {\n      this._positionStrategy.apply();\n    }\n  }\n\n  /** Switches to a new position strategy and updates the overlay position. */\n  updatePositionStrategy(strategy: PositionStrategy): void {\n    if (strategy === this._positionStrategy) {\n      return;\n    }\n\n    if (this._positionStrategy) {\n      this._positionStrategy.dispose();\n    }\n\n    this._positionStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      this.updatePosition();\n    }\n  }\n\n  /** Update the size properties of the overlay. */\n  updateSize(sizeConfig: OverlaySizeConfig): void {\n    this._config = {...this._config, ...sizeConfig};\n    this._updateElementSize();\n  }\n\n  /** Sets the LTR/RTL direction for the overlay. */\n  setDirection(dir: Direction | Directionality): void {\n    this._config = {...this._config, direction: dir};\n    this._updateElementDirection();\n  }\n\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, true);\n    }\n  }\n\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes: string | string[]): void {\n    if (this._pane) {\n      this._toggleClasses(this._pane, classes, false);\n    }\n  }\n\n  /**\n   * Returns the layout direction of the overlay panel.\n   */\n  getDirection(): Direction {\n    const direction = this._config.direction;\n\n    if (!direction) {\n      return 'ltr';\n    }\n\n    return typeof direction === 'string' ? direction : direction.value;\n  }\n\n  /** Switches to a new scroll strategy. */\n  updateScrollStrategy(strategy: ScrollStrategy): void {\n    if (strategy === this._scrollStrategy) {\n      return;\n    }\n\n    this._disposeScrollStrategy();\n    this._scrollStrategy = strategy;\n\n    if (this.hasAttached()) {\n      strategy.attach(this);\n      strategy.enable();\n    }\n  }\n\n  /** Updates the text direction of the overlay panel. */\n  private _updateElementDirection() {\n    this._host.setAttribute('dir', this.getDirection());\n  }\n\n  /** Updates the size of the overlay element based on the overlay config. */\n  private _updateElementSize() {\n    if (!this._pane) {\n      return;\n    }\n\n    const style = this._pane.style;\n\n    style.width = coerceCssPixelValue(this._config.width);\n    style.height = coerceCssPixelValue(this._config.height);\n    style.minWidth = coerceCssPixelValue(this._config.minWidth);\n    style.minHeight = coerceCssPixelValue(this._config.minHeight);\n    style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n    style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n  }\n\n  /** Toggles the pointer events for the overlay pane element. */\n  private _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? '' : 'none';\n  }\n\n  /** Attaches a backdrop for this overlay. */\n  private _attachBackdrop() {\n    const showingClass = 'cdk-overlay-backdrop-showing';\n\n    this._backdropElement = this._document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._config.backdropClass) {\n      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n    }\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._host.parentElement!.insertBefore(this._backdropElement, this._host);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', this._backdropClickHandler);\n\n    // Add class to fade-in the backdrop after one frame.\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          if (this._backdropElement) {\n            this._backdropElement.classList.add(showingClass);\n          }\n        });\n      });\n    } else {\n      this._backdropElement.classList.add(showingClass);\n    }\n  }\n\n  /**\n   * Updates the stacking order of the element, moving it to the top if necessary.\n   * This is required in cases where one overlay was detached, while another one,\n   * that should be behind it, was destroyed. The next time both of them are opened,\n   * the stacking will be wrong, because the detached element's pane will still be\n   * in its original DOM position.\n   */\n  private _updateStackingOrder() {\n    if (this._host.nextSibling) {\n      this._host.parentNode!.appendChild(this._host);\n    }\n  }\n\n  /** Detaches the backdrop (if any) associated with the overlay. */\n  detachBackdrop(): void {\n    let backdropToDetach = this._backdropElement;\n\n    if (!backdropToDetach) {\n      return;\n    }\n\n    let timeoutId: number;\n    let finishDetach = () => {\n      // It may not be attached to anything in certain cases (e.g. unit tests).\n      if (backdropToDetach) {\n        backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n        backdropToDetach.removeEventListener('transitionend', finishDetach);\n\n        if (backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n      }\n\n      // It is possible that a new portal has been attached to this overlay since we started\n      // removing the backdrop. If that is the case, only clear the backdrop reference if it\n      // is still the same instance that we started to remove.\n      if (this._backdropElement == backdropToDetach) {\n        this._backdropElement = null;\n      }\n\n      if (this._config.backdropClass) {\n        this._toggleClasses(backdropToDetach!, this._config.backdropClass, false);\n      }\n\n      clearTimeout(timeoutId);\n    };\n\n    backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n    this._ngZone.runOutsideAngular(() => {\n      backdropToDetach!.addEventListener('transitionend', finishDetach);\n    });\n\n    // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n    // In this case we make it unclickable and we try to remove it after a delay.\n    backdropToDetach.style.pointerEvents = 'none';\n\n    // Run this outside the Angular zone because there's nothing that Angular cares about.\n    // If it were to run inside the Angular zone, every test that used Overlay would have to be\n    // either async or fakeAsync.\n    timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n  }\n\n  /** Toggles a single CSS class or an array of classes on an element. */\n  private _toggleClasses(element: HTMLElement, cssClasses: string | string[], isAdd: boolean) {\n    const classList = element.classList;\n\n    coerceArray(cssClasses).forEach(cssClass => {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      // Also trying to add an empty string to a DOMTokenList will throw.\n      if (cssClass) {\n        isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n      }\n    });\n  }\n\n  /** Detaches the overlay content next time the zone stabilizes. */\n  private _detachContentWhenStable() {\n    // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n    // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n    // be patched to run inside the zone, which will throw us into an infinite loop.\n    this._ngZone.runOutsideAngular(() => {\n      // We can't remove the host here immediately, because the overlay pane's content\n      // might still be animating. This stream helps us avoid interrupting the animation\n      // by waiting for the pane to become empty.\n      const subscription = this._ngZone.onStable\n        .pipe(takeUntil(merge(this._attachments, this._detachments)))\n        .subscribe(() => {\n          // Needs a couple of checks for the pane and host, because\n          // they may have been removed by the time the zone stabilizes.\n          if (!this._pane || !this._host || this._pane.children.length === 0) {\n            if (this._pane && this._config.panelClass) {\n              this._toggleClasses(this._pane, this._config.panelClass, false);\n            }\n\n            if (this._host && this._host.parentElement) {\n              this._previousHostParent = this._host.parentElement;\n              this._previousHostParent.removeChild(this._host);\n            }\n\n            subscription.unsubscribe();\n          }\n        });\n    });\n  }\n\n  /** Disposes of a scroll strategy. */\n  private _disposeScrollStrategy() {\n    const scrollStrategy = this._scrollStrategy;\n\n    if (scrollStrategy) {\n      scrollStrategy.disable();\n\n      if (scrollStrategy.detach) {\n        scrollStrategy.detach();\n      }\n    }\n  }\n}\n\n\n/** Size properties for an overlay. */\nexport interface OverlaySizeConfig {\n  width?: number | string;\n  height?: number | string;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  maxWidth?: number | string;\n  maxHeight?: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler, CdkScrollable, ViewportScrollPosition} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  ScrollingVisibility,\n  validateHorizontalPosition,\n  validateVerticalPosition,\n} from './connected-position';\nimport {Observable, Subscription, Subject} from 'rxjs';\nimport {OverlayReference} from '../overlay-reference';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {coerceCssPixelValue, coerceArray} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {OverlayContainer} from '../overlay-container';\n\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n\n/** Possible values that can be set as the origin of a FlexibleConnectedPositionStrategy. */\nexport type FlexibleConnectedPositionStrategyOrigin = ElementRef | Element | Point & {\n  width?: number;\n  height?: number;\n};\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class FlexibleConnectedPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  /** Whether we're performing the very first positioning of the overlay. */\n  private _isInitialRender: boolean;\n\n  /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n  private _lastBoundingBoxSize = {width: 0, height: 0};\n\n  /** Whether the overlay was pushed in a previous positioning. */\n  private _isPushed = false;\n\n  /** Whether the overlay can be pushed on-screen on the initial open. */\n  private _canPush = true;\n\n  /** Whether the overlay can grow via flexible width/height after the initial open. */\n  private _growAfterOpen = false;\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  private _hasFlexibleDimensions = true;\n\n  /** Whether the overlay position is locked. */\n  private _positionLocked = false;\n\n  /** Cached origin dimensions */\n  private _originRect: ClientRect;\n\n  /** Cached overlay dimensions */\n  private _overlayRect: ClientRect;\n\n  /** Cached viewport dimensions */\n  private _viewportRect: ClientRect;\n\n  /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n  private _viewportMargin = 0;\n\n  /** The Scrollable containers used to check scrollable view properties on position change. */\n  private _scrollables: CdkScrollable[] = [];\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** The origin element against which the overlay will be positioned. */\n  private _origin: FlexibleConnectedPositionStrategyOrigin;\n\n  /** The overlay pane element. */\n  private _pane: HTMLElement;\n\n  /** Whether the strategy has been disposed of already. */\n  private _isDisposed: boolean;\n\n  /**\n   * Parent element for the overlay panel used to constrain the overlay panel's size to fit\n   * within the viewport.\n   */\n  private _boundingBox: HTMLElement | null;\n\n  /** The last position to have been calculated as the best fit position. */\n  private _lastPosition: ConnectedPosition | null;\n\n  /** Subject that emits whenever the position changes. */\n  private _positionChanges = new Subject<ConnectedOverlayPositionChange>();\n\n  /** Subscription to viewport size changes. */\n  private _resizeSubscription = Subscription.EMPTY;\n\n  /** Default offset for the overlay along the x axis. */\n  private _offsetX = 0;\n\n  /** Default offset for the overlay along the y axis. */\n  private _offsetY = 0;\n\n  /** Selector to be used when finding the elements on which to set the transform origin. */\n  private _transformOriginSelector: string;\n\n  /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n  private _appliedPanelClasses: string[] = [];\n\n  /** Amount by which the overlay was pushed in each axis during the last time it was positioned. */\n  private _previousPushAmount: {x: number, y: number} | null;\n\n  /** Observable sequence of position changes. */\n  positionChanges: Observable<ConnectedOverlayPositionChange> = this._positionChanges;\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  constructor(\n      connectedTo: FlexibleConnectedPositionStrategyOrigin, private _viewportRuler: ViewportRuler,\n      private _document: Document, private _platform: Platform,\n      private _overlayContainer: OverlayContainer) {\n    this.setOrigin(connectedTo);\n  }\n\n  /** Attaches this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    if (this._overlayRef && overlayRef !== this._overlayRef &&\n      (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('This position strategy is already attached to an overlay');\n    }\n\n    this._validatePositions();\n\n    overlayRef.hostElement.classList.add(boundingBoxClass);\n\n    this._overlayRef = overlayRef;\n    this._boundingBox = overlayRef.hostElement;\n    this._pane = overlayRef.overlayElement;\n    this._isDisposed = false;\n    this._isInitialRender = true;\n    this._lastPosition = null;\n    this._resizeSubscription.unsubscribe();\n    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n      // When the window is resized, we want to trigger the next reposition as if it\n      // was an initial render, in order for the strategy to pick a new optimal position,\n      // otherwise position locking will cause it to stay at the old one.\n      this._isInitialRender = true;\n      this.apply();\n    });\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin best fits on-screen.\n   *\n   * The selection of a position goes as follows:\n   *  - If any positions fit completely within the viewport as-is,\n   *      choose the first position that does so.\n   *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n   *      choose the position with the greatest available size modified by the positions' weight.\n   *  - If pushing is enabled, take the position that went off-screen the least and push it\n   *      on-screen.\n   *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n   * @docs-private\n   */\n  apply(): void {\n    // We shouldn't do anything if the strategy was disposed or we're on the server.\n    if (this._isDisposed || !this._platform.isBrowser) {\n      return;\n    }\n\n    // If the position has been applied already (e.g. when the overlay was opened) and the\n    // consumer opted into locking in the position, re-use the old position, in order to\n    // prevent the overlay from jumping around.\n    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n      this.reapplyLastPosition();\n      return;\n    }\n\n    this._clearPanelClasses();\n    this._resetOverlayElementStyles();\n    this._resetBoundingBoxStyles();\n\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    // We use the viewport rect to determine whether a position would go off-screen.\n    this._viewportRect = this._getNarrowedViewportRect();\n    this._originRect = this._getOriginRect();\n    this._overlayRect = this._pane.getBoundingClientRect();\n\n    const originRect = this._originRect;\n    const overlayRect = this._overlayRect;\n    const viewportRect = this._viewportRect;\n\n    // Positions where the overlay will fit with flexible dimensions.\n    const flexibleFits: FlexibleFit[] = [];\n\n    // Fallback if none of the preferred positions fit within the viewport.\n    let fallback: FallbackPosition | undefined;\n\n    // Go through each of the preferred positions looking for a good fit.\n    // If a good fit is found, it will be applied immediately.\n    for (let pos of this._preferredPositions) {\n      // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n      let originPoint = this._getOriginPoint(originRect, pos);\n\n      // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n      // overlay in this position. We use the top-left corner for calculations and later translate\n      // this into an appropriate (top, left, bottom, right) style.\n      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n\n      // Calculate how well the overlay would fit into the viewport with this point.\n      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay, without any further work, fits into the viewport, use this position.\n      if (overlayFit.isCompletelyWithinViewport) {\n        this._isPushed = false;\n        this._applyPosition(pos, originPoint);\n        return;\n      }\n\n      // If the overlay has flexible dimensions, we can use this position\n      // so long as there's enough space for the minimum dimensions.\n      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n        // Save positions where the overlay will fit with flexible dimensions. We will use these\n        // if none of the positions fit *without* flexible dimensions.\n        flexibleFits.push({\n          position: pos,\n          origin: originPoint,\n          overlayRect,\n          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n        });\n\n        continue;\n      }\n\n      // If the current preferred position does not fit on the screen, remember the position\n      // if it has more visible area on-screen than we've seen and move onto the next preferred\n      // position.\n      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n        fallback = {overlayFit, overlayPoint, originPoint, position: pos, overlayRect};\n      }\n    }\n\n    // If there are any positions where the overlay would fit with flexible dimensions, choose the\n    // one that has the greatest area available modified by the position's weight\n    if (flexibleFits.length) {\n      let bestFit: FlexibleFit | null = null;\n      let bestScore = -1;\n      for (const fit of flexibleFits) {\n        const score =\n            fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n        if (score > bestScore) {\n          bestScore = score;\n          bestFit = fit;\n        }\n      }\n\n      this._isPushed = false;\n      this._applyPosition(bestFit!.position, bestFit!.origin);\n      return;\n    }\n\n    // When none of the preferred positions fit within the viewport, take the position\n    // that went off-screen the least and attempt to push it on-screen.\n    if (this._canPush) {\n      // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n      this._isPushed = true;\n      this._applyPosition(fallback!.position, fallback!.originPoint);\n      return;\n    }\n\n    // All options for getting the overlay within the viewport have been exhausted, so go with the\n    // position that went off-screen the least.\n    this._applyPosition(fallback!.position, fallback!.originPoint);\n  }\n\n  detach(): void {\n    this._clearPanelClasses();\n    this._lastPosition = null;\n    this._previousPushAmount = null;\n    this._resizeSubscription.unsubscribe();\n  }\n\n  /** Cleanup after the element gets destroyed. */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    // We can't use `_resetBoundingBoxStyles` here, because it resets\n    // some properties to zero, rather than removing them.\n    if (this._boundingBox) {\n      extendStyles(this._boundingBox.style, {\n        top: '',\n        left: '',\n        right: '',\n        bottom: '',\n        height: '',\n        width: '',\n        alignItems: '',\n        justifyContent: '',\n      } as CSSStyleDeclaration);\n    }\n\n    if (this._pane) {\n      this._resetOverlayElementStyles();\n    }\n\n    if (this._overlayRef) {\n      this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n    }\n\n    this.detach();\n    this._positionChanges.complete();\n    this._overlayRef = this._boundingBox = null!;\n    this._isDisposed = true;\n  }\n\n  /**\n   * This re-aligns the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  reapplyLastPosition(): void {\n    if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n      this._originRect = this._getOriginRect();\n      this._overlayRect = this._pane.getBoundingClientRect();\n      this._viewportRect = this._getNarrowedViewportRect();\n\n      const lastPosition = this._lastPosition || this._preferredPositions[0];\n      const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n\n      this._applyPosition(lastPosition, originPoint);\n    }\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]): this {\n    this._scrollables = scrollables;\n    return this;\n  }\n\n  /**\n   * Adds new preferred positions.\n   * @param positions List of positions options for this overlay.\n   */\n  withPositions(positions: ConnectedPosition[]): this {\n    this._preferredPositions = positions;\n\n    // If the last calculated position object isn't part of the positions anymore, clear\n    // it in order to avoid it being picked up if the consumer tries to re-apply.\n    if (positions.indexOf(this._lastPosition!) === -1) {\n      this._lastPosition = null;\n    }\n\n    this._validatePositions();\n\n    return this;\n  }\n\n  /**\n   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n   * @param margin Required margin between the overlay and the viewport edge in pixels.\n   */\n  withViewportMargin(margin: number): this {\n    this._viewportMargin = margin;\n    return this;\n  }\n\n  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n  withFlexibleDimensions(flexibleDimensions = true): this {\n    this._hasFlexibleDimensions = flexibleDimensions;\n    return this;\n  }\n\n  /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n  withGrowAfterOpen(growAfterOpen = true): this {\n    this._growAfterOpen = growAfterOpen;\n    return this;\n  }\n\n  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  withPush(canPush = true): this {\n    this._canPush = canPush;\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked = true): this {\n    this._positionLocked = isLocked;\n    return this;\n  }\n\n  /**\n   * Sets the origin, relative to which to position the overlay.\n   * Using an element origin is useful for building components that need to be positioned\n   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n   * used for cases like contextual menus which open relative to the user's pointer.\n   * @param origin Reference to the new origin.\n   */\n  setOrigin(origin: FlexibleConnectedPositionStrategyOrigin): this {\n    this._origin = origin;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the x-axis.\n   * @param offset New offset in the X axis.\n   */\n  withDefaultOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n\n  /**\n   * Sets the default offset for the overlay's connection point on the y-axis.\n   * @param offset New offset in the Y axis.\n   */\n  withDefaultOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n\n  /**\n   * Configures that the position strategy should set a `transform-origin` on some elements\n   * inside the overlay, depending on the current position that is being applied. This is\n   * useful for the cases where the origin of an animation can change depending on the\n   * alignment of the overlay.\n   * @param selector CSS selector that will be used to find the target\n   *    elements onto which to set the transform origin.\n   */\n  withTransformOriginOn(selector: string): this {\n    this._transformOriginSelector = selector;\n    return this;\n  }\n\n  /**\n   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n   */\n  private _getOriginPoint(originRect: ClientRect, pos: ConnectedPosition): Point {\n    let x: number;\n    if (pos.originX == 'center') {\n      // Note: when centering we should always use the `left`\n      // offset, otherwise the position will be wrong in RTL.\n      x = originRect.left + (originRect.width / 2);\n    } else {\n      const startX = this._isRtl() ? originRect.right : originRect.left;\n      const endX = this._isRtl() ? originRect.left : originRect.right;\n      x = pos.originX == 'start' ? startX : endX;\n    }\n\n    let y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n\n\n  /**\n   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n   * origin point to which the overlay should be connected.\n   */\n  private _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      pos: ConnectedPosition): Point {\n\n    // Calculate the (overlayStartX, overlayStartY), the start of the\n    // potential overlay position relative to the origin point.\n    let overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n    }\n\n    let overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    return {\n      x: originPoint.x + overlayStartX,\n      y: originPoint.y + overlayStartY,\n    };\n  }\n\n  /** Gets how well an overlay at the given point will fit within the viewport. */\n  private _getOverlayFit(point: Point, rawOverlayRect: ClientRect, viewport: ClientRect,\n    position: ConnectedPosition): OverlayFit {\n\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    let {x, y} = point;\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    // Account for the offsets since they could push the overlay out of the viewport.\n    if (offsetX) {\n      x += offsetX;\n    }\n\n    if (offsetY) {\n      y += offsetY;\n    }\n\n    // How much the overlay would overflow at this position, on each side.\n    let leftOverflow = 0 - x;\n    let rightOverflow = (x + overlay.width) - viewport.width;\n    let topOverflow = 0 - y;\n    let bottomOverflow = (y + overlay.height) - viewport.height;\n\n    // Visible parts of the element on each axis.\n    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n    let visibleArea = visibleWidth * visibleHeight;\n\n    return {\n      visibleArea,\n      isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n      fitsInViewportVertically: visibleHeight === overlay.height,\n      fitsInViewportHorizontally: visibleWidth == overlay.width,\n    };\n  }\n\n  /**\n   * Whether the overlay can fit within the viewport when it may resize either its width or height.\n   * @param fit How well the overlay fits in the viewport at some position.\n   * @param point The (x, y) coordinates of the overlat at some position.\n   * @param viewport The geometry of the viewport.\n   */\n  private _canFitWithFlexibleDimensions(fit: OverlayFit, point: Point, viewport: ClientRect) {\n    if (this._hasFlexibleDimensions) {\n      const availableHeight = viewport.bottom - point.y;\n      const availableWidth = viewport.right - point.x;\n      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n\n      const verticalFit = fit.fitsInViewportVertically ||\n          (minHeight != null && minHeight <= availableHeight);\n      const horizontalFit = fit.fitsInViewportHorizontally ||\n          (minWidth != null && minWidth <= availableWidth);\n\n      return verticalFit && horizontalFit;\n    }\n    return false;\n  }\n\n  /**\n   * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n   * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n   * right and bottom).\n   *\n   * @param start Starting point from which the overlay is pushed.\n   * @param overlay Dimensions of the overlay.\n   * @param scrollPosition Current viewport scroll position.\n   * @returns The point at which to position the overlay after pushing. This is effectively a new\n   *     originPoint.\n   */\n  private _pushOverlayOnScreen(start: Point,\n                               rawOverlayRect: ClientRect,\n                               scrollPosition: ViewportScrollPosition): Point {\n    // If the position is locked and we've pushed the overlay already, reuse the previous push\n    // amount, rather than pushing it again. If we were to continue pushing, the element would\n    // remain in the viewport, which goes against the expectations when position locking is enabled.\n    if (this._previousPushAmount && this._positionLocked) {\n      return {\n        x: start.x + this._previousPushAmount.x,\n        y: start.y + this._previousPushAmount.y\n      };\n    }\n\n    // Round the overlay rect when comparing against the\n    // viewport, because the viewport is always rounded.\n    const overlay = getRoundedBoundingClientRect(rawOverlayRect);\n    const viewport = this._viewportRect;\n\n    // Determine how much the overlay goes outside the viewport on each\n    // side, which we'll use to decide which direction to push it.\n    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n\n    // Amount by which to push the overlay in each axis such that it remains on-screen.\n    let pushX = 0;\n    let pushY = 0;\n\n    // If the overlay fits completely within the bounds of the viewport, push it from whichever\n    // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n    // viewport and allow for the trailing end of the overlay to go out of bounds.\n    if (overlay.width <= viewport.width) {\n      pushX = overflowLeft || -overflowRight;\n    } else {\n      pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n    }\n\n    if (overlay.height <= viewport.height) {\n      pushY = overflowTop || -overflowBottom;\n    } else {\n      pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n    }\n\n    this._previousPushAmount = {x: pushX, y: pushY};\n\n    return {\n      x: start.x + pushX,\n      y: start.y + pushY,\n    };\n  }\n\n  /**\n   * Applies a computed position to the overlay and emits a position change.\n   * @param position The position preference\n   * @param originPoint The point on the origin element where the overlay is connected.\n   */\n  private _applyPosition(position: ConnectedPosition, originPoint: Point) {\n    this._setTransformOrigin(position);\n    this._setOverlayElementStyles(originPoint, position);\n    this._setBoundingBoxStyles(originPoint, position);\n\n    if (position.panelClass) {\n      this._addPanelClasses(position.panelClass);\n    }\n\n    // Save the last connected position in case the position needs to be re-calculated.\n    this._lastPosition = position;\n\n    // Notify that the position has been changed along with its change properties.\n    // We only emit if we've got any subscriptions, because the scroll visibility\n    // calculcations can be somewhat expensive.\n    if (this._positionChanges.observers.length) {\n      const scrollableViewProperties = this._getScrollVisibility();\n      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n      this._positionChanges.next(changeEvent);\n    }\n\n    this._isInitialRender = false;\n  }\n\n  /** Sets the transform origin based on the configured selector and the passed-in position.  */\n  private _setTransformOrigin(position: ConnectedPosition) {\n    if (!this._transformOriginSelector) {\n      return;\n    }\n\n    const elements: NodeListOf<HTMLElement> =\n        this._boundingBox!.querySelectorAll(this._transformOriginSelector);\n    let xOrigin: 'left' | 'right' | 'center';\n    let yOrigin: 'top' | 'bottom' | 'center' = position.overlayY;\n\n    if (position.overlayX === 'center') {\n      xOrigin = 'center';\n    } else if (this._isRtl()) {\n      xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n    } else {\n      xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n    }\n\n    for (let i = 0; i < elements.length; i++) {\n      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n    }\n  }\n\n  /**\n   * Gets the position and size of the overlay's sizing container.\n   *\n   * This method does no measuring and applies no styles so that we can cheaply compute the\n   * bounds for all positions and choose the best fit based on these results.\n   */\n  private _calculateBoundingBoxRect(origin: Point, position: ConnectedPosition): BoundingBoxRect {\n    const viewport = this._viewportRect;\n    const isRtl = this._isRtl();\n    let height: number, top: number, bottom: number;\n\n    if (position.overlayY === 'top') {\n      // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n      top = origin.y;\n      height = viewport.height - top + this._viewportMargin;\n    } else if (position.overlayY === 'bottom') {\n      // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n      // the viewport margin back in, because the viewport rect is narrowed down to remove the\n      // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n      bottom = viewport.height - origin.y + this._viewportMargin * 2;\n      height = viewport.height - bottom + this._viewportMargin;\n    } else {\n      // If neither top nor bottom, it means that the overlay is vertically centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n      // `origin.y - viewport.top`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n\n      const previousHeight = this._lastBoundingBoxSize.height;\n\n      height = smallestDistanceToViewportEdge * 2;\n      top = origin.y - smallestDistanceToViewportEdge;\n\n      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n        top = origin.y - (previousHeight / 2);\n      }\n    }\n\n    // The overlay is opening 'right-ward' (the content flows to the right).\n    const isBoundedByRightViewportEdge =\n        (position.overlayX === 'start' && !isRtl) ||\n        (position.overlayX === 'end' && isRtl);\n\n    // The overlay is opening 'left-ward' (the content flows to the left).\n    const isBoundedByLeftViewportEdge =\n        (position.overlayX === 'end' && !isRtl) ||\n        (position.overlayX === 'start' && isRtl);\n\n    let width: number, left: number, right: number;\n\n    if (isBoundedByLeftViewportEdge) {\n      right = viewport.width - origin.x + this._viewportMargin;\n      width = origin.x - this._viewportMargin;\n    } else if (isBoundedByRightViewportEdge) {\n      left = origin.x;\n      width = viewport.right - origin.x;\n    } else {\n      // If neither start nor end, it means that the overlay is horizontally centered on the\n      // origin point. Note that we want the position relative to the viewport, rather than\n      // the page, which is why we don't use something like `viewport.right - origin.x` and\n      // `origin.x - viewport.left`.\n      const smallestDistanceToViewportEdge =\n          Math.min(viewport.right - origin.x + viewport.left, origin.x);\n      const previousWidth = this._lastBoundingBoxSize.width;\n\n      width = smallestDistanceToViewportEdge * 2;\n      left = origin.x - smallestDistanceToViewportEdge;\n\n      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n        left = origin.x - (previousWidth / 2);\n      }\n    }\n\n    return {top: top!, left: left!, bottom: bottom!, right: right!, width, height};\n  }\n\n  /**\n   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n   * origin's connection point and stetches to the bounds of the viewport.\n   *\n   * @param origin The point on the origin element where the overlay is connected.\n   * @param position The position preference\n   */\n  private _setBoundingBoxStyles(origin: Point, position: ConnectedPosition): void {\n    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n\n    // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n    // when applying a new size.\n    if (!this._isInitialRender && !this._growAfterOpen) {\n      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n    }\n\n    const styles = {} as CSSStyleDeclaration;\n\n    if (this._hasExactPosition()) {\n      styles.top = styles.left = '0';\n      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n      styles.width = styles.height = '100%';\n    } else {\n      const maxHeight = this._overlayRef.getConfig().maxHeight;\n      const maxWidth = this._overlayRef.getConfig().maxWidth;\n\n      styles.height = coerceCssPixelValue(boundingBoxRect.height);\n      styles.top = coerceCssPixelValue(boundingBoxRect.top);\n      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n      styles.width = coerceCssPixelValue(boundingBoxRect.width);\n      styles.left = coerceCssPixelValue(boundingBoxRect.left);\n      styles.right = coerceCssPixelValue(boundingBoxRect.right);\n\n      // Push the pane content towards the proper direction.\n      if (position.overlayX === 'center') {\n        styles.alignItems = 'center';\n      } else {\n        styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n      }\n\n      if (position.overlayY === 'center') {\n        styles.justifyContent = 'center';\n      } else {\n        styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n      }\n\n      if (maxHeight) {\n        styles.maxHeight = coerceCssPixelValue(maxHeight);\n      }\n\n      if (maxWidth) {\n        styles.maxWidth = coerceCssPixelValue(maxWidth);\n      }\n    }\n\n    this._lastBoundingBoxSize = boundingBoxRect;\n\n    extendStyles(this._boundingBox!.style, styles);\n  }\n\n  /** Resets the styles for the bounding box so that a new positioning can be computed. */\n  private _resetBoundingBoxStyles() {\n    extendStyles(this._boundingBox!.style, {\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      height: '',\n      width: '',\n      alignItems: '',\n      justifyContent: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n  private _resetOverlayElementStyles() {\n    extendStyles(this._pane.style, {\n      top: '',\n      left: '',\n      bottom: '',\n      right: '',\n      position: '',\n      transform: '',\n    } as CSSStyleDeclaration);\n  }\n\n  /** Sets positioning styles to the overlay element. */\n  private _setOverlayElementStyles(originPoint: Point, position: ConnectedPosition): void {\n    const styles = {} as CSSStyleDeclaration;\n    const hasExactPosition = this._hasExactPosition();\n    const hasFlexibleDimensions = this._hasFlexibleDimensions;\n    const config = this._overlayRef.getConfig();\n\n    if (hasExactPosition) {\n      const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n    } else {\n      styles.position = 'static';\n    }\n\n    // Use a transform to apply the offsets. We do this because the `center` positions rely on\n    // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n    // off the position. We also can't use margins, because they won't have an effect in some\n    // cases where the element doesn't have anything to \"push off of\". Finally, this works\n    // better both with flexible and non-flexible positioning.\n    let transformString = '';\n    let offsetX = this._getOffset(position, 'x');\n    let offsetY = this._getOffset(position, 'y');\n\n    if (offsetX) {\n      transformString += `translateX(${offsetX}px) `;\n    }\n\n    if (offsetY) {\n      transformString += `translateY(${offsetY}px)`;\n    }\n\n    styles.transform = transformString.trim();\n\n    // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n    // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n    // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n    // Note that this doesn't apply when we have an exact position, in which case we do want to\n    // apply them because they'll be cleared from the bounding box.\n    if (config.maxHeight) {\n      if (hasExactPosition) {\n        styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n      } else if (hasFlexibleDimensions) {\n        styles.maxHeight = '';\n      }\n    }\n\n    if (config.maxWidth) {\n      if (hasExactPosition) {\n        styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n      } else if (hasFlexibleDimensions) {\n        styles.maxWidth = '';\n      }\n    }\n\n    extendStyles(this._pane.style, styles);\n  }\n\n  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayY(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the\n    // preferred position has changed since the last `apply`.\n    let styles = {top: '', bottom: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    let virtualKeyboardOffset =\n        this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n\n    // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n    // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n    // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n    // otherwise our positioning will be thrown off.\n    overlayPoint.y -= virtualKeyboardOffset;\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n    // above or below the origin and the direction in which the element will expand.\n    if (position.overlayY === 'bottom') {\n      // When using `bottom`, we adjust the y position such that it is the distance\n      // from the bottom of the viewport rather than the top.\n      const documentHeight = this._document.documentElement!.clientHeight;\n      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n    } else {\n      styles.top = coerceCssPixelValue(overlayPoint.y);\n    }\n\n    return styles;\n  }\n\n  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n  private _getExactOverlayX(position: ConnectedPosition,\n                            originPoint: Point,\n                            scrollPosition: ViewportScrollPosition) {\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    let styles = {left: '', right: ''} as CSSStyleDeclaration;\n    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n\n    if (this._isPushed) {\n      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n    }\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let horizontalStyleProperty: 'left' | 'right';\n\n    if (this._isRtl()) {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    if (horizontalStyleProperty === 'right') {\n      const documentWidth = this._document.documentElement!.clientWidth;\n      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n    } else {\n      styles.left = coerceCssPixelValue(overlayPoint.x);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Gets the view properties of the trigger and overlay, including whether they are clipped\n   * or completely outside the view of any of the strategy's scrollables.\n   */\n  private _getScrollVisibility(): ScrollingVisibility {\n    // Note: needs fresh rects since the position could've changed.\n    const originBounds = this._getOriginRect();\n    const overlayBounds =  this._pane.getBoundingClientRect();\n\n    // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n    // every time, we should be able to use the scrollTop of the containers if the size of those\n    // containers hasn't changed.\n    const scrollContainerBounds = this._scrollables.map(scrollable => {\n      return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n    });\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n\n  /** Subtracts the amount that an element is overflowing on an axis from its length. */\n  private _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n\n  /** Narrows the given viewport rect by the current _viewportMargin. */\n  private _getNarrowedViewportRect(): ClientRect {\n    // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n    // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n    // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n    // and `innerHeight` that do. This is necessary, because the overlay container uses\n    // 100% `width` and `height` which don't include the scrollbar either.\n    const width = this._document.documentElement!.clientWidth;\n    const height = this._document.documentElement!.clientHeight;\n    const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    return {\n      top:    scrollPosition.top + this._viewportMargin,\n      left:   scrollPosition.left + this._viewportMargin,\n      right:  scrollPosition.left + width - this._viewportMargin,\n      bottom: scrollPosition.top + height - this._viewportMargin,\n      width:  width  - (2 * this._viewportMargin),\n      height: height - (2 * this._viewportMargin),\n    };\n  }\n\n  /** Whether the we're dealing with an RTL context */\n  private _isRtl() {\n    return this._overlayRef.getDirection() === 'rtl';\n  }\n\n  /** Determines whether the overlay uses exact or flexible positioning. */\n  private _hasExactPosition() {\n    return !this._hasFlexibleDimensions || this._isPushed;\n  }\n\n  /** Retrieves the offset of a position along the x or y axis. */\n  private _getOffset(position: ConnectedPosition, axis: 'x' | 'y') {\n    if (axis === 'x') {\n      // We don't do something like `position['offset' + axis]` in\n      // order to avoid breking minifiers that rename properties.\n      return position.offsetX == null ? this._offsetX : position.offsetX;\n    }\n\n    return position.offsetY == null ? this._offsetY : position.offsetY;\n  }\n\n  /** Validates that the current position match the expected values. */\n  private _validatePositions(): void {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._preferredPositions.length) {\n        throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n      }\n\n      // TODO(crisbeto): remove these once Angular's template type\n      // checking is advanced enough to catch these cases.\n      this._preferredPositions.forEach(pair => {\n        validateHorizontalPosition('originX', pair.originX);\n        validateVerticalPosition('originY', pair.originY);\n        validateHorizontalPosition('overlayX', pair.overlayX);\n        validateVerticalPosition('overlayY', pair.overlayY);\n      });\n    }\n  }\n\n  /** Adds a single CSS class or an array of classes on the overlay panel. */\n  private _addPanelClasses(cssClasses: string | string[]) {\n    if (this._pane) {\n      coerceArray(cssClasses).forEach(cssClass => {\n        if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n          this._appliedPanelClasses.push(cssClass);\n          this._pane.classList.add(cssClass);\n        }\n      });\n    }\n  }\n\n  /** Clears the classes that the position strategy has applied from the overlay panel. */\n  private _clearPanelClasses() {\n    if (this._pane) {\n      this._appliedPanelClasses.forEach(cssClass => {\n        this._pane.classList.remove(cssClass);\n      });\n      this._appliedPanelClasses = [];\n    }\n  }\n\n  /** Returns the ClientRect of the current origin. */\n  private _getOriginRect(): ClientRect {\n    const origin = this._origin;\n\n    if (origin instanceof ElementRef) {\n      return origin.nativeElement.getBoundingClientRect();\n    }\n\n    // Check for Element so SVG elements are also supported.\n    if (origin instanceof Element) {\n      return origin.getBoundingClientRect();\n    }\n\n    const width = origin.width || 0;\n    const height = origin.height || 0;\n\n    // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n    return {\n      top: origin.y,\n      bottom: origin.y + height,\n      left: origin.x,\n      right: origin.x + width,\n      height,\n      width\n    };\n  }\n}\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/** Record of measurements for how an overlay (at a given position) fits into the viewport. */\ninterface OverlayFit {\n  /** Whether the overlay fits completely in the viewport. */\n  isCompletelyWithinViewport: boolean;\n\n  /** Whether the overlay fits in the viewport on the y-axis. */\n  fitsInViewportVertically: boolean;\n\n  /** Whether the overlay fits in the viewport on the x-axis. */\n  fitsInViewportHorizontally: boolean;\n\n  /** The total visible area (in px^2) of the overlay inside the viewport. */\n  visibleArea: number;\n}\n\n/** Record of the measurments determining whether an overlay will fit in a specific position. */\ninterface FallbackPosition {\n  position: ConnectedPosition;\n  originPoint: Point;\n  overlayPoint: Point;\n  overlayFit: OverlayFit;\n  overlayRect: ClientRect;\n}\n\n/** Position and size of the overlay sizing wrapper for a specific position. */\ninterface BoundingBoxRect {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  height: number;\n  width: number;\n}\n\n/** Record of measures determining how well a given position will fit with flexible dimensions. */\ninterface FlexibleFit {\n  position: ConnectedPosition;\n  origin: Point;\n  overlayRect: ClientRect;\n  boundingBoxRect: BoundingBoxRect;\n}\n\n/** A connected position as specified by the user. */\nexport interface ConnectedPosition {\n  originX: 'start' | 'center' | 'end';\n  originY: 'top' | 'center' | 'bottom';\n\n  overlayX: 'start' | 'center' | 'end';\n  overlayY: 'top' | 'center' | 'bottom';\n\n  weight?: number;\n  offsetX?: number;\n  offsetY?: number;\n  panelClass?: string | string[];\n}\n\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination: CSSStyleDeclaration,\n                      source: CSSStyleDeclaration): CSSStyleDeclaration {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      destination[key] = source[key];\n    }\n  }\n\n  return destination;\n}\n\n\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input: number|string|null|undefined): number|null {\n  if (typeof input !== 'number' && input != null) {\n    const [value, units] = input.split(cssUnitPattern);\n    return (!units || units === 'px') ? parseFloat(value) : null;\n  }\n\n  return input || null;\n}\n\n/**\n * Gets a version of an element's bounding `ClientRect` where all the values are rounded down to\n * the nearest pixel. This allows us to account for the cases where there may be sub-pixel\n * deviations in the `ClientRect` returned by the browser (e.g. when zoomed in with a percentage\n * size, see #21350).\n */\nfunction getRoundedBoundingClientRect(clientRect: ClientRect): ClientRect {\n  return {\n    top: Math.floor(clientRect.top),\n    right: Math.floor(clientRect.right),\n    bottom: Math.floor(clientRect.bottom),\n    left: Math.floor(clientRect.left),\n    width: Math.floor(clientRect.width),\n    height: Math.floor(clientRect.height)\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ViewportRuler} from '@angular/cdk/scrolling';\nimport {ElementRef} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {OverlayContainer} from '../overlay-container';\nimport {OverlayReference} from '../overlay-reference';\n\nimport {\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n} from './connected-position';\nimport {FlexibleConnectedPositionStrategy} from './flexible-connected-position-strategy';\nimport {PositionStrategy} from './position-strategy';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n  /**\n   * Reference to the underlying position strategy to which all the API calls are proxied.\n   * @docs-private\n   */\n  _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n\n  private _direction: Direction | null;\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  _preferredPositions: ConnectionPositionPair[] = [];\n\n  /** Emits an event when the connection point changes. */\n  readonly onPositionChange: Observable<ConnectedOverlayPositionChange>;\n\n  constructor(\n      originPos: OriginConnectionPosition, overlayPos: OverlayConnectionPosition,\n      connectedTo: ElementRef<HTMLElement>, viewportRuler: ViewportRuler, document: Document,\n      platform: Platform, overlayContainer: OverlayContainer) {\n    // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n    // the extra logic, we create an instance of the positioning strategy that has some\n    // defaults that make it behave as the old position strategy and to which we'll\n    // proxy all of the API calls.\n    this._positionStrategy = new FlexibleConnectedPositionStrategy(\n                                 connectedTo, viewportRuler, document, platform, overlayContainer)\n                                 .withFlexibleDimensions(false)\n                                 .withPush(false)\n                                 .withViewportMargin(0);\n\n    this.withFallbackPosition(originPos, overlayPos);\n    this.onPositionChange = this._positionStrategy.positionChanges;\n  }\n\n  /** Ordered list of preferred positions, from most to least desirable. */\n  get positions(): ConnectionPositionPair[] {\n    return this._preferredPositions;\n  }\n\n  /** Attach this position strategy to an overlay. */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n    this._positionStrategy.attach(overlayRef);\n\n    if (this._direction) {\n      overlayRef.setDirection(this._direction);\n      this._direction = null;\n    }\n  }\n\n  /** Disposes all resources used by the position strategy. */\n  dispose() {\n    this._positionStrategy.dispose();\n  }\n\n  /** @docs-private */\n  detach() {\n    this._positionStrategy.detach();\n  }\n\n  /**\n   * Updates the position of the overlay element, using whichever preferred position relative\n   * to the origin fits on-screen.\n   * @docs-private\n   */\n  apply(): void {\n    this._positionStrategy.apply();\n  }\n\n  /**\n   * Re-positions the overlay element with the trigger in its last calculated position,\n   * even if a position higher in the \"preferred positions\" list would now fit. This\n   * allows one to re-align the panel without changing the orientation of the panel.\n   */\n  recalculateLastPosition(): void {\n    this._positionStrategy.reapplyLastPosition();\n  }\n\n  /**\n   * Sets the list of Scrollable containers that host the origin element so that\n   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n   * Scrollable must be an ancestor element of the strategy's origin element.\n   */\n  withScrollableContainers(scrollables: CdkScrollable[]) {\n    this._positionStrategy.withScrollableContainers(scrollables);\n  }\n\n  /**\n   * Adds a new preferred fallback position.\n   * @param originPos\n   * @param overlayPos\n   */\n  withFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\n      offsetX?: number,\n      offsetY?: number): this {\n\n    const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n    this._preferredPositions.push(position);\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the layout direction so the overlay's position can be adjusted to match.\n   * @param dir New layout direction.\n   */\n  withDirection(dir: 'ltr' | 'rtl'): this {\n    // Since the direction might be declared before the strategy is attached,\n    // we save the value in a temporary property and we'll transfer it to the\n    // overlay ref on attachment.\n    if (this._overlayRef) {\n      this._overlayRef.setDirection(dir);\n    } else {\n      this._direction = dir;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the x-axis\n   * @param offset New offset in the X axis.\n   */\n  withOffsetX(offset: number): this {\n    this._positionStrategy.withDefaultOffsetX(offset);\n    return this;\n  }\n\n  /**\n   * Sets an offset for the overlay's connection point on the y-axis\n   * @param  offset New offset in the Y axis.\n   */\n  withOffsetY(offset: number): this {\n    this._positionStrategy.withDefaultOffsetY(offset);\n    return this;\n  }\n\n  /**\n   * Sets whether the overlay's position should be locked in after it is positioned\n   * initially. When an overlay is locked in, it won't attempt to reposition itself\n   * when the position is re-applied (e.g. when the user scrolls away).\n   * @param isLocked Whether the overlay should locked in.\n   */\n  withLockedPosition(isLocked: boolean): this {\n    this._positionStrategy.withLockedPosition(isLocked);\n    return this;\n  }\n\n  /**\n   * Overwrites the current set of positions with an array of new ones.\n   * @param positions Position pairs to be set on the strategy.\n   */\n  withPositions(positions: ConnectionPositionPair[]): this {\n    this._preferredPositions = positions.slice();\n    this._positionStrategy.withPositions(this._preferredPositions);\n    return this;\n  }\n\n  /**\n   * Sets the origin element, relative to which to position the overlay.\n   * @param origin Reference to the new origin element.\n   */\n  setOrigin(origin: ElementRef): this {\n    this._positionStrategy.setOrigin(origin);\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayReference} from '../overlay-reference';\n\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n  /** The overlay to which this strategy is attached. */\n  private _overlayRef: OverlayReference;\n  private _cssPosition: string = 'static';\n  private _topOffset: string = '';\n  private _bottomOffset: string = '';\n  private _leftOffset: string = '';\n  private _rightOffset: string = '';\n  private _alignItems: string = '';\n  private _justifyContent: string = '';\n  private _width: string = '';\n  private _height: string = '';\n  private _isDisposed: boolean;\n\n  attach(overlayRef: OverlayReference): void {\n    const config = overlayRef.getConfig();\n\n    this._overlayRef = overlayRef;\n\n    if (this._width && !config.width) {\n      overlayRef.updateSize({width: this._width});\n    }\n\n    if (this._height && !config.height) {\n      overlayRef.updateSize({height: this._height});\n    }\n\n    overlayRef.hostElement.classList.add(wrapperClass);\n    this._isDisposed = false;\n  }\n\n  /**\n   * Sets the top position of the overlay. Clears any previously set vertical position.\n   * @param value New top offset.\n   */\n  top(value: string = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the left position of the overlay. Clears any previously set horizontal position.\n   * @param value New left offset.\n   */\n  left(value: string = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n\n  /**\n   * Sets the bottom position of the overlay. Clears any previously set vertical position.\n   * @param value New bottom offset.\n   */\n  bottom(value: string = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the right position of the overlay. Clears any previously set horizontal position.\n   * @param value New right offset.\n   */\n  right(value: string = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n\n  /**\n   * Sets the overlay width and clears any previously set width.\n   * @param value New width for the overlay\n   * @deprecated Pass the `width` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  width(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({width: value});\n    } else {\n      this._width = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the overlay height and clears any previously set height.\n   * @param value New height for the overlay\n   * @deprecated Pass the `height` through the `OverlayConfig`.\n   * @breaking-change 8.0.0\n   */\n  height(value: string = ''): this {\n    if (this._overlayRef) {\n      this._overlayRef.updateSize({height: value});\n    } else {\n      this._height = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Centers the overlay horizontally with an optional offset.\n   * Clears any previously set horizontal position.\n   *\n   * @param offset Overlay offset from the horizontal center.\n   */\n  centerHorizontally(offset: string = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n\n  /**\n   * Centers the overlay vertically with an optional offset.\n   * Clears any previously set vertical position.\n   *\n   * @param offset Overlay offset from the vertical center.\n   */\n  centerVertically(offset: string = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n\n  /**\n   * Apply the position to the element.\n   * @docs-private\n   */\n  apply(): void {\n    // Since the overlay ref applies the strategy asynchronously, it could\n    // have been disposed before it ends up being applied. If that is the\n    // case, we shouldn't do anything.\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parentStyles = this._overlayRef.hostElement.style;\n    const config = this._overlayRef.getConfig();\n    const {width, height, maxWidth, maxHeight} = config;\n    const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n                                      (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n    const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n                                    (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n\n    styles.position = this._cssPosition;\n    styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n    styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n\n    if (shouldBeFlushHorizontally) {\n      parentStyles.justifyContent = 'flex-start';\n    } else if (this._justifyContent === 'center') {\n      parentStyles.justifyContent = 'center';\n    } else if (this._overlayRef.getConfig().direction === 'rtl') {\n      // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n      // don't want that because our positioning is explicitly `left` and `right`, hence\n      // why we do another inversion to ensure that the overlay stays in the same position.\n      // TODO: reconsider this if we add `start` and `end` methods.\n      if (this._justifyContent === 'flex-start') {\n        parentStyles.justifyContent = 'flex-end';\n      } else if (this._justifyContent === 'flex-end') {\n        parentStyles.justifyContent = 'flex-start';\n      }\n    } else {\n      parentStyles.justifyContent = this._justifyContent;\n    }\n\n    parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n  }\n\n  /**\n   * Cleans up the DOM changes from the position strategy.\n   * @docs-private\n   */\n  dispose(): void {\n    if (this._isDisposed || !this._overlayRef) {\n      return;\n    }\n\n    const styles = this._overlayRef.overlayElement.style;\n    const parent = this._overlayRef.hostElement;\n    const parentStyles = parent.style;\n\n    parent.classList.remove(wrapperClass);\n    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n      styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n\n    this._overlayRef = null!;\n    this._isDisposed = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {ElementRef, Inject, Injectable} from '@angular/core';\n\nimport {OverlayContainer} from '../overlay-container';\n\nimport {OriginConnectionPosition, OverlayConnectionPosition} from './connected-position';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './flexible-connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\n\n\n/** Builder for overlay position strategy. */\n@Injectable({providedIn: 'root'})\nexport class OverlayPositionBuilder {\n  constructor(\n      private _viewportRuler: ViewportRuler, @Inject(DOCUMENT) private _document: any,\n      private _platform: Platform, private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Creates a global position strategy.\n   */\n  global(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n\n  /**\n   * Creates a relative position strategy.\n   * @param elementRef\n   * @param originPos\n   * @param overlayPos\n   * @deprecated Use `flexibleConnectedTo` instead.\n   * @breaking-change 8.0.0\n   */\n  connectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(\n        originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform,\n        this._overlayContainer);\n  }\n\n  /**\n   * Creates a flexible position strategy.\n   * @param origin Origin relative to which to position the overlay.\n   */\n  flexibleConnectedTo(origin: FlexibleConnectedPositionStrategyOrigin):\n    FlexibleConnectedPositionStrategy {\n    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document,\n        this._platform, this._overlayContainer);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT, Location} from '@angular/common';\nimport {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Inject,\n  Injectable,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {OverlayKeyboardDispatcher} from './dispatchers/overlay-keyboard-dispatcher';\nimport {OverlayOutsideClickDispatcher} from './dispatchers/overlay-outside-click-dispatcher';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayContainer} from './overlay-container';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ScrollStrategyOptions} from './scroll/index';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\n@Injectable()\nexport class Overlay {\n  private _appRef: ApplicationRef;\n\n  constructor(\n              /** Scrolling strategies that can be used when creating an overlay. */\n              public scrollStrategies: ScrollStrategyOptions,\n              private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _keyboardDispatcher: OverlayKeyboardDispatcher,\n              private _injector: Injector,\n              private _ngZone: NgZone,\n              @Inject(DOCUMENT) private _document: any,\n              private _directionality: Directionality,\n              private _location: Location,\n              private _outsideClickDispatcher: OverlayOutsideClickDispatcher) { }\n\n  /**\n   * Creates an overlay.\n   * @param config Configuration applied to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(config?: OverlayConfig): OverlayRef {\n    const host = this._createHostElement();\n    const pane = this._createPaneElement(host);\n    const portalOutlet = this._createPortalOutlet(pane);\n    const overlayConfig = new OverlayConfig(config);\n\n    overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n\n    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone,\n      this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n  }\n\n  /**\n   * Gets a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   * @returns An overlay position builder.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(host: HTMLElement): HTMLElement {\n    const pane = this._document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    host.appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Creates the host element that wraps around an overlay\n   * and can be used for advanced positioning.\n   * @returns Newly-create host element.\n   */\n  private _createHostElement(): HTMLElement {\n    const host = this._document.createElement('div');\n    this._overlayContainer.getContainerElement().appendChild(host);\n    return host;\n  }\n\n  /**\n   * Create a DomPortalOutlet into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal outlet.\n   * @returns A portal outlet for the given DOM element.\n   */\n  private _createPortalOutlet(pane: HTMLElement): DomPortalOutlet {\n    // We have to resolve the ApplicationRef later in order to allow people\n    // to use overlay-based providers during app initialization.\n    if (!this._appRef) {\n      this._appRef = this._injector.get<ApplicationRef>(ApplicationRef);\n    }\n\n    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector,\n                               this._document);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {takeWhile} from 'rxjs/operators';\nimport {Overlay} from './overlay';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {ConnectedOverlayPositionChange} from './position/connected-position';\nimport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n} from './position/flexible-connected-position-strategy';\nimport {\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from './scroll/index';\n\n\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList: ConnectedPosition[] = [\n  {\n    originX: 'start',\n    originY: 'bottom',\n    overlayX: 'start',\n    overlayY: 'top'\n  },\n  {\n    originX: 'start',\n    originY: 'top',\n    overlayX: 'start',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'top',\n    overlayX: 'end',\n    overlayY: 'bottom'\n  },\n  {\n    originX: 'end',\n    originY: 'bottom',\n    overlayX: 'end',\n    overlayY: 'top'\n  }\n];\n\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('cdk-connected-overlay-scroll-strategy');\n\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n})\nexport class CdkOverlayOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef) { }\n}\n\n\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\n@Directive({\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n})\nexport class CdkConnectedOverlay implements OnDestroy, OnChanges {\n  private _overlayRef: OverlayRef;\n  private _templatePortal: TemplatePortal;\n  private _hasBackdrop = false;\n  private _lockPosition = false;\n  private _growAfterOpen = false;\n  private _flexibleDimensions = false;\n  private _push = false;\n  private _backdropSubscription = Subscription.EMPTY;\n  private _attachSubscription = Subscription.EMPTY;\n  private _detachSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _offsetX: number;\n  private _offsetY: number;\n  private _position: FlexibleConnectedPositionStrategy;\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Origin for the connected overlay. */\n  @Input('cdkConnectedOverlayOrigin') origin: CdkOverlayOrigin;\n\n  /** Registered connected position pairs. */\n  @Input('cdkConnectedOverlayPositions') positions: ConnectedPosition[];\n\n  /**\n   * This input overrides the positions input if specified. It lets users pass\n   * in arbitrary positioning strategies.\n   */\n  @Input('cdkConnectedOverlayPositionStrategy') positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** The offset in pixels for the overlay connection point on the x-axis */\n  @Input('cdkConnectedOverlayOffsetX')\n  get offsetX(): number { return this._offsetX; }\n  set offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The offset in pixels for the overlay connection point on the y-axis */\n  @Input('cdkConnectedOverlayOffsetY')\n  get offsetY() { return this._offsetY; }\n  set offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n    }\n  }\n\n  /** The width of the overlay panel. */\n  @Input('cdkConnectedOverlayWidth') width: number | string;\n\n  /** The height of the overlay panel. */\n  @Input('cdkConnectedOverlayHeight') height: number | string;\n\n  /** The min width of the overlay panel. */\n  @Input('cdkConnectedOverlayMinWidth') minWidth: number | string;\n\n  /** The min height of the overlay panel. */\n  @Input('cdkConnectedOverlayMinHeight') minHeight: number | string;\n\n  /** The custom class to be set on the backdrop element. */\n  @Input('cdkConnectedOverlayBackdropClass') backdropClass: string;\n\n  /** The custom class to add to the overlay pane element. */\n  @Input('cdkConnectedOverlayPanelClass') panelClass: string | string[];\n\n  /** Margin between the overlay and the viewport edges. */\n  @Input('cdkConnectedOverlayViewportMargin') viewportMargin: number = 0;\n\n  /** Strategy to be used when handling scroll events while the overlay is open. */\n  @Input('cdkConnectedOverlayScrollStrategy') scrollStrategy: ScrollStrategy;\n\n  /** Whether the overlay is open. */\n  @Input('cdkConnectedOverlayOpen') open: boolean = false;\n\n  /** Whether the overlay can be closed by user interaction. */\n  @Input('cdkConnectedOverlayDisableClose') disableClose: boolean = false;\n\n  /** CSS selector which to set the transform origin. */\n  @Input('cdkConnectedOverlayTransformOriginOn') transformOriginSelector: string;\n\n  /** Whether or not the overlay should attach a backdrop. */\n  @Input('cdkConnectedOverlayHasBackdrop')\n  get hasBackdrop() { return this._hasBackdrop; }\n  set hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n\n  /** Whether or not the overlay should be locked when scrolling. */\n  @Input('cdkConnectedOverlayLockPosition')\n  get lockPosition() { return this._lockPosition; }\n  set lockPosition(value: any) { this._lockPosition = coerceBooleanProperty(value); }\n\n  /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n  @Input('cdkConnectedOverlayFlexibleDimensions')\n  get flexibleDimensions() { return this._flexibleDimensions; }\n  set flexibleDimensions(value: boolean) {\n    this._flexibleDimensions = coerceBooleanProperty(value);\n  }\n\n  /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n  @Input('cdkConnectedOverlayGrowAfterOpen')\n  get growAfterOpen() { return this._growAfterOpen; }\n  set growAfterOpen(value: boolean) { this._growAfterOpen = coerceBooleanProperty(value); }\n\n  /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n  @Input('cdkConnectedOverlayPush')\n  get push() { return this._push; }\n  set push(value: boolean) { this._push = coerceBooleanProperty(value); }\n\n  /** Event emitted when the backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<MouseEvent>();\n\n  /** Event emitted when the position has changed. */\n  @Output() positionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n\n  /** Event emitted when the overlay has been attached. */\n  @Output() attach = new EventEmitter<void>();\n\n  /** Event emitted when the overlay has been detached. */\n  @Output() detach = new EventEmitter<void>();\n\n  /** Emits when there are keyboard events that are targeted at the overlay. */\n  @Output() overlayKeydown = new EventEmitter<KeyboardEvent>();\n\n  /** Emits when there are mouse outside click events that are targeted at the overlay. */\n  @Output() overlayOutsideClick = new EventEmitter<MouseEvent>();\n\n  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n\n  constructor(\n      private _overlay: Overlay,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\n      @Inject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY) scrollStrategyFactory: any,\n      @Optional() private _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this.scrollStrategy = this._scrollStrategyFactory();\n  }\n\n  /** The associated overlay reference. */\n  get overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n\n  /** The element's layout direction. */\n  get dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n\n  ngOnDestroy() {\n    this._attachSubscription.unsubscribe();\n    this._detachSubscription.unsubscribe();\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._position) {\n      this._updatePositionStrategy(this._position);\n      this._overlayRef.updateSize({\n        width: this.width,\n        minWidth: this.minWidth,\n        height: this.height,\n        minHeight: this.minHeight,\n      });\n\n      if (changes['origin'] && this.open) {\n        this._position.apply();\n      }\n    }\n\n    if (changes['open']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n\n  /** Creates an overlay */\n  private _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n    overlayRef.keydownEvents().subscribe((event: KeyboardEvent) => {\n      this.overlayKeydown.next(event);\n\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this._detachOverlay();\n      }\n    });\n\n    this._overlayRef.outsidePointerEvents().subscribe((event: MouseEvent) => {\n      this.overlayOutsideClick.next(event);\n    });\n  }\n\n  /** Builds the overlay config based on the directive's inputs */\n  private _buildConfig(): OverlayConfig {\n    const positionStrategy = this._position =\n      this.positionStrategy || this._createPositionStrategy();\n    const overlayConfig = new OverlayConfig({\n      direction: this._dir,\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    if (this.panelClass) {\n      overlayConfig.panelClass = this.panelClass;\n    }\n\n    return overlayConfig;\n  }\n\n  /** Updates the state of a position strategy, based on the values of the directive inputs. */\n  private _updatePositionStrategy(positionStrategy: FlexibleConnectedPositionStrategy) {\n    const positions: ConnectedPosition[] = this.positions.map(currentPosition => ({\n      originX: currentPosition.originX,\n      originY: currentPosition.originY,\n      overlayX: currentPosition.overlayX,\n      overlayY: currentPosition.overlayY,\n      offsetX: currentPosition.offsetX || this.offsetX,\n      offsetY: currentPosition.offsetY || this.offsetY,\n      panelClass: currentPosition.panelClass || undefined,\n    }));\n\n    return positionStrategy\n      .setOrigin(this.origin.elementRef)\n      .withPositions(positions)\n      .withFlexibleDimensions(this.flexibleDimensions)\n      .withPush(this.push)\n      .withGrowAfterOpen(this.growAfterOpen)\n      .withViewportMargin(this.viewportMargin)\n      .withLockedPosition(this.lockPosition)\n      .withTransformOriginOn(this.transformOriginSelector);\n  }\n\n  /** Returns the position strategy of the overlay to be set on the overlay config */\n  private _createPositionStrategy(): FlexibleConnectedPositionStrategy {\n    const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n    this._updatePositionStrategy(strategy);\n    return strategy;\n  }\n\n  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n  private _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    } else {\n      // Update the overlay size, in case the directive's inputs have changed\n      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n        this.backdropClick.emit(event);\n      });\n    } else {\n      this._backdropSubscription.unsubscribe();\n    }\n\n    this._positionSubscription.unsubscribe();\n\n    // Only subscribe to `positionChanges` if requested, because putting\n    // together all the information for it can be expensive.\n    if (this.positionChange.observers.length > 0) {\n      this._positionSubscription = this._position.positionChanges\n        .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n        .subscribe(position => {\n          this.positionChange.emit(position);\n\n          if (this.positionChange.observers.length === 0) {\n            this._positionSubscription.unsubscribe();\n          }\n        });\n    }\n  }\n\n  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n  private _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n    }\n\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n  }\n\n  static ngAcceptInputType_hasBackdrop: BooleanInput;\n  static ngAcceptInputType_lockPosition: BooleanInput;\n  static ngAcceptInputType_flexibleDimensions: BooleanInput;\n  static ngAcceptInputType_growAfterOpen: BooleanInput;\n  static ngAcceptInputType_push: BooleanInput;\n}\n\n\n/** @docs-private */\nexport function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {NgModule} from '@angular/core';\nimport {Overlay} from './overlay';\nimport {\n  CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  CdkConnectedOverlay,\n  CdkOverlayOrigin,\n} from './overlay-directives';\n\n\n@NgModule({\n  imports: [BidiModule, PortalModule, ScrollingModule],\n  exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n  declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n  providers: [\n    Overlay,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  ],\n})\nexport class OverlayModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {OverlayOutsideClickDispatcher} from './overlay-outside-click-dispatcher';\nexport {OverlayKeyboardDispatcher} from './overlay-keyboard-dispatcher';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, OnDestroy} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\nimport {DOCUMENT} from '@angular/common';\nimport {Platform} from '@angular/cdk/platform';\n\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\n@Injectable({providedIn: 'root'})\nexport class FullscreenOverlayContainer extends OverlayContainer implements OnDestroy {\n  private _fullScreenEventName: string | undefined;\n  private _fullScreenListener: () => void;\n\n  constructor(@Inject(DOCUMENT) _document: any, platform: Platform) {\n    super(_document, platform);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n\n    if (this._fullScreenEventName && this._fullScreenListener) {\n      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n    }\n  }\n\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n\n    const fullscreenElement = this.getFullscreenElement();\n    const parent = fullscreenElement || this._document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    const eventName = this._getEventName();\n\n    if (eventName) {\n      if (this._fullScreenListener) {\n        this._document.removeEventListener(eventName, this._fullScreenListener);\n      }\n\n      this._document.addEventListener(eventName, fn);\n      this._fullScreenListener = fn;\n    }\n  }\n\n  private _getEventName(): string | undefined {\n    if (!this._fullScreenEventName) {\n      const _document = this._document as any;\n\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n\n    return this._fullScreenEventName;\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement(): Element {\n    const _document = this._document as any;\n\n    return _document.fullscreenElement ||\n           _document.webkitFullscreenElement ||\n           _document.mozFullScreenElement ||\n           _document.msFullscreenElement ||\n           null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './overlay-config';\nexport * from './position/connected-position';\nexport * from './scroll/index';\nexport * from './overlay-module';\nexport * from './dispatchers/index';\nexport {Overlay} from './overlay';\nexport {OverlayContainer} from './overlay-container';\nexport {CdkOverlayOrigin, CdkConnectedOverlay} from './overlay-directives';\nexport {FullscreenOverlayContainer} from './fullscreen-overlay-container';\nexport {OverlayRef, OverlaySizeConfig} from './overlay-ref';\nexport {ViewportRuler} from '@angular/cdk/scrolling';\nexport {ComponentType} from '@angular/cdk/portal';\nexport {OverlayPositionBuilder} from './position/overlay-position-builder';\n\n// Export pre-defined position strategies and interface to build custom ones.\nexport {PositionStrategy} from './position/position-strategy';\nexport {GlobalPositionStrategy} from './position/global-position-strategy';\nexport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nexport {\n  ConnectedPosition,\n  FlexibleConnectedPositionStrategy,\n  FlexibleConnectedPositionStrategyOrigin,\n} from './position/flexible-connected-position-strategy';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_d} from './dispatchers/base-overlay-dispatcher';\nexport {CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_a,CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_c,CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_b} from './overlay-directives';"]}