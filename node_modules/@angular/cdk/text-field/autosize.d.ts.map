{"version":3,"file":"autosize.d.ts","sources":["autosize.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput, NumberInput } from '@angular/cdk/coercion';\r\nimport { ElementRef, AfterViewInit, DoCheck, OnDestroy, NgZone } from '@angular/core';\r\nimport { Platform } from '@angular/cdk/platform';\r\n/** Directive to automatically resize a textarea to fit its content. */\r\nexport declare class CdkTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\r\n    private _elementRef;\r\n    private _platform;\r\n    private _ngZone;\r\n    /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\r\n    private _previousValue?;\r\n    private _initialHeight;\r\n    private readonly _destroyed;\r\n    private _minRows;\r\n    private _maxRows;\r\n    private _enabled;\r\n    /**\r\n     * Value of minRows as of last resize. If the minRows has decreased, the\r\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\r\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\r\n     */\r\n    private _previousMinRows;\r\n    private _textareaElement;\r\n    /** Minimum amount of rows in the textarea. */\r\n    get minRows(): number;\r\n    set minRows(value: number);\r\n    /** Maximum amount of rows in the textarea. */\r\n    get maxRows(): number;\r\n    set maxRows(value: number);\r\n    /** Whether autosizing is enabled or not */\r\n    get enabled(): boolean;\r\n    set enabled(value: boolean);\r\n    /** Cached height of a textarea with a single row. */\r\n    private _cachedLineHeight;\r\n    /** Used to reference correct document/window */\r\n    protected _document?: Document;\r\n    /** Class that should be applied to the textarea while it's being measured. */\r\n    private _measuringClass;\r\n    constructor(_elementRef: ElementRef<HTMLElement>, _platform: Platform, _ngZone: NgZone, \r\n    /** @breaking-change 11.0.0 make document required */\r\n    document?: any);\r\n    /** Sets the minimum height of the textarea as determined by minRows. */\r\n    _setMinHeight(): void;\r\n    /** Sets the maximum height of the textarea as determined by maxRows. */\r\n    _setMaxHeight(): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Cache the height of a single-row textarea if it has not already been cached.\r\n     *\r\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\r\n     * maxRows. For the initial version, we will assume that the height of a single line in the\r\n     * textarea does not ever change.\r\n     */\r\n    private _cacheTextareaLineHeight;\r\n    ngDoCheck(): void;\r\n    /**\r\n     * Resize the textarea to fit its content.\r\n     * @param force Whether to force a height recalculation. By default the height will be\r\n     *    recalculated only if the value changed since the last call.\r\n     */\r\n    resizeToFitContent(force?: boolean): void;\r\n    /**\r\n     * Resets the textarea to its original size\r\n     */\r\n    reset(): void;\r\n    _noopInputHandler(): void;\r\n    /** Access injected document if available or fallback to global document reference */\r\n    private _getDocument;\r\n    /** Use defaultView of injected document if available or fallback to global window reference */\r\n    private _getWindow;\r\n    /**\r\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\r\n     * prevent it from scrolling to the caret position. We need to re-set the selection\r\n     * in order for it to scroll to the proper position.\r\n     */\r\n    private _scrollToCaretPosition;\r\n    static ngAcceptInputType_minRows: NumberInput;\r\n    static ngAcceptInputType_maxRows: NumberInput;\r\n    static ngAcceptInputType_enabled: BooleanInput;\r\n}\r\n"]}