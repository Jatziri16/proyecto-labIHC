{"version":3,"file":"scroll-dispatcher.d.ts","sources":["scroll-dispatcher.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { ElementRef, NgZone, OnDestroy } from '@angular/core';\r\nimport { Subscription, Observable } from 'rxjs';\r\nimport { CdkScrollable } from './scrollable';\r\n/** Time in ms to throttle the scrolling events by default. */\r\nexport declare const DEFAULT_SCROLL_TIME = 20;\r\n/**\r\n * Service contained all registered Scrollable references and emits an event when any one of the\r\n * Scrollable references emit a scrolled event.\r\n */\r\nexport declare class ScrollDispatcher implements OnDestroy {\r\n    private _ngZone;\r\n    private _platform;\r\n    /** Used to reference correct document/window */\r\n    protected _document: Document;\r\n    constructor(_ngZone: NgZone, _platform: Platform, document: any);\r\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\r\n    private _scrolled;\r\n    /** Keeps track of the global `scroll` and `resize` subscriptions. */\r\n    _globalSubscription: Subscription | null;\r\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\r\n    private _scrolledCount;\r\n    /**\r\n     * Map of all the scrollable references that are registered with the service and their\r\n     * scroll event subscriptions.\r\n     */\r\n    scrollContainers: Map<CdkScrollable, Subscription>;\r\n    /**\r\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\r\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\r\n     * @param scrollable Scrollable instance to be registered.\r\n     */\r\n    register(scrollable: CdkScrollable): void;\r\n    /**\r\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\r\n     * @param scrollable Scrollable instance to be deregistered.\r\n     */\r\n    deregister(scrollable: CdkScrollable): void;\r\n    /**\r\n     * Returns an observable that emits an event whenever any of the registered Scrollable\r\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\r\n     * to override the default \"throttle\" time.\r\n     *\r\n     * **Note:** in order to avoid hitting change detection for every scroll event,\r\n     * all of the events emitted from this stream will be run outside the Angular zone.\r\n     * If you need to update any data bindings as a result of a scroll event, you have\r\n     * to run the callback using `NgZone.run`.\r\n     */\r\n    scrolled(auditTimeInMs?: number): Observable<CdkScrollable | void>;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Returns an observable that emits whenever any of the\r\n     * scrollable ancestors of an element are scrolled.\r\n     * @param elementOrElementRef Element whose ancestors to listen for.\r\n     * @param auditTimeInMs Time to throttle the scroll events.\r\n     */\r\n    ancestorScrolled(elementOrElementRef: ElementRef | HTMLElement, auditTimeInMs?: number): Observable<CdkScrollable | void>;\r\n    /** Returns all registered Scrollables that contain the provided element. */\r\n    getAncestorScrollContainers(elementOrElementRef: ElementRef | HTMLElement): CdkScrollable[];\r\n    /** Use defaultView of injected document if available or fallback to global window reference */\r\n    private _getWindow;\r\n    /** Returns true if the element is contained within the provided Scrollable. */\r\n    private _scrollableContainsElement;\r\n    /** Sets up the global scroll listeners. */\r\n    private _addGlobalListener;\r\n    /** Cleans up the global scroll listener. */\r\n    private _removeGlobalListener;\r\n}\r\n"]}