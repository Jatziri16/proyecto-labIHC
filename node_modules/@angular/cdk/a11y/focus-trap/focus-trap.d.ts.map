{"version":3,"file":"focus-trap.d.ts","sources":["focus-trap.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { AfterContentInit, ElementRef, NgZone, OnDestroy, DoCheck, SimpleChanges, OnChanges } from '@angular/core';\r\nimport { InteractivityChecker } from '../interactivity-checker/interactivity-checker';\r\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class currently uses a relatively simple approach to focus trapping.\r\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\r\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\r\n *\r\n * @deprecated Use `ConfigurableFocusTrap` instead.\r\n * @breaking-change 11.0.0\r\n */\r\nexport declare class FocusTrap {\r\n    readonly _element: HTMLElement;\r\n    private _checker;\r\n    readonly _ngZone: NgZone;\r\n    readonly _document: Document;\r\n    private _startAnchor;\r\n    private _endAnchor;\r\n    private _hasAttached;\r\n    protected startAnchorListener: () => boolean;\r\n    protected endAnchorListener: () => boolean;\r\n    /** Whether the focus trap is active. */\r\n    get enabled(): boolean;\r\n    set enabled(value: boolean);\r\n    protected _enabled: boolean;\r\n    constructor(_element: HTMLElement, _checker: InteractivityChecker, _ngZone: NgZone, _document: Document, deferAnchors?: boolean);\r\n    /** Destroys the focus trap by cleaning up the anchors. */\r\n    destroy(): void;\r\n    /**\r\n     * Inserts the anchors into the DOM. This is usually done automatically\r\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\r\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\r\n     * if the target element isn't currently in the DOM.\r\n     */\r\n    attachAnchors(): boolean;\r\n    /**\r\n     * Waits for the zone to stabilize, then either focuses the first element that the\r\n     * user specified, or the first tabbable element.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\r\n    focusInitialElementWhenReady(): Promise<boolean>;\r\n    /**\r\n     * Waits for the zone to stabilize, then focuses\r\n     * the first tabbable element within the focus trap region.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\r\n    focusFirstTabbableElementWhenReady(): Promise<boolean>;\r\n    /**\r\n     * Waits for the zone to stabilize, then focuses\r\n     * the last tabbable element within the focus trap region.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\r\n    focusLastTabbableElementWhenReady(): Promise<boolean>;\r\n    /**\r\n     * Get the specified boundary element of the trapped region.\r\n     * @param bound The boundary to get (start or end of trapped region).\r\n     * @returns The boundary element.\r\n     */\r\n    private _getRegionBoundary;\r\n    /**\r\n     * Focuses the element that should be focused when the focus trap is initialized.\r\n     * @returns Whether focus was moved successfully.\r\n     */\r\n    focusInitialElement(): boolean;\r\n    /**\r\n     * Focuses the first tabbable element within the focus trap region.\r\n     * @returns Whether focus was moved successfully.\r\n     */\r\n    focusFirstTabbableElement(): boolean;\r\n    /**\r\n     * Focuses the last tabbable element within the focus trap region.\r\n     * @returns Whether focus was moved successfully.\r\n     */\r\n    focusLastTabbableElement(): boolean;\r\n    /**\r\n     * Checks whether the focus trap has successfully been attached.\r\n     */\r\n    hasAttached(): boolean;\r\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\r\n    private _getFirstTabbableElement;\r\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\r\n    private _getLastTabbableElement;\r\n    /** Creates an anchor element. */\r\n    private _createAnchor;\r\n    /**\r\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\r\n     * @param isEnabled Whether the focus trap is enabled.\r\n     * @param anchor Anchor on which to toggle the tabindex.\r\n     */\r\n    private _toggleAnchorTabIndex;\r\n    /**\r\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\r\n     * @param enabled: Whether the anchors should trap Tab.\r\n     */\r\n    protected toggleAnchors(enabled: boolean): void;\r\n    /** Executes a function when the zone is stable. */\r\n    private _executeOnStable;\r\n}\r\n/**\r\n * Factory that allows easy instantiation of focus traps.\r\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\r\n * @breaking-change 11.0.0\r\n */\r\nexport declare class FocusTrapFactory {\r\n    private _checker;\r\n    private _ngZone;\r\n    private _document;\r\n    constructor(_checker: InteractivityChecker, _ngZone: NgZone, _document: any);\r\n    /**\r\n     * Creates a focus-trapped region around the given element.\r\n     * @param element The element around which focus will be trapped.\r\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\r\n     *     manually by the user.\r\n     * @returns The created focus trap instance.\r\n     */\r\n    create(element: HTMLElement, deferCaptureElements?: boolean): FocusTrap;\r\n}\r\n/** Directive for trapping focus within a region. */\r\nexport declare class CdkTrapFocus implements OnDestroy, AfterContentInit, OnChanges, DoCheck {\r\n    private _elementRef;\r\n    private _focusTrapFactory;\r\n    private _document;\r\n    /** Underlying FocusTrap instance. */\r\n    focusTrap: FocusTrap;\r\n    /** Previously focused element to restore focus to upon destroy when using autoCapture. */\r\n    private _previouslyFocusedElement;\r\n    /** Whether the focus trap is active. */\r\n    get enabled(): boolean;\r\n    set enabled(value: boolean);\r\n    /**\r\n     * Whether the directive should automatically move focus into the trapped region upon\r\n     * initialization and return focus to the previous activeElement upon destruction.\r\n     */\r\n    get autoCapture(): boolean;\r\n    set autoCapture(value: boolean);\r\n    private _autoCapture;\r\n    constructor(_elementRef: ElementRef<HTMLElement>, _focusTrapFactory: FocusTrapFactory, _document: any);\r\n    ngOnDestroy(): void;\r\n    ngAfterContentInit(): void;\r\n    ngDoCheck(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    private _captureFocus;\r\n    static ngAcceptInputType_enabled: BooleanInput;\r\n    static ngAcceptInputType_autoCapture: BooleanInput;\r\n}\r\n"]}