{"version":3,"file":"aria-describer.d.ts","sources":["aria-describer.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { OnDestroy } from '@angular/core';\r\n/**\r\n * Interface used to register message elements and keep a count of how many registrations have\r\n * the same message and the reference to the message element used for the `aria-describedby`.\r\n */\r\nexport interface RegisteredMessage {\r\n    /** The element containing the message. */\r\n    messageElement: Element;\r\n    /** The number of elements that reference this message element via `aria-describedby`. */\r\n    referenceCount: number;\r\n}\r\n/** ID used for the body container where all messages are appended. */\r\nexport declare const MESSAGES_CONTAINER_ID = \"cdk-describedby-message-container\";\r\n/** ID prefix used for each created message element. */\r\nexport declare const CDK_DESCRIBEDBY_ID_PREFIX = \"cdk-describedby-message\";\r\n/** Attribute given to each host element that is described by a message element. */\r\nexport declare const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = \"cdk-describedby-host\";\r\n/**\r\n * Utility that creates visually hidden elements with a message content. Useful for elements that\r\n * want to use aria-describedby to further describe themselves without adding additional visual\r\n * content.\r\n */\r\nexport declare class AriaDescriber implements OnDestroy {\r\n    private _document;\r\n    constructor(_document: any);\r\n    /**\r\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\r\n     * the message. If the same message has already been registered, then it will reuse the created\r\n     * message element.\r\n     */\r\n    describe(hostElement: Element, message: string, role?: string): void;\r\n    /**\r\n     * Adds to the host element an aria-describedby reference to an already-existing message element.\r\n     */\r\n    describe(hostElement: Element, message: HTMLElement): void;\r\n    /** Removes the host element's aria-describedby reference to the message. */\r\n    removeDescription(hostElement: Element, message: string, role?: string): void;\r\n    /** Removes the host element's aria-describedby reference to the message element. */\r\n    removeDescription(hostElement: Element, message: HTMLElement): void;\r\n    /** Unregisters all created message elements and removes the message container. */\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Creates a new element in the visually hidden message container element with the message\r\n     * as its content and adds it to the message registry.\r\n     */\r\n    private _createMessageElement;\r\n    /** Deletes the message element from the global messages container. */\r\n    private _deleteMessageElement;\r\n    /** Creates the global container for all aria-describedby messages. */\r\n    private _createMessagesContainer;\r\n    /** Deletes the global messages container. */\r\n    private _deleteMessagesContainer;\r\n    /** Removes all cdk-describedby messages that are hosted through the element. */\r\n    private _removeCdkDescribedByReferenceIds;\r\n    /**\r\n     * Adds a message reference to the element using aria-describedby and increments the registered\r\n     * message's reference count.\r\n     */\r\n    private _addMessageReference;\r\n    /**\r\n     * Removes a message reference from the element using aria-describedby\r\n     * and decrements the registered message's reference count.\r\n     */\r\n    private _removeMessageReference;\r\n    /** Returns true if the element has been described by the provided message ID. */\r\n    private _isElementDescribedByMessage;\r\n    /** Determines whether a message can be described on a particular element. */\r\n    private _canBeDescribed;\r\n    /** Checks whether a node is an Element node. */\r\n    private _isElementNode;\r\n}\r\n"]}