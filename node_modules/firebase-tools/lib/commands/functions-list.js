"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../command");
const error_1 = require("../error");
const projectUtils_1 = require("../projectUtils");
const requirePermissions_1 = require("../requirePermissions");
const backend = require("../deploy/functions/backend");
const listFunctions_1 = require("../functions/listFunctions");
const previews_1 = require("../previews");
const logger_1 = require("../logger");
const Table = require("cli-table");
exports.default = new command_1.Command("functions:list")
    .description("list all deployed functions in your Firebase project")
    .before(requirePermissions_1.requirePermissions, ["cloudfunctions.functions.list"])
    .action(async (options) => {
    try {
        const context = {
            projectId: projectUtils_1.needProjectId(options),
        };
        const functionList = await listFunctions_1.listFunctions(context);
        const table = previews_1.previews.functionsv2
            ? new Table({
                head: ["Function", "Version", "Trigger", "Location", "Memory", "Runtime"],
                style: { head: ["yellow"] },
            })
            : new Table({
                head: ["Function", "Trigger", "Location", "Memory", "Runtime"],
                style: { head: ["yellow"] },
            });
        for (const fnSpec of functionList.functions) {
            const trigger = backend.isEventTrigger(fnSpec.trigger) ? fnSpec.trigger.eventType : "https";
            const availableMemoryMb = fnSpec.availableMemoryMb || "---";
            const entry = previews_1.previews.functionsv2
                ? [
                    fnSpec.entryPoint,
                    fnSpec.platform === "gcfv2" ? "v2" : "v1",
                    trigger,
                    fnSpec.region,
                    availableMemoryMb,
                    fnSpec.runtime,
                ]
                : [fnSpec.entryPoint, trigger, fnSpec.region, availableMemoryMb, fnSpec.runtime];
            table.push(entry);
        }
        logger_1.logger.info(table.toString());
        return functionList;
    }
    catch (err) {
        throw new error_1.FirebaseError(`Failed to list functions ${err.message}`, {
            exit: 1,
            original: err,
        });
    }
});
