"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../command");
const clc = require("cli-color");
const functionsConfig = require("../functionsConfig");
const functionsDelete_1 = require("../functionsDelete");
const projectUtils_1 = require("../projectUtils");
const prompt_1 = require("../prompt");
const helper = require("../deploy/functions/functionsDeployHelper");
const requirePermissions_1 = require("../requirePermissions");
const utils = require("../utils");
const backend = require("../deploy/functions/backend");
exports.default = new command_1.Command("functions:delete [filters...]")
    .description("delete one or more Cloud Functions by name or group name.")
    .option("--region <region>", "Specify region of the function to be deleted. " +
    "If omitted, functions from all regions whose names match the filters will be deleted. ")
    .withForce()
    .before(requirePermissions_1.requirePermissions, ["cloudfunctions.functions.list", "cloudfunctions.functions.delete"])
    .action(async (filters, options) => {
    if (!filters.length) {
        return utils.reject("Must supply at least function or group name.");
    }
    const context = {
        projectId: projectUtils_1.needProjectId(options),
    };
    const filterChunks = filters.map((filter) => {
        return filter.split(".");
    });
    const [config, existingBackend] = await Promise.all([
        functionsConfig.getFirebaseConfig(options),
        backend.existingBackend(context),
    ]);
    await backend.checkAvailability(context, backend.empty());
    const appEngineLocation = functionsConfig.getAppEngineLocation(config);
    const functionsToDelete = existingBackend.cloudFunctions.filter((fn) => {
        const regionMatches = options.region ? fn.region === options.region : true;
        const nameMatches = helper.functionMatchesAnyGroup(fn, filterChunks);
        return regionMatches && nameMatches;
    });
    if (functionsToDelete.length === 0) {
        return utils.reject(`The specified filters do not match any existing functions in project ${clc.bold(context.projectId)}.`, { exit: 1 });
    }
    const schedulesToDelete = existingBackend.schedules.filter((schedule) => {
        functionsToDelete.some(backend.sameFunctionName(schedule.targetService));
    });
    const topicsToDelete = existingBackend.topics.filter((topic) => {
        functionsToDelete.some(backend.sameFunctionName(topic.targetService));
    });
    const deleteList = functionsToDelete
        .map((func) => {
        return "\t" + helper.getFunctionLabel(func);
    })
        .join("\n");
    const confirmDeletion = await prompt_1.promptOnce({
        type: "confirm",
        name: "force",
        default: false,
        message: "You are about to delete the following Cloud Functions:\n" +
            deleteList +
            "\n  Are you sure?",
    }, options);
    if (!confirmDeletion) {
        return utils.reject("Command aborted.", { exit: 1 });
    }
    return await functionsDelete_1.deleteFunctions(functionsToDelete, schedulesToDelete, topicsToDelete, appEngineLocation);
});
