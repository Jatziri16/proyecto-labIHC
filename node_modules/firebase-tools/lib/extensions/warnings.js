"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.displayWarningPrompts = void 0;
const marked = require("marked");
const clc = require("cli-color");
const extensionsApi_1 = require("./extensionsApi");
const displayExtensionInfo_1 = require("./displayExtensionInfo");
const extensionsHelper_1 = require("./extensionsHelper");
const resolveSource_1 = require("./resolveSource");
const utils = require("../utils");
function displayEAPWarning({ publisherId, sourceDownloadUri, githubLink, }) {
    const publisherNameLink = githubLink ? `[${publisherId}](${githubLink})` : publisherId;
    const warningMsg = `This extension is in preview and is built by a developer in the [Extensions Publisher Early Access Program](http://bit.ly/firex-provider). Its functionality might change in backward-incompatible ways. Since this extension isn't built by Firebase, reach out to ${publisherNameLink} with questions about this extension.`;
    const legalMsg = "\n\nIt is provided “AS IS”, without any warranty, express or implied, from Google. Google disclaims all liability for any damages, direct or indirect, resulting from the use of the extension, and its functionality might change in backward - incompatible ways.";
    utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(warningMsg + legalMsg));
    displayExtensionInfo_1.printSourceDownloadLink(sourceDownloadUri);
}
function displayExperimentalWarning() {
    utils.logLabeledBullet(extensionsHelper_1.logPrefix, marked(`${clc.yellow.bold("Important")}: This extension is ${clc.bold("experimental")} and may not be production-ready. Its functionality might change in backward-incompatible ways before its official release, or it may be discontinued.`));
}
async function displayWarningPrompts(publisherId, launchStage, extensionVersion) {
    const trustedPublishers = await resolveSource_1.getTrustedPublishers();
    if (!trustedPublishers.includes(publisherId)) {
        displayEAPWarning({
            publisherId,
            sourceDownloadUri: extensionVersion.sourceDownloadUri,
            githubLink: extensionVersion.spec.sourceUrl,
        });
    }
    else if (launchStage === extensionsApi_1.RegistryLaunchStage.EXPERIMENTAL) {
        displayExperimentalWarning();
    }
    else {
        return;
    }
}
exports.displayWarningPrompts = displayWarningPrompts;
