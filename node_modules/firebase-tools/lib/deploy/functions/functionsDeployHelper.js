"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printTriggerUrls = exports.printSuccess = exports.logAndTrackDeployStats = exports.getFunctionLabel = exports.getFunctionId = exports.getFilterGroups = exports.functionMatchesGroup = exports.functionMatchesAnyGroup = void 0;
const clc = require("cli-color");
const logger_1 = require("../../logger");
const backend = require("./backend");
const track = require("../../track");
const utils = require("../../utils");
function functionMatchesAnyGroup(func, filterGroups) {
    if (!filterGroups.length) {
        return true;
    }
    return filterGroups.some((groupChunk) => functionMatchesGroup(func, groupChunk));
}
exports.functionMatchesAnyGroup = functionMatchesAnyGroup;
function functionMatchesGroup(func, groupChunks) {
    const functionNameChunks = func.id.split("-").slice(0, groupChunks.length);
    if (functionNameChunks.length != groupChunks.length) {
        return false;
    }
    for (let i = 0; i < groupChunks.length; i += 1) {
        if (groupChunks[i] !== functionNameChunks[i]) {
            return false;
        }
    }
    return true;
}
exports.functionMatchesGroup = functionMatchesGroup;
function getFilterGroups(options) {
    if (!options.only) {
        return [];
    }
    const only = options.only.split(",");
    const onlyFunctions = only.filter((filter) => {
        const opts = filter.split(":");
        return opts[0] == "functions" && opts[1];
    });
    return onlyFunctions.map((filter) => {
        return filter.split(":")[1].split(/[.-]/);
    });
}
exports.getFilterGroups = getFilterGroups;
function getFunctionId(fullName) {
    return fullName.split("/")[5];
}
exports.getFunctionId = getFunctionId;
function getRegion(fullName) {
    return fullName.split("/")[3];
}
function getFunctionLabel(fnOrName) {
    if (typeof fnOrName === "string") {
        return getFunctionId(fnOrName) + "(" + getRegion(fnOrName) + ")";
    }
    else {
        return `${fnOrName.id}(${fnOrName.region})`;
    }
}
exports.getFunctionLabel = getFunctionLabel;
function logAndTrackDeployStats(queue, errorHandler) {
    const stats = queue.stats();
    logger_1.logger.debug(`Total Function Deployment time: ${stats.elapsed}`);
    logger_1.logger.debug(`${stats.total} Functions Deployed`);
    logger_1.logger.debug(`${errorHandler.errors.length} Functions Errored`);
    logger_1.logger.debug(`Average Function Deployment time: ${stats.avg}`);
    if (stats.total > 0) {
        if (errorHandler.errors.length === 0) {
            track("functions_deploy_result", "success", stats.total);
        }
        else if (errorHandler.errors.length < stats.total) {
            track("functions_deploy_result", "partial_success", stats.total - errorHandler.errors.length);
            track("functions_deploy_result", "partial_failure", errorHandler.errors.length);
            track("functions_deploy_result", "partial_error_ratio", errorHandler.errors.length / stats.total);
        }
        else {
            track("functions_deploy_result", "failure", stats.total);
        }
    }
}
exports.logAndTrackDeployStats = logAndTrackDeployStats;
function printSuccess(func, type) {
    utils.logSuccess(clc.bold.green("functions[" + getFunctionLabel(func) + "]: ") +
        "Successful " +
        type +
        " operation. ");
}
exports.printSuccess = printSuccess;
async function printTriggerUrls(context, want) {
    const have = await backend.existingBackend(context, true);
    const httpsFunctions = have.cloudFunctions.filter((fn) => {
        if (backend.isEventTrigger(fn.trigger)) {
            return false;
        }
        return want.cloudFunctions.some(backend.sameFunctionName(fn));
    });
    if (httpsFunctions.length === 0) {
        return;
    }
    for (const httpsFunc of httpsFunctions) {
        if (!httpsFunc.uri) {
            logger_1.logger.debug("Missing URI for HTTPS function in printTriggerUrls. This shouldn't happen");
            continue;
        }
        logger_1.logger.info(clc.bold("Function URL"), `(${getFunctionLabel(httpsFunc)}):`, httpsFunc.uri);
    }
}
exports.printTriggerUrls = printTriggerUrls;
