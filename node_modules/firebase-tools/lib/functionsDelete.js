"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteFunctions = void 0;
const helper = require("./deploy/functions/functionsDeployHelper");
const queue_1 = require("./throttler/queue");
const tasks = require("./deploy/functions/tasks");
const deploymentTimer_1 = require("./deploy/functions/deploymentTimer");
const errorHandler_1 = require("./deploy/functions/errorHandler");
async function deleteFunctions(functionsToDelete, schedulesToDelete, topicsToDelete, appEngineLocation) {
    const timer = new deploymentTimer_1.DeploymentTimer();
    const errorHandler = new errorHandler_1.ErrorHandler();
    const cloudFunctionsQueue = new queue_1.Queue({
        handler: tasks.functionsDeploymentHandler(timer, errorHandler),
        retries: 30,
        backoff: 10000,
        concurrency: 40,
        maxBackoff: 40000,
    });
    const schedulerQueue = new queue_1.Queue({
        handler: tasks.schedulerDeploymentHandler(errorHandler),
    });
    const topicQueue = new queue_1.Queue({
        handler: tasks.schedulerDeploymentHandler(errorHandler),
    });
    functionsToDelete.forEach((fn) => {
        const taskParams = {
            projectId: fn.project,
            errorHandler,
        };
        const deleteFunctionTask = tasks.deleteFunctionTask(taskParams, fn);
        void cloudFunctionsQueue.run(deleteFunctionTask);
    });
    schedulesToDelete.forEach((schedule) => {
        const taskParams = {
            projectId: schedule.project,
            errorHandler,
        };
        const deleteSchedulerTask = tasks.deleteScheduleTask(taskParams, schedule, appEngineLocation);
        void schedulerQueue.run(deleteSchedulerTask);
    });
    topicsToDelete.forEach((topic) => {
        const taskParams = {
            projectId: topic.project,
            errorHandler,
        };
        const deleteTopicTask = tasks.deleteTopicTask(taskParams, topic);
        void topicQueue.run(deleteTopicTask);
    });
    const queuePromises = [cloudFunctionsQueue.wait(), schedulerQueue.wait(), topicQueue.wait()];
    cloudFunctionsQueue.close();
    schedulerQueue.close();
    topicQueue.close();
    cloudFunctionsQueue.process();
    schedulerQueue.process();
    topicQueue.process();
    await Promise.all(queuePromises);
    helper.logAndTrackDeployStats(cloudFunctionsQueue, errorHandler);
    errorHandler.printErrors();
}
exports.deleteFunctions = deleteFunctions;
