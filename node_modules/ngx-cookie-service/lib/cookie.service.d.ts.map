{"version":3,"file":"cookie.service.d.ts","sources":["cookie.service.d.ts"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["export declare class CookieService {\r\n    private document;\r\n    private platformId;\r\n    private readonly documentIsAccessible;\r\n    constructor(document: any, platformId: any);\r\n    /**\r\n     * Get cookie Regular Expression\r\n     *\r\n     * @param name Cookie name\r\n     * @returns property RegExp\r\n     */\r\n    private static getCookieRegExp;\r\n    private static safeDecodeURIComponent;\r\n    /**\r\n     * Return `true` if {@link Document} is accessible, otherwise return `false`\r\n     *\r\n     * @param name Cookie name\r\n     * @returns boolean - whether cookie with specified name exists\r\n     */\r\n    check(name: string): boolean;\r\n    /**\r\n     * Get cookies by name\r\n     *\r\n     * @param name Cookie name\r\n     * @returns property value\r\n     */\r\n    get(name: string): string;\r\n    /**\r\n     * Get all cookies in JSON format\r\n     *\r\n     * @returns all the cookies in json\r\n     */\r\n    getAll(): {\r\n        [key: string]: string;\r\n    };\r\n    /**\r\n     * Set cookie based on provided information\r\n     *\r\n     * @param name     Cookie name\r\n     * @param value    Cookie value\r\n     * @param expires  Number of days until the cookies expires or an actual `Date`\r\n     * @param path     Cookie path\r\n     * @param domain   Cookie domain\r\n     * @param secure   Secure flag\r\n     * @param sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\r\n     */\r\n    set(name: string, value: string, expires?: number | Date, path?: string, domain?: string, secure?: boolean, sameSite?: 'Lax' | 'None' | 'Strict'): void;\r\n    /**\r\n     * Set cookie based on provided information\r\n     *\r\n     * Cookie's parameters:\r\n     * <pre>\r\n     * expires  Number of days until the cookies expires or an actual `Date`\r\n     * path     Cookie path\r\n     * domain   Cookie domain\r\n     * secure   Secure flag\r\n     * sameSite OWASP samesite token `Lax`, `None`, or `Strict`. Defaults to `Lax`\r\n     * </pre>\r\n     *\r\n     * @param name     Cookie name\r\n     * @param value    Cookie value\r\n     * @param options  Body with cookie's params\r\n     */\r\n    set(name: string, value: string, options?: {\r\n        expires?: number | Date;\r\n        path?: string;\r\n        domain?: string;\r\n        secure?: boolean;\r\n        sameSite?: 'Lax' | 'None' | 'Strict';\r\n    }): void;\r\n    /**\r\n     * Delete cookie by name\r\n     *\r\n     * @param name   Cookie name\r\n     * @param path   Cookie path\r\n     * @param domain Cookie domain\r\n     * @param secure Cookie secure flag\r\n     * @param sameSite Cookie sameSite flag - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\r\n     */\r\n    delete(name: string, path?: string, domain?: string, secure?: boolean, sameSite?: 'Lax' | 'None' | 'Strict'): void;\r\n    /**\r\n     * Delete all cookies\r\n     *\r\n     * @param path   Cookie path\r\n     * @param domain Cookie domain\r\n     * @param secure Is the Cookie secure\r\n     * @param sameSite Is the cookie same site\r\n     */\r\n    deleteAll(path?: string, domain?: string, secure?: boolean, sameSite?: 'Lax' | 'None' | 'Strict'): void;\r\n}\r\n"]}