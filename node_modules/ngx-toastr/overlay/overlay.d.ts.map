{"version":3,"file":"overlay.d.ts","sources":["overlay.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ApplicationRef, ComponentFactoryResolver } from '@angular/core';\r\nimport { ToastContainerDirective } from '../toastr/toast.directive';\r\nimport { OverlayContainer } from './overlay-container';\r\nimport { OverlayRef } from './overlay-ref';\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\r\n */\r\nexport declare class Overlay {\r\n    private _overlayContainer;\r\n    private _componentFactoryResolver;\r\n    private _appRef;\r\n    private _document;\r\n    private _paneElements;\r\n    constructor(_overlayContainer: OverlayContainer, _componentFactoryResolver: ComponentFactoryResolver, _appRef: ApplicationRef, _document: any);\r\n    /**\r\n     * Creates an overlay.\r\n     * @returns A reference to the created overlay.\r\n     */\r\n    create(positionClass?: string, overlayContainer?: ToastContainerDirective): OverlayRef;\r\n    getPaneElement(positionClass?: string, overlayContainer?: ToastContainerDirective): HTMLElement;\r\n    /**\r\n     * Creates the DOM element for an overlay and appends it to the overlay container.\r\n     * @returns Newly-created pane element\r\n     */\r\n    private _createPaneElement;\r\n    /**\r\n     * Create a DomPortalHost into which the overlay content can be loaded.\r\n     * @param pane The DOM element to turn into a portal host.\r\n     * @returns A portal host for the given DOM element.\r\n     */\r\n    private _createPortalHost;\r\n    /**\r\n     * Creates an OverlayRef for an overlay in the given DOM element.\r\n     * @param pane DOM element for the overlay\r\n     */\r\n    private _createOverlayRef;\r\n}\r\n"]}